

//Приложение|URL [Режим] [Команда1 [Команда2 […]]] Параметр

#Область ПрограммныйИнтерфейс

// Получить структуру параметров скрипта.
// 
// Параметры:
//  КонтекстВыполнения - Структура - Контекст выполнения
// 
// Возвращаемое значение:
//  Структура - Структура содержащая контекст выполнения
Функция ПолучитьЗначенияПараметровСкрипта(КонтекстВыполнения) Экспорт
	
	СтруктураПарметров = Новый Структура;
	СоответствиеПараметров = ПолучитьСопоставлениеРеквизитовИПараметров();
	
	Для Каждого ЭлементСоответствия Из СоответствиеПараметров Цикл
		СтруктураПарметров.Вставить(ЭлементСоответствия.Ключ, "");	
	КонецЦикла;
	
	ИнформационнаяБаза		= Неопределено;
	Пользователь				= Неопределено;
	WebСервер					= Неопределено;
	ХранилищеКонфигурации	= Неопределено;
	ПутьКФайлуПрограммы		= Неопределено;
	ПриложениеИсполнения		= Неопределено;
	
	Если КонтекстВыполнения.Свойство("ИнформационнаяБаза", ИнформационнаяБаза) Тогда
		ЗаполнитьПараметрыИнформационнойБазы(ИнформационнаяБаза, СтруктураПарметров);		
	КонецЕсли;
	
	Если КонтекстВыполнения.Свойство("Пользователь", Пользователь) Тогда
		ЗаполнитьПараметрыПользователяИС(КонтекстВыполнения, СтруктураПарметров);	
	КонецЕсли;
	
	Если КонтекстВыполнения.Свойство("WebСервер", WebСервер) Тогда
		ЗаполнитьПараметрыWebСервера(WebСервер, СтруктураПарметров);	
	КонецЕсли;
	
	Если КонтекстВыполнения.Свойство("ХранилищеКонфигурации", ХранилищеКонфигурации) Тогда
		ЗаполнитьПараметрыХранилищаКонфигурации(ХранилищеКонфигурации, СтруктураПарметров);	
	КонецЕсли;
	
	Если КонтекстВыполнения.Свойство("ПутьКФайлуПрограммы", ПутьКФайлуПрограммы) Тогда
//		ЗаполнитьПараметрыХранилищаКонфигурации(ПутьКФайлуПрограммы, СтруктураПарметров);
	Иначе
		СтруктураПарметров.ПутьКФайлуПрограммы = 	ПолучитьКаталогПрограммы();
	КонецЕсли;
	
	Если КонтекстВыполнения.Свойство("ПриложениеИсполнения", ПриложениеИсполнения) Тогда
		СтруктураПарметров.ИмяПриложения = ПолучитьИмяПриложения(ПриложениеИсполнения);
	КонецЕсли;
	
	Возврат СтруктураПарметров;
	
КонецФункции

// Получить текст скрипта.
// 
// Параметры:
//  ПриложениеИсполнения - ПеречислениеСсылка.ПриложениеЗапускаСкрипта - Приложение исполнения.
//  						 - Строка - Имя исполняемого файла приложения
//  
//  СоставСкрипта 	- Массив из Строка - Параметр и шаблон значения
//  					- Строка - параметры в строковом виде.
//  					
//  КонтекстВыполнения - Структура - Контекст выполнения.
// 
// Возвращаемое значение:
// 	Строка
//  
Функция ПолучитьТекстСкрипта(СоставСкрипта, КонтекстВыполнения) Экспорт
	
	ЗначенияПараметров = ПолучитьЗначенияПараметровСкрипта(КонтекстВыполнения);
	
	Если ТипЗнч(СоставСкрипта) = Тип("Массив") Тогда
		СтрокаСкрипта = СтрСоединить(СоставСкрипта, " ");
	Иначе
		СтрокаСкрипта = СоставСкрипта;
	КонецЕсли;
	
	СтрокаСкрипта = ЗаполнитьПараметрыСкрипта(СтрокаСкрипта, ЗначенияПараметров);
	
	Возврат СтрокаСкрипта;
	
КонецФункции


// Выполнить скрипт.
// 
// Параметры:
//  ТекстСкрипта - Строка - Текст скрипта
//  КаталогПрограммы - Строка - Каталог программы
//  ИмяПриложения - Строка - Имя приложения
// 
// Возвращаемое значение:
//  Структура - Выполнить скрипт:
// * КодВозврата - Число - (см. ФайловаяСистема.ЗапуститьПрограмму)
// * ПотокВывода - Строка, Неопределено -  (см. ФайловаяСистема.ЗапуститьПрограмму)
// * ПотокОшибок - Строка, Неопределено -  (см. ФайловаяСистема.ЗапуститьПрограмму)
Функция ВыполнитьСкрипт(ТекстСкрипта) Экспорт
	
	ПараметрыЗапускаПрограммы = ФайловаяСистема.ПараметрыЗапускаПрограммы(); 
	ПараметрыЗапускаПрограммы.ПолучитьПотокВывода = Истина;
	ПараметрыЗапускаПрограммы.ПолучитьПотокОшибок = Истина;
	ПараметрыЗапускаПрограммы.ДождатьсяЗавершения = Истина;
	
	Возврат ФайловаяСистема.ЗапуститьПрограмму(ТекстСкрипта, ПараметрыЗапускаПрограммы);  
	
КонецФункции // ВыполнитьСкриптНаСервере()

#КонецОбласти 

#Область СлужебныйПрограммныйИнтерфейс

// Получить имя приложения.
// 
// Параметры:
//  ПриложениеИсполнения - ПеречислениеСсылка.ПриложениеЗапускаСкрипта - Приложение исполнения
// 
// Возвращаемое значение:
// 	Строка - имя исполняемого файла
//  
Функция ПолучитьИмяПриложения(ПриложениеИсполнения) Экспорт
	
	Если ТипЗнч(ПриложениеИсполнения) = Тип("Строка") Тогда
		Возврат ПриложениеИсполнения;
	КонецЕсли;	
	
	ИндексЗначения			= Перечисления.ПриложениеЗапускаСкрипта.Индекс(ПриложениеИсполнения);
	МетаданныеПеречисления	= Метаданные.Перечисления.ПриложениеЗапускаСкрипта;
	ИмяЗначенияПеречисления	= МетаданныеПеречисления.ЗначенияПеречисления[ИндексЗначения].Имя;	

	Возврат СтрЗаменить(ИмяЗначенияПеречисления, "_", "");

КонецФункции

// Заполнить параметры скрипта.
// 
// Параметры:
//  ТекстСкрипта - Строка - Текст скрипта
//  Параметры - Структура - Параметры и строковые значения
// 
// Возвращаемое значение:
//  Строка - Заполнить параметры скрипта
Функция ЗаполнитьПараметрыСкрипта(Знач ТекстСкрипта, Параметры) Экспорт
	
	СоответствиеПараметров = ПолучитьСопоставлениеРеквизитовИПараметров();  
	
	Для Каждого Параметр Из Параметры Цикл
		ТекстСкрипта = СтрЗаменить(ТекстСкрипта, 
										"%" + СоответствиеПараметров[Параметр.Ключ] + "%", Параметр.Значение);	
	КонецЦикла;  
	
	Возврат ТекстСкрипта;
	
КонецФункции

//TODO Описание
Функция ПолучитьТекстСкриптаЗапускаИБ(СоставСкрипта, КонтекстВыполнения) Экспорт
	
	ИнформационнаяБаза = КонтекстВыполнения.ИнформационнаяБаза;
	СтруктураПараметровЗапуска = ИнформационнаяБаза.ПараметрыЗапуска.Получить();
	
	Если ЗначениеЗаполнено(СтруктураПараметровЗапуска) И ТипЗнч(СтруктураПараметровЗапуска) = Тип("Структура") Тогда
		
		Если СтруктураПараметровЗапуска.ВариантАутентификации = 0 Тогда
			СоставСкрипта.Добавить("/WA+");
		ИначеЕсли СтруктураПараметровЗапуска.ВариантАутентификации = 1 Тогда
			СоставСкрипта.Добавить("/WA-");
		ИначеЕсли СтруктураПараметровЗапуска.ВариантАутентификации = 2 Тогда
			СтруктураАвторизации = РегистрыСведений.ХранилищеПаролей.ПолучитьПараметрыАвторизации(ИнформационнаяБаза,
																	Справочники.ПользователиИБ.Администратор);
			СоставСкрипта.Добавить("/N""" + СтруктураАвторизации.ИмяПользователя + """");
			СоставСкрипта.Добавить("/P""" + СтруктураАвторизации.Пароль + """");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураПараметровЗапуска.Разрядность) Тогда
			СоставСкрипта.Добавить("/AppArch " + СтруктураПараметровЗапуска.Разрядность);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураПараметровЗапуска.ДополнительныеПараметрыЗапуска) Тогда
			СоставСкрипта.Добавить(СтруктураПараметровЗапуска.ДополнительныеПараметрыЗапуска);
		КонецЕсли;
		
		Если СтруктураПараметровЗапуска.ОсновнойРежимЗапуска = "Auto" Тогда
			СоставСкрипта.Вставить(0, КонтекстВыполнения.КаталогПрограммы + "1cv8s");
			СоставСкрипта.Добавить("/AppAutoCheckMode");
		ИначеЕсли СтруктураПараметровЗапуска.ОсновнойРежимЗапуска = "ThinClient" Тогда
			СоставСкрипта.Вставить(0, КонтекстВыполнения.КаталогПрограммы + "1cv8c");
		ИначеЕсли СтруктураПараметровЗапуска.ОсновнойРежимЗапуска = "ThickClient" Тогда
			СоставСкрипта.Вставить(0, КонтекстВыполнения.КаталогПрограммы + "1cv8");
		ИначеЕсли СтруктураПараметровЗапуска.ОсновнойРежимЗапуска = "WebClient" Тогда
			// TODO Реализовать запуск Веб клиента
			// временнно:
			СоставСкрипта.Вставить(0, КонтекстВыполнения.КаталогПрограммы + "1cv8s");
		КонецЕсли;
	Иначе
		СоставСкрипта.Вставить(0, КонтекстВыполнения.КаталогПрограммы + "1cv8s");
	КонецЕсли;
	
	ТекстСкрипта = РаботаСоСкриптамиСервер.ПолучитьТекстСкрипта(СоставСкрипта, КонтекстВыполнения);
	
	Возврат ТекстСкрипта;

КонецФункции

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

// Получить сопоставление реквизитов и параметров.
// 
// Возвращаемое значение:
//  Соответствие из Строка - сопоставление имен реквизитов и имен параметров коменд скрипта
Функция ПолучитьСопоставлениеРеквизитовИПараметров()
	
	СоответствиеПараметров = Новый Соответствие;
	СоответствиеПараметров.Вставить("АдресСервераАдминистрирования",	"agnServerName");
	СоответствиеПараметров.Вставить("ПортСервераАдминистрирования",	"agnServerPort");
	СоответствиеПараметров.Вставить("ПользовательЦентральногоСервер",	"agnServerUser");
	СоответствиеПараметров.Вставить("ПарольЦентральногоСервера",		"agnServerUserPassword");   
	
	СоответствиеПараметров.Вставить("СерверБД",						"dbServerName");
	СоответствиеПараметров.Вставить("БазаДанных",					"dbName");
	СоответствиеПараметров.Вставить("ИмяАдминистратораСУБД",			"dbUser");
	СоответствиеПараметров.Вставить("ПарольАдминистратораСУБД",		"dbUserPassword"); 
	
	СоответствиеПараметров.Вставить("АдресКластера",					"ibServerName");
	СоответствиеПараметров.Вставить("ПортКластера",					"ibServerPort");
	СоответствиеПараметров.Вставить("ИмяИБ",							"ibName");
	СоответствиеПараметров.Вставить("ИмяПользователяИБ",				"ibUser");
	СоответствиеПараметров.Вставить("ПарольПользователяИБ",			"ibUserPassword");   
	
	СоответствиеПараметров.Вставить("ПутьКХранилищуКонфигурации",		"crPath");
	СоответствиеПараметров.Вставить("ИмяПользователяХК",				"crUser");
	СоответствиеПараметров.Вставить("ПарольПользователяХК",			"crUserPassword");   
	
	СоответствиеПараметров.Вставить("ПутьКФайлуПрограммы",			"PrgPath");
	СоответствиеПараметров.Вставить("РежимЗапускаПриложения",			"PrgMode"); 
	
	СоответствиеПараметров.Вставить("ПутьКВременномуКаталогу",		"TmpPath");
	СоответствиеПараметров.Вставить("ВерсияПлатформы",				"Platform");
	
	СоответствиеПараметров.Вставить("ИмяПриложения",					"AppName");
	
	Возврат СоответствиеПараметров;
	
КонецФункции

// Получить каталог программы.
// 
// Возвращаемое значение:
// 	Строка - Путь к каталогу исполняемых файлов 1С на сервере
//  
Функция ПолучитьКаталогПрограммы()

	ПараметрыСистемы = Новый СистемнаяИнформация;
	
	Если ПараметрыСистемы.ТипПлатформы = ТипПлатформы.Windows_x86 
		Или ПараметрыСистемы.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		ПутьККаталогуПрограммы = "C:\Program Files\1cv8\%Platform%\bin\";
	Иначе
		ПутьККаталогуПрограммы = "/opt/1cv8/x86_64/%Platform%/";
	КонецЕсли;
	
	Возврат ПутьККаталогуПрограммы;
	 
КонецФункции	


// Заполнить параметры хранилища конфигурации.
// 
// Параметры:
//  ХранилищеКонфигурации - Неопределено - Хранилище конфигурации
//  СтруктураПарметров - Структура - Структура парметров
Процедура ЗаполнитьПараметрыХранилищаКонфигурации(ХранилищеКонфигурации, СтруктураПарметров)
	//TODO: Реализация
КонецПроцедуры

// Заполнить параметры информационной базы.
// 
// Параметры:
//  ИнформационнаяБаза - СправочникСсылка.ИнформационныеБазы - Информационная база
//  СтруктураПарметров - Структура - Структура парметров
Процедура ЗаполнитьПараметрыИнформационнойБазы(ИнформационнаяБаза, СтруктураПарметров)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				|	ИнформационныеБазы.Владелец.АдресСервераАдминистрирования КАК АдресСервераАдминистрирования,
				|	ИнформационныеБазы.Владелец.ПортСервераАдминистрирования КАК ПортСервераАдминистрирования,
				|	ИнформационныеБазы.Владелец.ПользовательЦентральногоСервер КАК ПользовательЦентральногоСервер,
				|	ИнформационныеБазы.Владелец.ПарольЦентральногоСервера КАК ПарольЦентральногоСервера,
				|	ИнформационныеБазы.СерверБД.ИмяСервера КАК СерверБД,
				|	ИнформационныеБазы.БазаДанных КАК БазаДанных,
				|	ИнформационныеБазы.СерверБД.ИмяАдминистратораСУБД КАК ИмяАдминистратораСУБД,
				|	ИнформационныеБазы.СерверБД.ПарольАдминистратораСУБД КАК ПарольАдминистратораСУБД,
				|	ИнформационныеБазы.Владелец.АдресКластера КАК АдресКластера,
				|	ИнформационныеБазы.Владелец.ПортКластера КАК ПортКластера,
				|	ИнформационныеБазы.ИмяИБ КАК ИмяИБ,
				|	ИнформационныеБазы.ИмяПользователяИБ КАК ИмяПользователяИБ,
				|	ИнформационныеБазы.ПарольПользователяИБ КАК ПарольПользователяИБ,
				|	ИнформационныеБазы.ХранилищеКонфигурации.ПутьКХранилищуКонфигурации КАК ПутьКХранилищуКонфигурации,
				|	ИнформационныеБазы.ИдентификаторБазы КАК ИдентификаторБазы,
				|	ИнформационныеБазы.Владелец.ВерсияПлатформы.Наименование КАК ВерсияПлатформы
				|ИЗ
				|	Справочник.ИнформационныеБазы КАК ИнформационныеБазы
				|ГДЕ
				|	ИнформационныеБазы.Ссылка = &ИнформационнаяБаза";
	
	Запрос.УстановитьПараметр("ИнформационнаяБаза", ИнформационнаяБаза);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(СтруктураПарметров, Выборка);
	СтруктураПарметров.ПортКластера = Формат(СтруктураПарметров.ПортКластера, "ЧГ=0");
	
КонецПроцедуры

// Заполнить параметры web сервера.
// 
// Параметры:
//  WebСервер - СправочникСсылка.ВебСерверы - Web сервер
//  СтруктураПарметров - Структура - Структура парметров
Процедура ЗаполнитьПараметрыWebСервера(WebСервер, СтруктураПарметров)
	//TODO: Реализация
КонецПроцедуры

// Заполнить параметры пользователя ИС.
// 
// Параметры:
//  КонтекстВыполнения - Структура - Пользователь ИС
//  СтруктураПарметров - Структура - Структура парметров
Процедура ЗаполнитьПараметрыПользователяИС(КонтекстВыполнения, СтруктураПарметров)
	//TODO: Реализация
КонецПроцедуры

#КонецОбласти 
