&НаКлиенте
Перем мТипХЗ;

&НаКлиенте
Перем мТипUUID;

&НаКлиенте
Перем мПоследнийUUID;


&НаСервере
Функция вПолучитьОбработку()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаСервереБезКонтекста
Функция вСкопироватьСтруктуру(Источник)
	Струк = новый Структура;
	
	Для каждого Элем из Источник Цикл
		Струк.Вставить(Элем.Ключ, Элем.Значение);
	КонецЦикла;
	
	Возврат Струк;
КонецФункции


#Область ОписаниеОбработки

&НаСервере
Процедура вСформироватьОписаниеРазработки()
	Если ЭтаФорма.ИмяФормы = вПолучитьОбработку().Метаданные().ОсновнаяФорма.ПолноеИмя() Тогда
		_ОписаниеРазработки = вПолучитьОбработку().вСформироватьОписаниеРазработки();
	Иначе
		_ОписаниеРазработки = новый Структура;
		_ОписаниеРазработки.Вставить("Наименование", "СДР: Редактор объекта ИБ");
		_ОписаниеРазработки.Вставить("НомерВерсии", "1.1.0.51");
		_ОписаниеРазработки.Вставить("ДатаВерсии", "31.08.2020");
		_ОписаниеРазработки.Вставить("Описание", "https://infostart.ru/public/983887/");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ОписаниеРазработкиНажатие(Элемент)
	СтрокаURL = _ОписаниеРазработки.Описание;
	Если не ПустаяСтрока(СтрокаURL) Тогда
		вВыполнитьПереходURL(СтрокаURL);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вВыполнитьПереходURL(СтрокаURL)
	Если ЗначениеЗаполнено(СтрокаURL) Тогда
		Попытка
			НачатьЗапускПриложения(новый ОписаниеОповещения("вПустойОбработчикОповещения", ЭтаФорма), СтрокаURL);
		Исключение
			Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вПустойОбработчикОповещения(КодВозврата = Неопределено, ДопПарам = Неопределено) Экспорт
	Возврат;
КонецПроцедуры

#КонецОбласти


&НаСервере
Процедура вСформироватьЗаголовок()
	ЭтаФорма.Заголовок = СтрШаблон("%1 (%2 от %3)", _ОписаниеРазработки.Наименование, _ОписаниеРазработки.НомерВерсии, _ОписаниеРазработки.ДатаВерсии);
КонецПроцедуры


&НаСервереБезКонтекста
Функция вЕстьПраваАдминистратора()
	Возврат ПравоДоступа("Администрирование", Метаданные);
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	вСформироватьОписаниеРазработки();
	вСформироватьЗаголовок();
	
	ПутьКФормам = вПолучитьОбработку().Метаданные().ПолноеИмя() + ".Форма.";
	
	_ОграничениеНаСписокЗависимых = 10000;
	_ПрефиксДляНовыхЭлементов = "__XXX__";
	_ТипОбъекта = "";
	_ПриЗаполненииОбрабатыватьТолькоВыделенныеСтроки = истина;
	
	_ПоказыватьИтогиПоЧисловымКолонкам = ложь;
	_ПоказыватьИтогиПоЧисловымКолонкамРД = ложь;
	_ИспользоватьЖирныйШрифтДляИтогов = истина;
	
	_КонфигурацияДопускаетДопДвижения = (Метаданные.Документы.Найти("РегистраторРасчетов") <> Неопределено);
	мОбъектСсылкаПредыдущий = Неопределено;
	
	вЗагрузитьНастройкиОбработки();
	
	Элементы.СтрДвиженияДокумента.Видимость = ложь;
	Элементы._ОткрытьРедакторДвиженийДоп.Видимость = ложь;
	
	Если не вЕстьПраваАдминистратора() Тогда
		Элементы.Форма_УдалитьОбъект.Видимость = ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("мОбъектСсылка") Тогда
		мОбъектСсылка = Параметры.мОбъектСсылка;
	КонецЕсли;
	
	Если Параметры.Свойство("АдресаХранилищ") Тогда
		_АдресаХранилищ = вСкопироватьСтруктуру(Параметры.АдресаХранилищ);
	Иначе
		_АдресаХранилищ = новый Структура("ОбщиеРеквизиты");
		_АдресаХранилищ.ОбщиеРеквизиты = ПоместитьВоВременноеХранилище(-1, УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	мТипХЗ = Тип("ХранилищеЗначения");
	мТипUUID = Тип("УникальныйИдентификатор");
	
	ОбновитьДанныеОбъекта(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура мОбъектСсылкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если мОбъектСсылка = Неопределено Тогда
		СтандартнаяОбработка = ложь;
		СтрукПарам = новый Структура("ЗакрыватьПриЗакрытииВладельца", истина);
		ОткрытьФорму(ПутьКФормам + "ФормаВыбораОбъекта", СтрукПарам, Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		Элемент.ОграничениеТипа = вСоздатьОписаниеТипов(ТипЗнч(мОбъектСсылка));
		
		Если _ИспользоватьНеСтандартнуюФормуДляВыбора Тогда
			СтандартнаяОбработка = ложь;
			пПолноеИмя = вПолучитьПолноеИмяМД(мОбъектСсылка);
			СтрукПараметры = новый Структура("ПутьКФормам, ПолноеИмя, АдресаХранилищ", ПутьКФормам, пПолноеИмя, _АдресаХранилищ);
			СтрукПараметры.Вставить("РежимВыбора", истина);
			Попытка
				ОткрытьФорму(ПутьКФормам + "ФормаСпискаОбъектов", СтрукПараметры, Элемент,истина,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			Исключение
				пОписаниеОшибки = ОписаниеОшибки();
				СтандартнаяОбработка = истина;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура мОбъектСсылкаПриИзменении(Элемент)
	ЭтаФорма.КлючУникальности = мОбъектСсылка;
	
	_URL = "";
	
	Если мОбъектСсылка <> Неопределено Тогда
		_UUID = "";
	КонецЕсли;
	ОбновитьДанныеОбъекта(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура мОбъектСсылкаОчистка(Элемент, СтандартнаяОбработка)
	Элемент.ОграничениеТипа = новый ОписаниеТипов();
КонецПроцедуры

&НаКлиенте
Процедура _ВыбратьУдаленныйОбъект(Команда)
	ПоказатьВводСтроки(новый ОписаниеОповещения("вОбработатьВводСтроки_ОбъектНеНайден", ЭтаФорма),,"Введите битую ссылку: <Объект не найден> ... ",,ложь);
КонецПроцедуры

&НаКлиенте
Процедура вОбработатьВводСтроки_ОбъектНеНайден(Строка, ДопПарам = Неопределено) Экспорт
	Если Строка <> Неопределено и не ПустаяСтрока(Строка) Тогда
		пСтрук = вПолучитьСсылкуНаУдаленныйОбъект(Строка);
		Если не пСтрук.Отказ Тогда
			мОбъектСсылка = пСтрук.Ссылка;
			ОбновитьДанныеОбъекта(Неопределено);
		ИначеЕсли не ПустаяСтрока(пСтрук.ПричинаОтказа) Тогда
			Сообщить(пСтрук.ПричинаОтказа);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _URLПриИзменении(Элемент)
	Если не ПустаяСтрока(_URL) Тогда
		НайтиОбъектПоURL(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ИмяНабораЗаписейПриИзменении(Элемент)
	вОбновитьНаборЗаписей();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеОбъекта(Команда)
	вОбновитьДанныеОбъекта();
КонецПроцедуры

&НаКлиенте
Процедура _ЗаполнитьПоОбразцу(Команда)
	Если мОбъектСсылка = Неопределено Тогда
		ПоказатьПредупреждение(,"Не задан объект для обработки!", 20);
		Возврат;
	КонецЕсли;
	
	пПолноеИмя = вПолучитьПолноеИмяМД(мОбъектСсылка);
	ОткрытьФорму(пПолноеИмя + ".ФормаВыбора",,,,,,новый ОписаниеОповещения("вОбработатьВыборОбразцаДляЗаполнения", ЭтаФорма),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
КонецПроцедуры

&НаКлиенте
Процедура вОбработатьВыборОбразцаДляЗаполнения(РезультатЗакрытия, ДопПарам = Неопределено) Экспорт
	Если РезультатЗакрытия <> Неопределено Тогда
		пОбъектСсылка = мОбъектСсылка;
		мОбъектСсылка = РезультатЗакрытия;
		
		Попытка
			вОбновитьДанныеОбъекта();
		Исключение
		КонецПопытки;
		
		мОбъектСсылка = пОбъектСсылка;
		_UUID = мОбъектСсылка.УникальныйИдентификатор();
		_URL  = вПолучитьНавигационнуюСсылку(мОбъектСсылка);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ЗаписатьОбъект(Команда)
	Если не ЗначениеЗаполнено(мОбъектСсылка) Тогда
		ПоказатьПредупреждение(,"Не задан объект для записи!", 20);
		Возврат;
	КонецЕсли;
	ПоказатьВопрос(новый ОписаниеОповещения("ЗаписатьОбъектДалее", ЭтаФорма), "Объект будет записан в базу. Продолжить?", РежимДиалогаВопрос.ДаНетОтмена, 20);
КонецПроцедуры

&НаКлиенте
Процедура _ЗаписатьОбъектКакНовый(Команда)
	Если мОбъектСсылка = Неопределено Тогда
		ПоказатьПредупреждение(,"Не заданы данные объекта для записи!", 20);
		Возврат;
	КонецЕсли;
	ПоказатьВопрос(новый ОписаниеОповещения("ЗаписатьОбъектКакНовыйДалее", ЭтаФорма), "В базу будет записан новый объект. Продолжить?", РежимДиалогаВопрос.ДаНетОтмена, 20);
КонецПроцедуры

&НаКлиенте
Процедура _ЗаписатьОбъектКакНовыйСУказаннымUUID(Команда)
	Если мОбъектСсылка = Неопределено Тогда
		ПоказатьПредупреждение(,"Не заданы данные объекта для записи!", 20);
		Возврат;
	ИначеЕсли ПустаяСтрока(_UUID) Тогда
		ПоказатьПредупреждение(,"Не задан UUID для нового объекта!", 20);
		Возврат;
	КонецЕсли;
	
	пТекст = "В базу будет записан новый объект с заданным UUID.
	|UUID: " + _UUID + "
	|
	|Продолжить?";
	ПоказатьВопрос(новый ОписаниеОповещения("ЗаписатьОбъектКакНовыйДалее", ЭтаФорма, _UUID), пТекст, РежимДиалогаВопрос.ДаНетОтмена, 20);
КонецПроцедуры

&НаКлиенте
Процедура _УдалитьОбъект(Команда)
	Если не ЗначениеЗаполнено(мОбъектСсылка) Тогда
		ПоказатьПредупреждение(,"Не задан объект для удаления!", 20);
		Возврат;
	КонецЕсли;
	ТекстВопроса = "Объект будет удален из базы!
	|Никакие проверки производиться не будут (возможно появление битых ссылок)!
	|
	|Продолжить?";
	ПоказатьВопрос(новый ОписаниеОповещения("УдалитьОбъектДалее", ЭтаФорма), ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, 20);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьОбъектДалее(РезультатВопроса, ДопПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Если вЗаписатьОбъект(ложь) Тогда
			ОтобразитьИзменениеДанных(мОбъектСсылка, ВидИзмененияДанных.Изменение);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьОбъектКакНовыйДалее(РезультатВопроса, ДопПараметры = Неопределено) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Если вЗаписатьОбъект(истина, ДопПараметры) Тогда
			ОтобразитьИзменениеДанных(мОбъектСсылка, ВидИзмененияДанных.Добавление);
			Если ДопПараметры <> Неопределено Тогда
				ОтобразитьИзменениеДанных(мОбъектСсылка, ВидИзмененияДанных.Изменение);
				//ПоказатьПредупреждение(,"Объект успешно записан!
				//|Для отображения новой ссылки необходимо перевыбрать объект.", 20);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОбъектДалее(РезультатВопроса, ДопПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		пОписаниеТипов = вСоздатьОписаниеТипов(ТипЗнч(мОбъектСсылка));
		
		Если вУдалитьОбъектНаСервере(мОбъектСсылка, _ЗаписьВРежимеЗагрузки) Тогда
			ОтобразитьИзменениеДанных(мОбъектСсылка, ВидИзмененияДанных.Удаление);
			мОбъектСсылка = пОписаниеТипов.ПривестиЗначение();
			ОбновитьДанныеОбъекта(Неопределено);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ПереключитьАктивностьЗаписей(Команда)
	Для каждого Стр из _НаборЗаписей Цикл
		Стр.Активность = не Стр.Активность;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура _ОбновитьНаборЗаписей(Команда)
	вОбновитьНаборЗаписей();
КонецПроцедуры

&НаКлиенте
Процедура _ЗаписатьНаборЗаписей(Команда)
	Если не ЗначениеЗаполнено(мОбъектСсылка) Тогда
		ПоказатьПредупреждение(,"Не задан объект для записи движений", 20);
		Возврат;
	КонецЕсли;
	Если ПустаяСтрока(_ИмяНабораЗаписей) Тогда
		ПоказатьПредупреждение(,"Не задан набор записей для сохранения", 20);
		Возврат;
	КонецЕсли;
	ПоказатьВопрос(новый ОписаниеОповещения("_ЗаписатьНаборЗаписейДалее", ЭтаФорма), "Набор записей будет записан в базу. Продолжить?", РежимДиалогаВопрос.ДаНетОтмена, 20);
КонецПроцедуры

&НаКлиенте
Процедура _ЗаписатьНаборЗаписейДалее(РезультатВопроса, ДопПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		вЗаписатьНаборЗаписей();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ПоказатьВсеДвижения(Команда)
	Если ЗначениеЗаполнено(мОбъектСсылка) Тогда
		СписокРегистров = Элементы._ИмяНабораЗаписей.СписокВыбора.Скопировать();
		Если СписокРегистров.Количество() <> 0 Тогда
			ТДок = вСформироватьОтчетПоДвижениям(мОбъектСсылка, СписокРегистров, _КонфигурацияДопускаетДопДвижения);
			ТДок.Показать("Наличие движений");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НайтиОбъектПоUUID(Команда)
	НайтиОбъектПоUUIDСервер();
КонецПроцедуры

&НаКлиенте
Процедура НайтиОбъектПоТипу_UUID(Команда)
	НайтиОбъектПоТипу_UUIDСервер();
КонецПроцедуры

&НаКлиенте
Процедура НайтиОбъектПоURL(Команда)
	Значение = вНайтиОбъектПоURL(_URL);
	
	Если мОбъектСсылка <> Значение Тогда
		мОбъектСсылка = Значение;
		ОбновитьДанныеОбъекта(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ОткрытьФормуСписка(Команда)
	Если мОбъектСсылка <> Неопределено Тогда
		пПолноеИмя = вПолучитьПолноеИмяМД(мОбъектСсылка);
		СтрукПараметры = новый Структура("ПутьКФормам, ПолноеИмя, АдресаХранилищ", ПутьКФормам, пПолноеИмя, _АдресаХранилищ);
		Попытка
			ОткрытьФорму(ПутьКФормам + "ФормаСпискаОбъектов", СтрукПараметры,,("Список."+пПолноеИмя),,,,РежимОткрытияОкнаФормы.Независимый);
		Исключение
			Сообщить("Не найдена форма ""ФормаСпискаОбъектов""!");
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбъект(Команда)
	Значение = Неопределено;
	
	ЭФ = ЭтаФорма.ТекущийЭлемент;
	
	Имя = вПолучитьПутьКДаннымТекущегоЭлемента();
	Если не ЗначениеЗаполнено(Имя) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ЭФ) = Тип("ПолеФормы") Тогда
		Значение = ЭтаФорма[Имя];
	ИначеЕсли ТипЗнч(ЭФ) = Тип("ТаблицаФормы") Тогда
		ТекДанные = ЭФ.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			Если ЭФ.Имя = "РеквизитыОбъекта" Тогда
				Значение = ТекДанные.Значение;
			Иначе
				Значение = ТекДанные[Имя];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Значение) Тогда
		Если ТипЗнч(Значение) = мТипХЗ Тогда
			вПоказатьЗначениеХЗ(Значение);
			
		ИначеЕсли вЭтоОбъектМетаданных(ТипЗнч(Значение)) Тогда
			СтрукПарам = новый Структура("ПутьКФормам, мОбъектСсылка, АдресаХранилищ", ПутьКФормам, Значение, _АдресаХранилищ);
			ОткрытьФорму(ПутьКФормам + "ФормаОбъекта", СтрукПарам, ,Значение);
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ПоказатьТипЗначения(Команда)
	_ТипЗначенияТекущегоПоля = "";
	
	Значение = Неопределено;
	
	ЭФ = ЭтаФорма.ТекущийЭлемент;
	
	Имя = вПолучитьПутьКДаннымТекущегоЭлемента();
	Если не ЗначениеЗаполнено(Имя) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ЭФ) = Тип("ПолеФормы") Тогда
		Значение = ЭтаФорма[Имя];
	ИначеЕсли ТипЗнч(ЭФ) = Тип("ТаблицаФормы") Тогда
		ТекДанные = ЭФ.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			Если ЭФ.Имя = "РеквизитыОбъекта" Тогда
				Значение = ТекДанные.Значение;
			Иначе
				Значение = ТекДанные[Имя];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Значение = Неопределено Тогда
		ИмяТипа = "Неопределено";
	Иначе
		ИмяТипа = вСформироватьИмяТипаПоЗначению(Значение);
	КонецЕсли;
	
	_ТипЗначенияТекущегоПоля = ИмяТипа;
КонецПроцедуры

&НаКлиенте
Процедура вПоказатьЗначениеХЗ(Значение)
	СтрукПарам = новый Структура("ПутьКФормам, ДанныеХЗ, АдресаХранилищ", ПутьКФормам, Значение, _АдресаХранилищ);
	ОткрытьФорму(ПутьКФормам + "ФормаОтображенияХЗ", СтрукПарам, ,ТекущаяДата());
КонецПроцедуры


&НаСервере
Функция вПолучитьПутьКДаннымТекущегоЭлемента()
	ЭФ = ЭтаФорма.ТекущийЭлемент;
	
	Если ТипЗнч(ЭФ) = Тип("ТаблицаФормы") Тогда
		ТекПоле = ЭФ.ТекущийЭлемент;
		Если ТипЗнч(ТекПоле) = Тип("ПолеФормы") Тогда
			Значение = ТекПоле.ПутьКДанным;
			Поз = Найти(Значение, ".");
			Если Поз <> 0 Тогда
				Значение = Сред(Значение, Поз+1);
				Если Найти(Значение, ".") = 0 Тогда
					Возврат Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЭФ) = Тип("ПолеФормы") Тогда
		Возврат ЭФ.ПутьКДанным;
	КонецЕсли;
	
	Возврат "";
КонецФункции

&НаСервере
Функция вПолучитьСвойстваТабличногоПоля(Знач ИмяЭФ)
	пРезультат = новый Структура("Отказ, Таблица, Поле", истина, "", "");
	
	ЭФ = ЭтаФорма.Элементы[ИмяЭФ];
	
	Если ТипЗнч(ЭФ) = Тип("ТаблицаФормы") Тогда
		пРезультат.Вставить("Таблица", ЭФ.ПутьКДанным);
		
		ТекПоле = ЭФ.ТекущийЭлемент;
		Если ТипЗнч(ТекПоле) = Тип("ПолеФормы") Тогда
			Значение = ТекПоле.ПутьКДанным;
			Поз = Найти(Значение, ".");
			Если Поз <> 0 Тогда
				Значение = Сред(Значение, Поз+1);
				пРезультат.Вставить("Поле", Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	пРезультат.Отказ = (ПустаяСтрока(пРезультат.Таблица) или ПустаяСтрока(пРезультат.Поле));
	
	Возврат пРезультат;
КонецФункции

&НаСервереБезКонтекста
Функция вСформироватьИмяТипаПоЗначению(Знач Значение)
	пТип = ТипЗнч(Значение);
	
	ОбъектМД = Метаданные.НайтиПоТипу(пТип);
	Если ОбъектМД <> Неопределено Тогда
		ИмяТипа = ОбъектМД.ПолноеИмя();
	Иначе
		ИмяТипа = Строка(пТип);
	КонецЕсли;
	
	Возврат ИмяТипа;
КонецФункции

&НаСервереБезКонтекста
Функция вЭтоОбъектМетаданных(Знач Тип)
	ОбъектМД = Метаданные.НайтиПоТипу(Тип);
	Возврат ( ОбъектМД <> Неопределено и не Метаданные.Перечисления.Содержит(ОбъектМД) );
КонецФункции

&НаСервереБезКонтекста
Функция вПолучитьПолноеИмяМД(Ссыдка)
	Попытка
		Возврат Ссыдка.Метаданные().ПолноеИмя();
	Исключение
		Возврат Неопределено;
	КонецПопытки;
КонецФункции

&НаСервереБезКонтекста
Функция вНайтиОбъектПоURL(Знач URL)
    Поз1 = Найти(URL, "e1cib/data/");
    Поз2 = Найти(URL, "?ref=");
	
	Если Поз1 = 0 или Поз2 = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
	    ИмяТипа = Сред(URL, Поз1 + 11, Поз2 - Поз1 - 11);
	    ШаблонЗначения = ЗначениеВСтрокуВнутр(ПредопределенноеЗначение(ИмяТипа + ".ПустаяСсылка"));
	    ЗначениеСсылки = СтрЗаменить(ШаблонЗначения, "00000000000000000000000000000000", Сред(URL, Поз2 + 5));
	    Ссылка = ЗначениеИзСтрокиВнутр(ЗначениеСсылки);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Ссылка;
КонецФункции

&НаСервереБезКонтекста
Функция вПолучитьСсылкуНаУдаленныйОбъект(Знач пСтрокаОбъектНеНайден)
	пРезультат = новый Структура("Отказ, ПричинаОтказа, Ссылка", истина, "");
	пРезультат.ПричинаОтказа = "Неправильный формат строки!";
	
	Если ПустаяСтрока(пСтрокаОбъектНеНайден) Тогда
		пСтрокаОбъектНеНайден = "<Объект не найден> (769:b1390050568b35ac11e6e46fdd2c3861)";
	КонецЕсли;
	
	пСтрокаОбъектНеНайден = Сред(пСтрокаОбъектНеНайден, СтрНайти(пСтрокаОбъектНеНайден, "(") + 1);
	пСтрокаОбъектНеНайден = СтрЗаменить(пСтрокаОбъектНеНайден, ")", "");
	пСтрокаОбъектНеНайден = СокрЛП(пСтрокаОбъектНеНайден);
	
	Поз = СтрНайти(пСтрокаОбъектНеНайден, ":");
	
	пТип = Лев(пСтрокаОбъектНеНайден, Поз-1);
	пСтрока = Сред(пСтрокаОбъектНеНайден, Поз+1);
	
	Попытка
		пUUID = Сред(пСтрока,25,8)+"-"+Сред(пСтрока,21,4)+"-"+Сред(пСтрока,17,4)+"-"+Сред(пСтрока,1,4)+"-"+Сред(пСтрока,5,12);
		пUUID = новый УникальныйИдентификатор(пUUID);
		
		пСтрукОбъектыМД = новый Структура("ПланыОбмена, Справочники, Документы, ПланыВидовРасчета, ПланыВидовХарактеристик, ПланыСчетов, БизнесПроцессы, Задачи");
		
		Для каждого пРаздел из пСтрукОбъектыМД Цикл
			Для каждого Элем из Метаданные[пРаздел.Ключ] Цикл
				пМенеджер = Вычислить(пРаздел.Ключ + "[Элем.Имя]");
				пСтрока = ЗначениеВСтрокуВнутр(пМенеджер.ПустаяСсылка());
				Поз1 = СтрНайти(пСтрока, ",", НаправлениеПоиска.СКонца);
				Поз2 = СтрНайти(пСтрока, ":");
				
				Если Сред(пСтрока, Поз1+1, Поз2-Поз1-1) = пТип Тогда
					пРезультат.Ссылка = пМенеджер.ПолучитьСсылку(пUUID);
					пРезультат.Отказ = ложь;
					
					Возврат пРезультат;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Исключение
		пРезультат.ПричинаОтказа = пРезультат.ПричинаОтказа + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат пРезультат;
	КонецПопытки;
	
	Возврат пРезультат;
КонецФункции


&НаСервере
Процедура НайтиОбъектПоUUIDСервер()
	Если не ПустаяСтрока(_UUID) Тогда
		мОбъектСсылка = Неопределено;
		_ТипОбъекта = "";
		
		Попытка
			УИД = новый УникальныйИдентификатор(_UUID);
		Исключение
			Сообщить("Неправильное значение UUID");
			Возврат;
		КонецПопытки;
		
		Если не ЗначениеЗаполнено(УИД) Тогда
			Возврат;
		КонецЕсли;
		
		Струк = новый Структура("Справочники, Документы, ПланыВидовРасчета, ПланыВидовХарактеристик, ПланыСчетов, БизнесПроцессы, Задачи");
		Для каждого Элем из Струк Цикл
			ОбъектыМенеджер = Вычислить(Элем.Ключ);
			Для каждого Менеджер из ОбъектыМенеджер Цикл
				Х = Менеджер.ПолучитьСсылку(УИД);
				Если Х.ПолучитьОбъект() <> Неопределено Тогда
					мОбъектСсылка = Х;
					_ТипОбъекта = мОбъектСсылка.Метаданные().ПолноеИмя();
					вОбновитьДанныеОбъекта();
					Возврат;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура НайтиОбъектПоТипу_UUIDСервер()
	Если не ПустаяСтрока(_ТипОбъекта) и не ПустаяСтрока(_UUID) Тогда
		Попытка
			УИД = новый УникальныйИдентификатор(_UUID);
		Исключение
			Сообщить("Неправильное значение UUID");
			Возврат;
		КонецПопытки;
		
		ИмяТипа = СтрЗаменить(_ТипОбъекта, ".", "Ссылка.");
		Попытка
			мОбъектСсылка = XMLЗначение(Тип(ИмяТипа), _UUID);
			вОбновитьДанныеОбъекта();
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры


&НаСервере
Функция вСоздатьНовыйОбъект(ОбъектМД)
	пИмя = ОбъектМД.Имя;
	
	Если Метаданные.Справочники.Содержит(ОбъектМД) или Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМД) Тогда
		ЭтоИерархияГруппИЭлементов = вЭтоИерархияГруппИЭлементов(ОбъектМД);
		
		Если ЭтоИерархияГруппИЭлементов Тогда
			Массив = РеквизитыОбъекта.НайтиСтроки(новый Структура("Имя", "ЭтоГруппа"));
			пЭтоГруппа = (Массив.Количество() = 1 и Массив[0].ЭтоГруппа = истина);
		Иначе
			пЭтоГруппа = ложь;
		КонецЕсли;
		
		Если Метаданные.Справочники.Содержит(ОбъектМД) Тогда
			Менеджер = Справочники;
		Иначе
			Менеджер = ПланыВидовХарактеристик;
		КонецЕсли;
		
		НовыйОбъект = ?(пЭтоГруппа, Менеджер[пИмя].СоздатьГруппу(), Менеджер[пИмя].СоздатьЭлемент());
		
	ИначеЕсли Метаданные.ПланыОбмена.Содержит(ОбъектМД) Тогда
		НовыйОбъект = ПланыОбмена[пИмя].СоздатьУзел();
		
	ИначеЕсли Метаданные.Документы.Содержит(ОбъектМД) Тогда
		НовыйОбъект = Документы[пИмя].СоздатьДокумент();
		
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(ОбъектМД) Тогда
		НовыйОбъект = ПланыСчетов[пИмя].СоздатьСчет();
		
	ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(ОбъектМД) Тогда
		НовыйОбъект = ПланыВидовРасчета[пИмя].СоздатьВидРасчета();
		
	ИначеЕсли Метаданные.БизнесПроцессы.Содержит(ОбъектМД) Тогда
		НовыйОбъект = БизнесПроцессы[пИмя].СоздатьБизнесПроцесс();
		
	ИначеЕсли Метаданные.Задачи.Содержит(ОбъектМД) Тогда
		НовыйОбъект = Задачи[пИмя].СоздатьЗадачу();
		
	Иначе
		НовыйОбъект = Неопределено;
	КонецЕсли;
	
	Возврат НовыйОбъект;
КонецФункции

&НаСервереБезКонтекста
Функция вУстановитьСсылкуНового(пОбъект, Знач пСтрокаUUID)
	Попытка
		пUUID = новый УникальныйИдентификатор(пСтрокаUUID);
	Исключение
		Сообщить("Неправильный формат UUID!");
		Возврат ложь;
	КонецПопытки;
	
	ОбъектМД = пОбъект.Метаданные();
	пИмя = ОбъектМД.Имя;
	
	Если Метаданные.Справочники.Содержит(ОбъектМД) Тогда
		пМенеджер = Справочники[пИмя];
		
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМД) Тогда
		пМенеджер = ПланыВидовХарактеристик[пИмя];
		
	ИначеЕсли Метаданные.ПланыОбмена.Содержит(ОбъектМД) Тогда
		пМенеджер = ПланыОбмена[пИмя];
		
	ИначеЕсли Метаданные.Документы.Содержит(ОбъектМД) Тогда
		пМенеджер = Документы[пИмя];
		
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(ОбъектМД) Тогда
		пМенеджер = ПланыСчетов[пИмя];
		
	ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(ОбъектМД) Тогда
		пМенеджер = ПланыВидовРасчета[пИмя];
		
	ИначеЕсли Метаданные.БизнесПроцессы.Содержит(ОбъектМД) Тогда
		пМенеджер = БизнесПроцессы[пИмя];
		
	ИначеЕсли Метаданные.Задачи.Содержит(ОбъектМД) Тогда
		пМенеджер = Задачи[пИмя];
		
	Иначе
		Сообщить(ОбъектМД.ПолноеИмя() + " - данный тип не обрабатывается!");
		Возврат ложь;
	КонецЕсли;
	
	Попытка
		пНоваяСсылка = пМенеджер.ПолучитьСсылку(пUUID);
		пОбъект.УстановитьСсылкуНового(пНоваяСсылка);
	Исключение
		Сообщить("Не удалось установить ссылку для нового объекта!");
		Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат ложь;
	КонецПопытки;
	
	Возврат истина;
КонецФункции

&НаСервереБезКонтекста
Функция вПолучитьСсылкуНаОбъект(Знач пСсылка)
	УстановитьПривилегированныйРежим(истина);
	
	пПолноеИмя = пСсылка.Метаданные().ПолноеИмя();
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", пСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	т.Ссылка КАК Ссылка
	|ИЗ
	|	" + пПолноеИмя + " КАК т
	|ГДЕ
	|	т.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
КонецФункции

&НаСервере
Функция вЗаписатьОбъект(Знач КакНовый = ложь, Знач пСтрокаUUID = Неопределено)
	Если КакНовый Тогда
		Если не вПроверитьСуществованиеОбъекта(мОбъектСсылка) Тогда
			ОбъектМД = мОбъектСсылка.Метаданные();
			ОбъектДляЗаписи = вСоздатьНовыйОбъект(ОбъектМД);
			Если ОбъектДляЗаписи = Неопределено Тогда
				Сообщить("Не удалось создать новый объект типа " + ОбъектМД.ПолноеИмя());
				Возврат ложь;
			КонецЕсли;
		Иначе
			ОбъектДляЗаписи = мОбъектСсылка.Скопировать();
		КонецЕсли;
		
		Если пСтрокаUUID <> Неопределено Тогда
			Если не вУстановитьСсылкуНового(ОбъектДляЗаписи, пСтрокаUUID) Тогда
				Возврат ложь;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ОбъектДляЗаписи = мОбъектСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	Если ОбъектДляЗаписи = Неопределено Тогда
		Сообщить("Не удалось получить объект для записи (битая ссылка)!");
		Возврат ложь;
	КонецЕсли;
	
	Если _ЗаписьВРежимеЗагрузки Тогда
		ОбъектДляЗаписи.ОбменДанными.Загрузка = истина;
	КонецЕсли;
	
	Если _ИспользоватьДополнительныеСвойстваПриЗаписи и _ДополнительныеСвойства.Количество() <> 0 Тогда
		Попытка
			Для каждого Стр из _ДополнительныеСвойства Цикл
				ОбъектДляЗаписи.ДополнительныеСвойства.Вставить(Стр.Ключ, Стр.Значение);
			КонецЦикла;
		Исключение
			Сообщить("Ошибка при установке ДополнительныхСвойств: неправильное значение ключа """ + Стр.Ключ + """");
			Возврат ложь;
		КонецПопытки;
	КонецЕсли;
	
	Струк = новый Структура("ЭтоГруппа");
	
	Попытка
		ОбъектМД = ОбъектДляЗаписи.Метаданные();
		ЭтоИерархияГруппИЭлементов = вЭтоИерархияГруппИЭлементов(ОбъектМД);
		ЭтоГруппа = ?(ЭтоИерархияГруппИЭлементов, ОбъектДляЗаписи.ЭтоГруппа, ложь);
		
		Для каждого Стр из РеквизитыОбъекта Цикл
			Если не Струк.Свойство(Стр.Имя) и Стр.Категория <> -1 Тогда
				Если ЭтоИерархияГруппИЭлементов Тогда
					Если (ЭтоГруппа и Стр.ДляГруппыИлиЭлемента = 1) или (не ЭтоГруппа и Стр.ДляГруппыИлиЭлемента = -1) Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				Если ОбъектДляЗаписи[Стр.Имя] <> Стр.Значение Тогда
					ОбъектДляЗаписи[Стр.Имя] = Стр.Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// специализированные табличные части 1С
		вЗаписатьСпециализированныеТабличныеЧасти(ОбъектМД, ОбъектДляЗаписи);
		
		Для каждого ЭлемТЧ из ОбъектМД.ТабличныеЧасти Цикл
			Если ЭтоИерархияГруппИЭлементов Тогда
				Если (ЭтоГруппа и ЭлемТЧ.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента) Тогда
					Продолжить;
				КонецЕсли;
				Если (не ЭтоГруппа и ЭлемТЧ.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			ТабЧасть = ОбъектДляЗаписи[ЭлемТЧ.Имя];
			ТабЧасть.Очистить();
			ИмяТаб = _ПрефиксДляНовыхЭлементов + ЭлемТЧ.Имя;
			ТабРезультат = РеквизитФормыВЗначение(ИмяТаб);
			ТабЧасть.Загрузить(ТабРезультат);
		КонецЦикла;
		
		Если _ИспользоватьПроцедуруПередЗаписью и не ПустаяСтрока(_ПроцедураПередЗаписью) Тогда
			Если не вВыполнитьПроцедуруПередЗаписью(ОбъектДляЗаписи, _ПроцедураПередЗаписью) Тогда
				Возврат ложь;
			КонецЕсли;
		КонецЕсли;
		
		ОбъектДляЗаписи.Записать();
		мОбъектСсылка = ОбъектДляЗаписи.Ссылка;
		вОбновитьДанныеОбъекта();
		Возврат истина;
	Исключение
		Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат ложь;
	КонецПопытки;
КонецФункции

&НаСервереБезКонтекста
Функция вПроверитьСуществованиеОбъекта(Знач пСсылка)
	Если пСсылка = Неопределено или не ЗначениеЗаполнено(пСсылка) Тогда
		Возврат ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(истина);
	
	пПолноеИмя = пСсылка.Метаданные().ПолноеИмя();
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", пСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	т.Ссылка КАК Ссылка
	|ИЗ
	|	" + пПолноеИмя + " КАК т
	|ГДЕ
	|	т.Ссылка = &Ссылка";
	
	Возврат не Запрос.Выполнить().Пустой();
КонецФункции

&НаСервереБезКонтекста
Функция вУдалитьОбъектНаСервере(Знач Ссылка, Знач ЗаписьВРежимеЗагрузки)
	Попытка
		пОбъект = Ссылка.ПолучитьОбъект();
		Если пОбъект = Неопределено Тогда
			Возврат ложь;
		КонецЕсли;
		
		Если ЗаписьВРежимеЗагрузки Тогда
			пОбъект.ОбменДанными.Загрузка = истина;
		КонецЕсли;
		
		пОбъект.Удалить();
		Возврат истина;
	Исключение
		Сообщить("Ошибка при удалении объекта:" + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат ложь;
	КонецПопытки;
КонецФункции

&НаСервереБезКонтекста
Функция вВыполнитьПроцедуруПередЗаписью(Знач пОбъект, Знач ТекстПроцедуры)
	Попытка
		Выполнить(ТекстПроцедуры);
	Исключение
		Сообщить("Ошибка при выполнении процедуры ПередЗаписью:
		|" + КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат ложь;
	КонецПопытки;
	
	Возврат истина;
КонецФункции

&НаСервере
Процедура вОбновитьНаборЗаписей()
	_НаборЗаписей.Очистить();
	
	НадоИзменитьРеквизиты = (_ИмяНабораЗаписей <> _ИмяНабораЗаписейПредыдущий);
	
	пИмяКомандыПересчета = "__НаборЗаписей__ПересчитатьИтогиПоКолонкам";
	Если НадоИзменитьРеквизиты Тогда
		пКомандаЭФ = Элементы.Найти(пИмяКомандыПересчета);
		Если пКомандаЭФ <> Неопределено Тогда
			Элементы.Удалить(пКомандаЭФ);
		КонецЕсли;
	КонецЕсли;
	
	МассивКСозданию = новый Массив;
	МассивКУдалению = новый Массив;
	
	Если НадоИзменитьРеквизиты Тогда
		ТабРезультат = РеквизитФормыВЗначение("_НаборЗаписей");
		Для каждого Колонка из ТабРезультат.Колонки Цикл
			МассивКУдалению.Добавить("_НаборЗаписей." + Колонка.Имя);
			Элем = Элементы.Найти("_НаборЗаписей_" + Колонка.Имя);
			Если Элем <> Неопределено Тогда
				Элементы.Удалить(Элем);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если не ПустаяСтрока(_ИмяНабораЗаписей) Тогда
		Менеджер = вСоздатьМенеджерНабораЗаписей(_ИмяНабораЗаписей);
		Если Менеджер = Неопределено Тогда
			Если НадоИзменитьРеквизиты Тогда
				ИзменитьРеквизиты(МассивКСозданию, МассивКУдалению);
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
		Набор = Менеджер.СоздатьНаборЗаписей();
		Набор.Отбор.Регистратор.Установить(мОбъектСсылка);
		Набор.Прочитать();
		
		ТабРезультат = Набор.Выгрузить();
		
		Попытка
			Если НадоИзменитьРеквизиты Тогда
				ТипХЗ = Тип("ХранилищеЗначения");
				ТипТТ = Тип("Тип");
				ТипМВ = Тип("МоментВремени");
				ТипUUID = Тип("УникальныйИдентификатор");
				
				СтрукСпецКолонки = новый Структура("Регистратор, МоментВремени");
				
				Для каждого Колонка из ТабРезультат.Колонки Цикл
					//Если СтрукСпецКолонки.Свойство(Колонка.Имя) Тогда
					//	Продолжить;
					//КонецЕсли;
					
					Если Колонка.ТипЗначения.СодержитТип(ТипХЗ) Тогда
						ТипЗначенияРеквизита = новый ОписаниеТипов;
					ИначеЕсли Колонка.ТипЗначения.СодержитТип(ТипТТ) Тогда
						ТипЗначенияРеквизита = новый ОписаниеТипов;
					ИначеЕсли Колонка.ТипЗначения.СодержитТип(ТипМВ) Тогда
						ТипЗначенияРеквизита = новый ОписаниеТипов;
					ИначеЕсли Колонка.ТипЗначения.СодержитТип(ТипUUID) Тогда
						ТипЗначенияРеквизита = вОписаниеТиповДляUUID(Колонка.ТипЗначения);
					Иначе
						ТипЗначенияРеквизита = Колонка.ТипЗначения;
					КонецЕсли;
					МассивКСозданию.Добавить(новый РеквизитФормы(Колонка.Имя, ТипЗначенияРеквизита, "_НаборЗаписей", Колонка.Заголовок, ложь));
				КонецЦикла;
				
				ИзменитьРеквизиты(МассивКСозданию, МассивКУдалению);
			КонецЕсли;
			
			ЗначениеВРеквизитФормы(ТабРезультат, "_НаборЗаписей");
			
			Если НадоИзменитьРеквизиты Тогда
				
				Для каждого Колонка из ТабРезультат.Колонки Цикл
					Если СтрукСпецКолонки.Свойство(Колонка.Имя) Тогда
						Продолжить;
					КонецЕсли;
					
					Элем = ЭтаФорма.Элементы.Добавить("_НаборЗаписей_" + Колонка.Имя, Тип("ПолеФормы"), ЭтаФорма.Элементы._НаборЗаписей);
					Элем.ПутьКДанным="_НаборЗаписей."+Колонка.Имя;
					Элем.Вид=ВидПоляФормы.ПолеВвода;
					Элем.ДоступныеТипы=Колонка.ТипЗначения;
					Элем.КнопкаОчистки = истина;
					
					Если Колонка.ТипЗначения.СодержитТип(ТипХЗ) Тогда // версия 033
						Элем.ТолькоПросмотр = истина;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			пТипЧисло = Тип("Число");
			пЕстьЧисловыеКолонки = ложь;
			
			Если _ПоказыватьИтогиПоЧисловымКолонкам Тогда
				Для каждого пКолонка из ТабРезультат.Колонки Цикл
					Если пКолонка.Имя <> "НомерСтроки" и пКолонка.ТипЗначения.СодержитТип(пТипЧисло) Тогда
						пЕстьЧисловыеКолонки = истина;
						ЭФ = Элементы.Найти("_НаборЗаписей_" + пКолонка.Имя);
						Если ЭФ <> Неопределено Тогда
							Если НадоИзменитьРеквизиты Тогда
								ЭФ.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Право;
								ЭФ.ЦветТекстаПодвала = ЦветаСтиля.ЦветФонаВыделенияПоля;
								Если _ИспользоватьЖирныйШрифтДляИтогов Тогда
									ЭФ.ШрифтПодвала = новый Шрифт(ЭФ.Шрифт,,,истина);
								КонецЕсли;
							КонецЕсли;
							ЭФ.ТекстПодвала = Строка(ТабРезультат.Итог(пКолонка.Имя));
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				пКомандаЭФ = Элементы.Найти(пИмяКомандыПересчета);
				Если пЕстьЧисловыеКолонки Тогда
					Если пКомандаЭФ = Неопределено Тогда
						ЭФ = ЭтаФорма.Элементы.Добавить(пИмяКомандыПересчета, Тип("КнопкаФормы"), Элементы._НаборЗаписей.КоманднаяПанель);
						ЭФ.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
						ЭФ.ИмяКоманды = "_ПересчитатьИтогиПоКолонкам";
					КонецЕсли;
				ИначеЕсли пКомандаЭФ <> Неопределено Тогда
					Элементы.Удалить(пКомандаЭФ);
				КонецЕсли;
			КонецЕсли;
			
			Элементы._НаборЗаписей.Подвал = _ПоказыватьИтогиПоЧисловымКолонкам и пЕстьЧисловыеКолонки;
			
		Исключение
			Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	ИначеЕсли НадоИзменитьРеквизиты Тогда
		ИзменитьРеквизиты(МассивКСозданию, МассивКУдалению);
	КонецЕсли;
	
	_ИмяНабораЗаписейПредыдущий = _ИмяНабораЗаписей;
КонецПроцедуры

&НаСервере
Процедура вЗаписатьНаборЗаписей()
	Если не ПустаяСтрока(_ИмяНабораЗаписей) и ЗначениеЗаполнено(мОбъектСсылка) Тогда
		Менеджер = вСоздатьМенеджерНабораЗаписей(_ИмяНабораЗаписей);
		Если Менеджер <> Неопределено Тогда
			Набор = Менеджер.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(мОбъектСсылка);
			
			Если _ЗаписьВРежимеЗагрузки Тогда
				Набор.ОбменДанными.Загрузка = истина;
			КонецЕсли;
			
			Попытка
				ТабРезультат = РеквизитФормыВЗначение("_НаборЗаписей");
				ТабРезультат.ЗаполнитьЗначения(мОбъектСсылка, "Регистратор");
				Набор.Загрузить(ТабРезультат);
				
				Набор.Записать(истина);
				
				вОбновитьНаборЗаписей();
			Исключение
				Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция вСоздатьМенеджерНабораЗаписей(Знач пИмяНабораЗаписей)
	Поз = СтрНайти(пИмяНабораЗаписей, ".");
	
	пВидРегистра = Лев (пИмяНабораЗаписей, Поз-1);
	пИмяРегистра = Сред(пИмяНабораЗаписей, Поз+1);
	
	Менеджер = Неопределено;
	
	Если пВидРегистра = "РегистрСведений" Тогда
		Менеджер = РегистрыСведений[пИмяРегистра];
	ИначеЕсли пВидРегистра = "РегистрНакопления" Тогда
		Менеджер = РегистрыНакопления[пИмяРегистра];
	ИначеЕсли пВидРегистра = "РегистрРасчета" Тогда
		Менеджер = РегистрыРасчета[пИмяРегистра];
	ИначеЕсли пВидРегистра = "РегистрБухгалтерии" Тогда
		Менеджер = РегистрыБухгалтерии[пИмяРегистра];
	КонецЕсли;
	
	Возврат Менеджер;
КонецФункции


&НаСервереБезКонтекста
Функция вОписаниеТиповДляUUID(пОписаниеТипов)
	Если пОписаниеТипов.Типы().Количество() = 1 Тогда
		пНовоеОписаниеТипов = новый ОписаниеТипов(пОписаниеТипов, "Строка");
	Иначе
		пНовоеОписаниеТипов = пОписаниеТипов;
	КонецЕсли;
	
	Возврат пНовоеОписаниеТипов;
КонецФункции

&НаСервере
Процедура вОчиститьДанныеОбъекта()
	РеквизитыОбъекта.Очистить();
КонецПроцедуры

&НаСервере
Процедура вЗаполнитьДанныеОбъекта(НадоСоздаватьРеквизиты)
	Перем НС;
	
	СтрукТипы = вСформироватьСтруктуруТипов();
	пТипХЗ = Тип("ХранилищеЗначения");
	пТипЧисло = Тип("Число");
	
	Если НадоСоздаватьРеквизиты Тогда
		МассивКСозданию = новый Массив;
		МассивКУдалению = новый Массив;
		
		// специализированные табличные части 1С
		СтрукСпецДанные = новый Структура(вПереченьСпециализированныхТабличныхЧастей("ПланСчетов")
		+ ", " + вПереченьСпециализированныхТабличныхЧастей("ПланВидовРасчета")
		);
		
		Если мОбъектСсылкаПредыдущий <> Неопределено Тогда
			ОбъектМД = мОбъектСсылкаПредыдущий.Метаданные();
			Для каждого ЭлемТЧ из ОбъектМД.ТабличныеЧасти Цикл
				ИмяТаб = _ПрефиксДляНовыхЭлементов + ЭлемТЧ.Имя;
				МассивКУдалению.Добавить(ИмяТаб);
			КонецЦикла;
			
			// специализированные табличные части 1С
			Для каждого Элем из СтрукСпецДанные Цикл
				ИмяТаб = _ПрефиксДляНовыхЭлементов + Элем.Ключ;
				Если вПроверитьНаличиеРеквизитаФормы(ИмяТаб) Тогда
					МассивКУдалению.Добавить(ИмяТаб);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		
		_ИмяНабораЗаписей = "";
		ВидимостьРазделаДвижения = ложь;
		Если не ПустаяСтрока(_ИмяНабораЗаписейПредыдущий) Тогда
			вОбновитьНаборЗаписей();
		КонецЕсли;
		
		Если мОбъектСсылка <> Неопределено Тогда
			ОбъектМД = мОбъектСсылка.Метаданные();
			
			Если Метаданные.Документы.Содержит(ОбъектМД) Тогда
				Если ОбъектМД.Движения.Количество() <> 0 Тогда
					ВидимостьРазделаДвижения = истина;
					_ПроведениеРазрешено = (ОбъектМД.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить);
					
					Список = Элементы._ИмяНабораЗаписей.СписокВыбора;
					Список.Очистить();
					Для каждого ОбъектРегистрМД из ОбъектМД.Движения Цикл
						Список.Добавить(ОбъектРегистрМД.ПолноеИмя(), ОбъектРегистрМД.Представление());
					КонецЦикла;
					
					Список.СортироватьПоЗначению();
				КонецЕсли;
			КонецЕсли;
			
			// специализированные табличные части 1С
			вСоздатьСпециализированныеТабличныеЧасти(ОбъектМД, МассивКСозданию);
			
			Для каждого ЭлемТЧ из ОбъектМД.ТабличныеЧасти Цикл
				ИмяТаб = _ПрефиксДляНовыхЭлементов + ЭлемТЧ.Имя;
				МассивКСозданию.Добавить(новый РеквизитФормы(ИмяТаб, новый ОписаниеТипов("ТаблицаЗначений"), , ЭлемТЧ.Имя));
				Для каждого Элем из ЭлемТЧ.Реквизиты Цикл
					Если Элем.Тип.СодержитТип(пТипХЗ) Тогда
						МассивКСозданию.Добавить(новый РеквизитФормы(Элем.Имя, новый ОписаниеТипов(), ИмяТаб, Элем.Имя));
					ИначеЕсли Элем.Тип.СодержитТип(СтрукТипы.мТипУникальныйИдентификатор) Тогда
						МассивКСозданию.Добавить(новый РеквизитФормы(Элем.Имя, вОписаниеТиповДляUUID(Элем.Тип), ИмяТаб, Элем.Имя));
					Иначе
						МассивКСозданию.Добавить(новый РеквизитФормы(Элем.Имя, Элем.Тип, ИмяТаб, Элем.Имя));
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		Элементы.СтрДвиженияДокумента.Видимость = ВидимостьРазделаДвижения;
		
		Если МассивКСозданию.Количество() <> 0 или МассивКУдалению.Количество() <> 0 Тогда
			ИзменитьРеквизиты(МассивКСозданию, МассивКУдалению);
		КонецЕсли;
		
		Если МассивКУдалению.Количество() <> 0 Тогда
			ОбъектМД = мОбъектСсылкаПредыдущий.Метаданные();
			
			// специализированные табличные части 1С
			Для каждого Элем из СтрукСпецДанные Цикл
				ИмяТаб = _ПрефиксДляНовыхЭлементов + Элем.Ключ;
				ЭФ = Элементы.Найти("Стр" + ИмяТаб);
				Если ЭФ <> Неопределено Тогда
					Элементы.Удалить(ЭФ);
				КонецЕсли;
			КонецЦикла;
			
			Для каждого ЭлемТЧ из ОбъектМД.ТабличныеЧасти Цикл
				ИмяТаб = _ПрефиксДляНовыхЭлементов + ЭлемТЧ.Имя;
				Элементы.Удалить(Элементы.Найти("Стр" + ИмяТаб));
			КонецЦикла;
		КонецЕсли;
		
		Если МассивКСозданию.Количество() <> 0 Тогда
			ОбъектМД = мОбъектСсылка.Метаданные();
			
			// специализированные табличные части 1С
			вСоздатьСпециализированныеТабличныеЧасти_Элементы(ОбъектМД);
			
			Для каждого ЭлемТЧ из ОбъектМД.ТабличныеЧасти Цикл
				ИмяТаб = _ПрефиксДляНовыхЭлементов + ЭлемТЧ.Имя;
				НоваяСтраница = Элементы.Добавить("Стр" + ИмяТаб, Тип("ГруппаФормы"), Элементы.ГруппаСтраницы);
				НоваяСтраница.Вид = ВидГруппыФормы.Страница;
				НоваяСтраница.Заголовок = ЭлемТЧ.Имя;
				НоваяСтраница.Подсказка = ЭлемТЧ.Представление();
				
				ШаблонОформленияЭФ = Элементы.ДекорацияРеквизитыОбъекта;
				ЭФ = Элементы.Добавить("Надпись_" + ИмяТаб, Тип("ДекорацияФормы"), НоваяСтраница);
				ЭФ.Вид = ВидДекорацииФормы.Надпись;
				ЭФ.ЦветТекста = ШаблонОформленияЭФ.ЦветТекста;
				ЭФ.Шрифт = ШаблонОформленияЭФ.Шрифт;
				ЭФ.АвтоМаксимальнаяШирина = ложь;
				ЭФ.РастягиватьПоГоризонтали = истина;
				ЭФ.Заголовок = ЭлемТЧ.Имя + ": " + ЭлемТЧ.Представление();
				
				НоваяТаблица = Элементы.Добавить(ИмяТаб, Тип("ТаблицаФормы"), НоваяСтраница);
				НоваяТаблица.ПутьКДанным = ИмяТаб;
				
				Для каждого Элем из ЭлемТЧ.Реквизиты Цикл
					НоваяКолонка = Элементы.Добавить(ИмяТаб+Элем.Имя, Тип("ПолеФормы"), НоваяТаблица);
					НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода;
					НоваяКолонка.ПутьКДанным = ИмяТаб + "." + Элем.Имя;
					НоваяКолонка.КнопкаОчистки = истина;
					Если не Элем.Тип.СодержитТип(пТипХЗ) Тогда
						//Если не Элем.Тип.СодержитТип(СтрукТипы.мТипУникальныйИдентификатор) Тогда
						//	НоваяКолонка.ДоступныеТипы = Элем.Тип;
						//КонецЕсли;
						НоваяКолонка.ДоступныеТипы = Элем.Тип;
					Иначе
						НоваяКолонка.ТолькоПросмотр = истина;
					КонецЕсли;
				КонецЦикла;
				
				НоваяТаблица.УстановитьДействие("Выбор", "ТабличнаяЧастьВыбор");
				
				// контекстное меню
				ГруппаКнопок = Элементы.Добавить("Группа_" + ИмяТаб, Тип("ГруппаФормы"), НоваяТаблица.КонтекстноеМеню);
				ГруппаКнопок.Вид = ВидГруппыФормы.ГруппаКнопок;
				
				Кнопка = Элементы.Добавить("_ВставитьУникальныйИдентификатор_" + ИмяТаб, Тип("КнопкаФормы"), ГруппаКнопок);
				Кнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
				Кнопка.ИмяКоманды = "_ВставитьУникальныйИдентификатор";
				
				Кнопка = Элементы.Добавить("ОткрытьОбъект_" + ИмяТаб, Тип("КнопкаФормы"), ГруппаКнопок);
				Кнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
				Кнопка.ИмяКоманды = "ОткрытьОбъект";
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если мОбъектСсылка <> Неопределено Тогда
		ПолноеИмя = мОбъектСсылка.Метаданные().ПолноеИмя();
		ВидОбъекта = Лев(ПолноеИмя, Найти(ПолноеИмя, ".")-1);
		_ТипОбъекта = ПолноеИмя;
		
		_UUID = мОбъектСсылка.УникальныйИдентификатор();
		_URL  = вПолучитьНавигационнуюСсылку(мОбъектСсылка);
		
		ОбъектМД = Метаданные.НайтиПоПолномуИмени(ПолноеИмя);
		
		Если ОбъектМД <> Неопределено Тогда
			
			ЭтоИерархияГруппИЭлементов = вЭтоИерархияГруппИЭлементов(ОбъектМД);
			
			вЗаполнитьСтандартныеРеквизиты(ОбъектМД);
			
			пТабОбщиеРеквизиты = вПолучитьДанныеПоОбщимРеквизитам(_АдресаХранилищ.ОбщиеРеквизиты, УникальныйИдентификатор).НайтиСтроки(новый Структура("Объект", ПолноеИмя));
			Для каждого Элем из пТабОбщиеРеквизиты Цикл
				НС = РеквизитыОбъекта.Добавить();
				НС.Имя = Элем.Имя;
				НС.Представление = Элем.Представление;
				НС.Категория = 1;
				НС.ТипЗначения = Элем.Тип;
				НС.ТипСтрокой = вОписаниеТиповВСтроку(Элем.Тип, СтрукТипы);
				НС.Значение = мОбъектСсылка[Элем.Имя];
			КонецЦикла;
			
			Для каждого Элем из ОбъектМД.Реквизиты Цикл
				НС = РеквизитыОбъекта.Добавить();
				НС.Имя = Элем.Имя;
				НС.Представление = Элем.Представление();
				НС.Категория = 1;
				НС.ТипЗначения = Элем.Тип;
				НС.ТипСтрокой = вОписаниеТиповВСтроку(Элем.Тип, СтрукТипы);
				НС.Значение = мОбъектСсылка[Элем.Имя];
				
				Если ЭтоИерархияГруппИЭлементов Тогда
					Если Элем.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы Тогда
						НС.ДляГруппыИлиЭлемента = -1;
					ИначеЕсли Элем.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента Тогда
						НС.ДляГруппыИлиЭлемента = 1;
					Иначе
						НС.ДляГруппыИлиЭлемента = 0;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ВидОбъекта = "ПланСчетов" Тогда
				Для каждого Элем из ОбъектМД.ПризнакиУчета Цикл
					НС = РеквизитыОбъекта.Добавить();
					НС.Имя = Элем.Имя;
					НС.Представление = Элем.Представление();
					НС.Категория = 1;
					НС.ТипЗначения = Элем.Тип;
					НС.ТипСтрокой = вОписаниеТиповВСтроку(Элем.Тип, СтрукТипы);
					НС.Значение = мОбъектСсылка[Элем.Имя];
				КонецЦикла;
			КонецЕсли;
			
			Если ВидОбъекта = "Задача" Тогда
				Для каждого Элем из ОбъектМД.РеквизитыАдресации Цикл
					НС = РеквизитыОбъекта.Добавить();
					НС.Имя = Элем.Имя;
					НС.Представление = Элем.Представление();
					НС.Категория = 1;
					НС.ТипЗначения = Элем.Тип;
					НС.ТипСтрокой = вОписаниеТиповВСтроку(Элем.Тип, СтрукТипы);
					НС.Значение = мОбъектСсылка[Элем.Имя];
				КонецЦикла;
			КонецЕсли;
			
			РеквизитыОбъекта.Сортировать("Категория, Имя");
			
			// специализированные табличные части 1С
			вЗаполнитьСпециализированныеТабличныеЧасти(ОбъектМД);
			
			Для каждого ЭлемТЧ из ОбъектМД.ТабличныеЧасти Цикл
				ИмяТаб = _ПрефиксДляНовыхЭлементов + ЭлемТЧ.Имя;
				ТабРезультат = мОбъектСсылка[ЭлемТЧ.Имя].Выгрузить();
				ЗначениеВРеквизитФормы(ТабРезультат, ИмяТаб);
				
				Если _ПоказыватьИтогиПоЧисловымКолонкам Тогда
					Элементы[ИмяТаб].Подвал = истина;
					пЕстьЧисловыеКолонки = ложь;
					
					Для каждого пКолонка из ТабРезультат.Колонки Цикл
						Если пКолонка.ТипЗначения.СодержитТип(пТипЧисло) Тогда
							пЕстьЧисловыеКолонки = истина;
							ЭФ = Элементы.Найти(ИмяТаб + пКолонка.Имя);
							Если ЭФ <> Неопределено Тогда
								Если НадоСоздаватьРеквизиты Тогда
									ЭФ.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Право;
									ЭФ.ЦветТекстаПодвала = ЦветаСтиля.ЦветФонаВыделенияПоля;
									Если _ИспользоватьЖирныйШрифтДляИтогов Тогда
										ЭФ.ШрифтПодвала = новый Шрифт(ЭФ.Шрифт,,,истина);
									КонецЕсли;
								КонецЕсли;
								ЭФ.ТекстПодвала = Строка(ТабРезультат.Итог(пКолонка.Имя));
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					Если НадоСоздаватьРеквизиты и пЕстьЧисловыеКолонки Тогда
						ЭФ = ЭтаФорма.Элементы.Добавить("_" + ИмяТаб + "_ПересчитатьИтогиПоКолонкам", Тип("КнопкаФормы"), Элементы[ИмяТаб].КоманднаяПанель);
						ЭФ.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
						ЭФ.ИмяКоманды = "_ПересчитатьИтогиПоКолонкам";
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		_ТипОбъекта = "";
	КонецЕсли;
КонецПроцедуры


&НаСервереБезКонтекста
Функция вПолучитьДанныеПоОбщимРеквизитам(АдресХранилища, Знач УникальныйИдентификатор)
	Попытка
		ТабРезультат = ПолучитьИзВременногоХранилища(АдресХранилища);
	Исключение
		ТабРезультат = Неопределено;
	КонецПопытки;
	
	Если ТабРезультат = Неопределено Тогда
		АдресХранилища = "";
	КонецЕсли;
	
	Если ТабРезультат = -1 или ТабРезультат = Неопределено или ТабРезультат.Колонки.Количество() = 0 Тогда
		ТабРезультат = новый ТаблицаЗначений;
		ТабРезультат.Колонки.Добавить("Имя", новый ОписаниеТипов("Строка"));
		ТабРезультат.Колонки.Добавить("Представление", новый ОписаниеТипов("Строка"));
		ТабРезультат.Колонки.Добавить("Тип", новый ОписаниеТипов("ОписаниеТипов"));
		ТабРезультат.Колонки.Добавить("Объект", новый ОписаниеТипов("Строка"));
		
		Для каждого пРеквизитМД из Метаданные.ОбщиеРеквизиты Цикл
			Если пРеквизитМД.РазделениеДанных = Метаданные.СвойстваОбъектов.РазделениеДанныхОбщегоРеквизита.Разделять Тогда
				Продолжить;
			КонецЕсли;
			
			пАвтоИспользование = (пРеквизитМД.АвтоИспользование = Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита.Использовать);
			
			Для каждого пЭлем из пРеквизитМД.Состав Цикл
				Если пАвтоИспользование Тогда
					пНадоБрать = (пЭлем.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.НеИспользовать);
				Иначе
					пНадоБрать = (пЭлем.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать);
				КонецЕсли;
				
				Если пНадоБрать Тогда
					НС = ТабРезультат.Добавить();
					НС.Имя = пРеквизитМД.Имя;
					НС.Представление = пРеквизитМД.Представление();
					НС.Тип = пРеквизитМД.Тип;
					НС.Объект = пЭлем.Метаданные.ПолноеИмя();
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ТабРезультат.Индексы.Добавить("Объект");
		
		АдресХранилища = ПоместитьВоВременноеХранилище(ТабРезультат, ?(АдресХранилища = "", УникальныйИдентификатор, АдресХранилища));
	КонецЕсли;
	
	Возврат ТабРезультат;
КонецФункции

&НаСервереБезКонтекста
Функция вПереченьСпециализированныхТабличныхЧастей(ВидОбъекта)
	Если ВидОбъекта = "ПланСчетов" Тогда
		Возврат "ВидыСубконто";
	ИначеЕсли ВидОбъекта = "ПланВидовРасчета" Тогда
		Возврат "БазовыеВидыРасчета, ВедущиеВидыРасчета, ВытесняющиеВидыРасчета";
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция вПроверитьНаличиеРеквизитаОбъекта(Ссылка, ИмяРеквизита, ЗначениеДляОтсутствующего = -1)
	Струк = новый Структура(ИмяРеквизита, ЗначениеДляОтсутствующего);
	ЗаполнитьЗначенияСвойств(Струк, Ссылка);
	
	Возврат (Струк[ИмяРеквизита] <> ЗначениеДляОтсутствующего);
КонецФункции

&НаСервереБезКонтекста
Функция вСформироватьОтчетПоДвижениям(Знач ДокСсылка, Знач СписокРегистров, Знач пКонфигурацияДопускаетДопДвижения)
	пЧислоТаблицВЗапросе = 200;
	
	Если пКонфигурацияДопускаетДопДвижения Тогда
		пСтрук = вОпределитьДополнительныеРегистрыДокумента(ДокСсылка);
		Если пСтрук.ЕстьДанные Тогда
			Для каждого Элем из пСтрук.ДополнительныеРегистры Цикл
				СписокРегистров.Добавить("+" + Элем.Ключ, Элем.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", ДокСсылка);
	
	ТекстНачалаЗапроса = "ВЫБРАТЬ 0 КАК Инд, 100000000 КАК ПолеА ГДЕ ложь";
	
	пМассивЗапросов = новый Массив;
	пМассивЗапросов.Добавить(ТекстНачалаЗапроса);
	
	ТабРезультат = Неопределено;
	Инд = -1;
	Сч = 0;
	
	Для каждого Элем из СписокРегистров Цикл
		Инд = Инд + 1;
		Сч = Сч + 1;
		
		Если Сч > пЧислоТаблицВЗапросе Тогда
			Сч = 1;
			
			Запрос.Текст = СтрСоединить(пМассивЗапросов, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС);
			ТабДанные = Запрос.Выполнить().Выгрузить();
			
			Если ТабРезультат = Неопределено Тогда
				ТабРезультат = ТабДанные;
			Иначе
				Для каждого Стр из ТабДанные Цикл
					ЗаполнитьЗначенияСвойств(ТабРезультат.Добавить(), Стр);
				КонецЦикла;
			КонецЕсли;
			
			пМассивЗапросов.Очистить();
			пМассивЗапросов.Добавить(ТекстНачалаЗапроса);
		КонецЕсли;
		
		Если Лев(Элем.Значение,1) = "+" Тогда
			пМассивЗапросов.Добавить("ВЫБРАТЬ " + Инд + ", КОЛИЧЕСТВО(*) ИЗ " + Сред(Элем.Значение,2) + " КАК т ГДЕ т.ДокументРегистратор = &Регистратор ИМЕЮЩИЕ КОЛИЧЕСТВО(*) > 0");
		Иначе
			пМассивЗапросов.Добавить("ВЫБРАТЬ " + Инд + ", КОЛИЧЕСТВО(*) ИЗ " + Элем.Значение + " КАК т ГДЕ т.Регистратор = &Регистратор ИМЕЮЩИЕ КОЛИЧЕСТВО(*) > 0");
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = СтрСоединить(пМассивЗапросов, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС);
	ТабДанные = Запрос.Выполнить().Выгрузить();
	
	Если ТабРезультат = Неопределено Тогда
		ТабРезультат = ТабДанные;
	Иначе
		Для каждого Стр из ТабДанные Цикл
			ЗаполнитьЗначенияСвойств(ТабРезультат.Добавить(), Стр);
		КонецЦикла;
	КонецЕсли;
	
	Линия1 = новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
	
	ТДок = новый ТабличныйДокумент;
	
	ТДок.Область(,1,,1).ШиринаКолонки = 2;
	ТДок.Область(,2,,2).ШиринаКолонки = 50;
	ТДок.Область(,3,,3).ШиринаКолонки = 50;
	ТДок.Область(,4,,4).ШиринаКолонки = 12;
	
	ТДок.Область(2, 2).Текст = Строка(ДокСсылка);
	ТДок.Область(2,2,2,3).Обвести(,,,Линия1);
	
	ТДок.Область(4, 2).Текст = "Имя регистра";
	ТДок.Область(4, 3).Текст = "Представление";
	ТДок.Область(4, 4).Текст = "Число записей";
	ТДок.Область(4,2,4,4).ЦветФона = WebЦвета.СветлоЖелтыйЗолотистый;
	ТДок.Область(4,2,4,4).Обвести(Линия1, Линия1, Линия1, Линия1);
	
	НПП = 4;
	Для каждого Стр из ТабРезультат Цикл
		НПП = НПП + 1;
		пИмяРегистра = СписокРегистров[Стр.Инд].Значение;
		пЭтоДопДвижение = пКонфигурацияДопускаетДопДвижения и (Лев(пИмяРегистра,1) = "+");
		
		ТДок.Область(НПП, 2).Текст = ?(пЭтоДопДвижение, Сред(пИмяРегистра,2), пИмяРегистра);
		ТДок.Область(НПП, 3).Текст = СписокРегистров[Стр.Инд].Представление;
		ТДок.Область(НПП, 4).Текст = Стр.ПолеА;
		
		Если пЭтоДопДвижение Тогда
			ТДок.Область(НПП,2,НПП,4).ЦветТекста = WebЦвета.Зеленый;
		КонецЕсли;
	КонецЦикла;
	
	ТДок.Область(4,2,НПП,4).Обвести(Линия1, Линия1, Линия1, Линия1);
	
	Возврат ТДок;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция вПолучитьНавигационнуюСсылку(Ссылка)
	// на некотрых платформах возникает ошибка при получении НавСсылки определенных объектов (на пример, счета БУ)
	
	Попытка
		Возврат ПолучитьНавигационнуюСсылку(Ссылка);
	Исключение
		Возврат "";
	КонецПопытки;
КонецФункции

&НаСервере
Функция вПроверитьНаличиеРеквизитаФормы(ИмяРеквизита, ЗначениеДляОтсутствующего = -1)
	Струк = новый Структура(ИмяРеквизита, ЗначениеДляОтсутствующего);
	ЗаполнитьЗначенияСвойств(Струк, ЭтаФорма);
	
	Возврат (Струк[ИмяРеквизита] <> ЗначениеДляОтсутствующего);
КонецФункции

&НаСервере
Процедура вСоздатьСпециализированныеТабличныеЧасти(Знач ОбъектМД, Знач МассивКСозданию)
	ПолноеИмя = ОбъектМД.ПолноеИмя();
	ВидОбъекта = Лев(ПолноеИмя, Найти(ПолноеИмя, ".")-1);
	
	ПереченьТЧ = вПереченьСпециализированныхТабличныхЧастей(ВидОбъекта);
	Если не ПустаяСтрока(ПереченьТЧ) Тогда
		Струк = новый Структура(ПереченьТЧ);
		Для каждого Элем из Струк Цикл
			ИмяТЧ = Элем.Ключ;
			Если вПроверитьНаличиеРеквизитаОбъекта(мОбъектСсылка, ИмяТЧ) Тогда
				ТабРезультат = мОбъектСсылка[ИмяТЧ].Выгрузить();
				
				ИмяТаб = _ПрефиксДляНовыхЭлементов + ИмяТЧ;
				МассивКСозданию.Добавить(новый РеквизитФормы(ИмяТаб, новый ОписаниеТипов("ТаблицаЗначений"), , ИмяТЧ));
				Для каждого Элем из ТабРезультат.Колонки Цикл
					Если Элем.Имя <> "НомерСтроки" Тогда
						МассивКСозданию.Добавить(новый РеквизитФормы(Элем.Имя, Элем.ТипЗначения, ИмяТаб, Элем.Имя));
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура вСоздатьСпециализированныеТабличныеЧасти_Элементы(Знач ОбъектМД)
	ПолноеИмя = ОбъектМД.ПолноеИмя();
	ВидОбъекта = Лев(ПолноеИмя, Найти(ПолноеИмя, ".")-1);
	
	ПереченьТЧ = вПереченьСпециализированныхТабличныхЧастей(ВидОбъекта);
	Если не ПустаяСтрока(ПереченьТЧ) Тогда
		Струк = новый Структура(ПереченьТЧ);
		Для каждого Элем из Струк Цикл
			ИмяТЧ = Элем.Ключ;
			Если вПроверитьНаличиеРеквизитаОбъекта(мОбъектСсылка, ИмяТЧ) Тогда
				ТабРезультат = мОбъектСсылка[ИмяТЧ].Выгрузить();
				
				ИмяТаб = _ПрефиксДляНовыхЭлементов + ИмяТЧ;
				НоваяСтраница = Элементы.Добавить("Стр" + ИмяТаб, Тип("ГруппаФормы"), Элементы.ГруппаСтраницы);
				НоваяСтраница.Вид = ВидГруппыФормы.Страница;
				НоваяСтраница.Заголовок = ИмяТЧ;
				
				НоваяТаблица = Элементы.Добавить(ИмяТаб, Тип("ТаблицаФормы"), НоваяСтраница);
				НоваяТаблица.ПутьКДанным = ИмяТаб;
				
				Для каждого Элем из ТабРезультат.Колонки Цикл
					Если Элем.Имя <> "НомерСтроки" Тогда
						НоваяКолонка = Элементы.Добавить(ИмяТаб+Элем.Имя, Тип("ПолеФормы"), НоваяТаблица);
						НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода;
						НоваяКолонка.ПутьКДанным = ИмяТаб + "." + Элем.Имя;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура вЗаполнитьСпециализированныеТабличныеЧасти(Знач ОбъектМД)
	ПолноеИмя = ОбъектМД.ПолноеИмя();
	ВидОбъекта = Лев(ПолноеИмя, Найти(ПолноеИмя, ".")-1);
	
	ПереченьТЧ = вПереченьСпециализированныхТабличныхЧастей(ВидОбъекта);
	Если не ПустаяСтрока(ПереченьТЧ) Тогда
		Струк = новый Структура(ПереченьТЧ);
		Для каждого Элем из Струк Цикл
			ИмяТЧ = Элем.Ключ;
			ИмяТаб = _ПрефиксДляНовыхЭлементов + ИмяТЧ;
			
			Если вПроверитьНаличиеРеквизитаОбъекта(мОбъектСсылка, ИмяТЧ) Тогда
				ТабРезультат = мОбъектСсылка[ИмяТЧ].Выгрузить();
				ЗначениеВРеквизитФормы(ТабРезультат, ИмяТаб);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура вЗаписатьСпециализированныеТабличныеЧасти(ОбъектМД, ОбъектДляЗаписи)
	ПолноеИмя = ОбъектМД.ПолноеИмя();
	ВидОбъекта = Лев(ПолноеИмя, Найти(ПолноеИмя, ".")-1);
	
	ПереченьТЧ = вПереченьСпециализированныхТабличныхЧастей(ВидОбъекта);
	Если не ПустаяСтрока(ПереченьТЧ) Тогда
		Струк = новый Структура(ПереченьТЧ);
		Для каждого Элем из Струк Цикл
			ИмяТЧ = Элем.Ключ;
			ИмяТаб = _ПрефиксДляНовыхЭлементов + ИмяТЧ;
			
			Если вПроверитьНаличиеРеквизитаОбъекта(ОбъектДляЗаписи, ИмяТЧ) Тогда
				ТабЧасть = ОбъектДляЗаписи[ИмяТЧ];
				ТабЧасть.Очистить();
				
				ТабРезультат = РеквизитФормыВЗначение(ИмяТаб);
				ТабЧасть.Загрузить(ТабРезультат);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры


&НаСервереБезКонтекста
Функция вОписаниеТиповВСтроку(ОписаниеТипов, СтрукТипы)
	Если ОписаниеТипов = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Значение = "";
	Типы = ОписаниеТипов.Типы();
	Для каждого Элем из Типы Цикл
		ИмяТипа = вИмяТипаСтрокой(СтрукТипы, Элем, ОписаниеТипов);
		Если не ПустаяСтрока(ИмяТипа) Тогда
			Значение = Значение + "," + ИмяТипа;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Сред(Значение, 2);
КонецФункции

&НаСервереБезКонтекста
Функция вИмяТипаСтрокой(СтрукТипы, Тип, ОписаниеТипов)
	ИмяТипа = "";
	
	Если Тип = СтрукТипы.мТипЧисло Тогда
		ИмяТипа = "Число";
		Если ОписаниеТипов.КвалификаторыЧисла.Разрядность <> 0 Тогда
			ИмяТипа = ИмяТипа + "("
				+ ОписаниеТипов.КвалификаторыЧисла.Разрядность + "."
				+ ОписаниеТипов.КвалификаторыЧисла.РазрядностьДробнойЧасти + ")";
		КонецЕсли;
	ИначеЕсли Тип = СтрукТипы.мТипСтрока Тогда
		ИмяТипа = "Строка";
		Если ОписаниеТипов.КвалификаторыСтроки.Длина <> 0 Тогда
			ИмяТипа = ИмяТипа + "("
				+ ?(ОписаниеТипов.КвалификаторыСтроки.ДопустимаяДлина = ДопустимаяДлина.Переменная, "П", "Ф")
				+ ОписаниеТипов.КвалификаторыСтроки.Длина + ")";
		КонецЕсли;
	ИначеЕсли Тип = СтрукТипы.мТипДата Тогда
		ИмяТипа = ?(ОписаниеТипов.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Время, "Время",
			?(ОписаниеТипов.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Дата, "Дата", "ДатаВремя"));
	ИначеЕсли Тип = СтрукТипы.мТипБулево Тогда
		ИмяТипа = "Булево";
	ИначеЕсли Тип = СтрукТипы.мТипДвоичныеДанные Тогда
		ИмяТипа = "ДвоичныеДанные";
	ИначеЕсли Тип = СтрукТипы.мТипХранилищеЗначения Тогда
		ИмяТипа = "ХранилищеЗначения";
	ИначеЕсли Тип = СтрукТипы.мТипУникальныйИдентификатор Тогда
		ИмяТипа = "УникальныйИдентификатор";
	Иначе
		ОбъектМД = Метаданные.НайтиПоТипу(Тип);
		Если ОбъектМД <> Неопределено Тогда
			ИмяТипа = ОбъектМД.ПолноеИмя();
		Иначе
			ИмяТипа = Строка(Тип);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИмяТипа;
КонецФункции

&НаСервереБезКонтекста
Функция вСформироватьСтруктуруТипов()
	Результат = новый Структура;
	
	Результат.Вставить("мТипСтрока"					,Тип("Строка"));
	Результат.Вставить("мТипБулево"					,Тип("Булево"));
	Результат.Вставить("мТипЧисло"					,Тип("Число"));
	Результат.Вставить("мТипДата"					,Тип("Дата"));
	Результат.Вставить("мТипСтруктура"				,Тип("Структура"));
	Результат.Вставить("мТипХранилищеЗначения"		,Тип("ХранилищеЗначения"));
	Результат.Вставить("мТипДвоичныеДанные"			,Тип("ДвоичныеДанные"));
	Результат.Вставить("мТипДеревоЗначений"			,Тип("ДеревоЗначений"));
	Результат.Вставить("мТипОбъектМетаданных"		,Тип("ОбъектМетаданных"));
	Результат.Вставить("мТипУникальныйИдентификатор",Тип("УникальныйИдентификатор"));
	
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция вЭтоИерархияГруппИЭлементов(ОбъектМД)
	Струк = новый Структура("Иерархический, ВидИерархии");
	ЗаполнитьЗначенияСвойств(Струк, ОбъектМД);
	Возврат (Струк.Иерархический = истина и Струк.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов);
КонецФункции

&НаСервереБезКонтекста
Функция вОписаниеТиповСтрока(ДлинаСтроки, ПеременнаяДлина = истина)
	Возврат новый ОписаниеТипов("Строка",,,,новый КвалификаторыСтроки(ДлинаСтроки, ?(ПеременнаяДлина, ДопустимаяДлина.Переменная, ДопустимаяДлина.Фиксированная)));
КонецФункции

&НаСервереБезКонтекста
Функция вОписаниеТиповЧисло(ЧислоРазрядов, ЧислоРазрядовДробнойЧасти = 0)
	Возврат новый ОписаниеТипов("Число",,,новый КвалификаторыЧисла(ЧислоРазрядов, ЧислоРазрядовДробнойЧасти));
КонецФункции

&НаСервереБезКонтекста
Функция вОписаниеТиповКода(ТипКода, ДлинаКода, ДопустимаяДлинаКода)
	Возврат ?(Строка(ТипКода) = "Число", вОписаниеТиповЧисло(ДлинаКода), вОписаниеТиповСтрока(ДлинаКода, ?(Строка(ДопустимаяДлинаКода) = "Фиксированная", ложь, истина)));
КонецФункции

&НаСервереБезКонтекста
Функция вОписаниеТиповНомера(ТипНомера, ДлинаНомера)
	Возврат ?(Строка(ТипНомера) = "Число", вОписаниеТиповЧисло(ДлинаНомера), вОписаниеТиповСтрока(ДлинаНомера, ложь));
КонецФункции

&НаСервереБезКонтекста
Функция вОписаниеТиповВладельца(КоллекцияМД)
	МассивТипов = новый Массив;
	Для каждого Элем из КоллекцияМД Цикл
		ИмяТипа = Элем.ПолноеИмя();
		ИмяТипа = СтрЗаменить(ИмяТипа, ".", "Ссылка.");
		МассивТипов.Добавить(Тип(ИмяТипа));
	КонецЦикла;
	
	Возврат новый ОписаниеТипов(МассивТипов);
КонецФункции

&НаСервере
Процедура вЗаполнитьСтандартныеРеквизиты(ОбъектМД)
	Перем НС;
	
	ПереченьРеквизитов = "Код, Номер, Дата, Проведен, ПометкаУдаления, ЭтоГруппа, Наименование, Владелец, Родитель, БизнесПроцесс, Выполнена, Завершен, Стартован, НомерОтправленного, НомерПринятого, ЭтотУзел, ТипЗначения, Вид";
	ПереченьСвойств = "ТипКода, ТипНомера, ДлинаКода, ДопустимаяДлинаКода, ДлинаНомера, ДлинаНаименования, Иерархический, ВидИерархии, Владельцы";
	
	СтрукРеквизиты = новый Структура(ПереченьРеквизитов);
	СтрукСвойства = новый Структура(ПереченьСвойств);
	
	ЗаполнитьЗначенияСвойств(СтрукСвойства, ОбъектМД);
	ЗаполнитьЗначенияСвойств(СтрукРеквизиты, мОбъектСсылка);
	
	Если Метаданные.ПланыОбмена.Содержит(ОбъектМД) Тогда
		Если СтрукСвойства.ТипКода = Неопределено Тогда
			СтрукСвойства.ТипКода = "Строка";
		КонецЕсли;
	КонецЕсли;
	
	Если Метаданные.ПланыСчетов.Содержит(ОбъектМД) Тогда
		Если СтрукСвойства.ТипКода = Неопределено Тогда
			СтрукСвойства.ТипКода = "Строка";
		КонецЕсли;
	КонецЕсли;
	
	Если СтрукСвойства.ТипНомера <> Неопределено и ЗначениеЗаполнено(СтрукСвойства.ДлинаНомера) Тогда
		НС = РеквизитыОбъекта.Добавить();
		НС.Имя = "Номер";
		НС.Представление = НС.Имя;
		НС.Категория = 0;
		НС.ТипЗначения = вОписаниеТиповНомера(СтрукСвойства.ТипНомера, СтрукСвойства.ДлинаНомера);
		НС.Значение = СтрукРеквизиты.Номер;
	КонецЕсли;
	
	Если СтрукСвойства.ТипКода <> Неопределено и ЗначениеЗаполнено(СтрукСвойства.ДлинаКода) Тогда
		НС = РеквизитыОбъекта.Добавить();
		НС.Имя = "Код";
		НС.Представление = НС.Имя;
		НС.Категория = 0;
		НС.ТипЗначения = вОписаниеТиповКода(СтрукСвойства.ТипКода, СтрукСвойства.ДлинаКода, СтрукСвойства.ДопустимаяДлинаКода);
		НС.Значение = СтрукРеквизиты.Код;
	КонецЕсли;
	
	Если СтрукРеквизиты.Наименование <> Неопределено и ЗначениеЗаполнено(СтрукСвойства.ДлинаНаименования) Тогда
		НС = РеквизитыОбъекта.Добавить();
		НС.Имя = "Наименование";
		НС.Представление = НС.Имя;
		НС.Категория = 0;
		НС.ТипЗначения = вОписаниеТиповСтрока(СтрукСвойства.ДлинаНаименования);
		НС.Значение = СтрукРеквизиты.Наименование;
	КонецЕсли;
	
	Если СтрукРеквизиты.Дата <> Неопределено Тогда
		НС = РеквизитыОбъекта.Добавить();
		НС.Имя = "Дата";
		НС.Представление = НС.Имя;
		НС.Категория = 0;
		НС.ТипЗначения = новый ОписаниеТипов("Дата",,,,,новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
		НС.Значение = СтрукРеквизиты.Дата;
	КонецЕсли;
	
	Если СтрукСвойства.Иерархический = истина Тогда
		НС = РеквизитыОбъекта.Добавить();
		НС.Имя = "Родитель";
		НС.Представление = НС.Имя;
		НС.Категория = 0;
		НС.ТипЗначения = вСоздатьОписаниеТипов(ТипЗнч(мОбъектСсылка));
		НС.Значение = СтрукРеквизиты.Родитель;
	КонецЕсли;
	
	Если СтрукРеквизиты.ПометкаУдаления <> Неопределено Тогда
		НС = РеквизитыОбъекта.Добавить();
		НС.Имя = "ПометкаУдаления";
		НС.Представление = НС.Имя;
		НС.Категория = 0;
		НС.ТипЗначения = новый ОписаниеТипов("Булево");
		НС.Значение = СтрукРеквизиты.ПометкаУдаления;
	КонецЕсли;
	
	Если СтрукРеквизиты.ЭтоГруппа <> Неопределено и СтрукСвойства.Иерархический = истина и СтрукСвойства.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
		НС = РеквизитыОбъекта.Добавить();
		НС.Имя = "ЭтоГруппа";
		НС.Представление = НС.Имя;
		НС.Категория = 0;
		НС.ТипЗначения = новый ОписаниеТипов("Булево");
		НС.Значение = СтрукРеквизиты.ЭтоГруппа;
	КонецЕсли;
	
	Если СтрукСвойства.Владельцы <> Неопределено и СтрукСвойства.Владельцы.Количество() <> 0 Тогда
		НС = РеквизитыОбъекта.Добавить();
		НС.Имя = "Владелец";
		НС.Представление = НС.Имя;
		НС.Категория = 0;
		НС.ТипЗначения = вОписаниеТиповВладельца(СтрукСвойства.Владельцы);
		НС.Значение = СтрукРеквизиты.Владелец;
	КонецЕсли;
	
	Если Метаданные.Документы.Содержит(ОбъектМД) Тогда
		НС = РеквизитыОбъекта.Добавить();
		НС.Имя = "Проведен";
		НС.Представление = НС.Имя;
		НС.Категория = 0;
		НС.ТипЗначения = новый ОписаниеТипов("Булево");
		НС.Значение = СтрукРеквизиты.Проведен;
	КонецЕсли;
	
	Если Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМД) Тогда
		НС = РеквизитыОбъекта.Добавить();
		НС.Имя = "ТипЗначения";
		НС.Представление = НС.Имя;
		НС.Категория = 0;
		НС.ТипЗначения = ОбъектМД.Тип;
		НС.Значение = СтрукРеквизиты.ТипЗначения;
	КонецЕсли;
	
	Если Метаданные.ПланыСчетов.Содержит(ОбъектМД) Тогда
		НС = РеквизитыОбъекта.Добавить();
		НС.Имя = "Вид";
		НС.Представление = НС.Имя;
		НС.Категория = 0;
		НС.ТипЗначения = новый ОписаниеТипов("ВидСчета");
		НС.Значение = СтрукРеквизиты.Вид;
	КонецЕсли;
	
	Если Метаданные.Задачи.Содержит(ОбъектМД) Тогда
		НС = РеквизитыОбъекта.Добавить();
		НС.Имя = "БизнесПроцесс";
		НС.Представление = НС.Имя;
		НС.Категория = 0;
		НС.ТипЗначения = вСоздатьОписаниеТипов(ТипЗнч(СтрукРеквизиты.БизнесПроцесс));
		НС.Значение = СтрукРеквизиты.БизнесПроцесс;
		НС = РеквизитыОбъекта.Добавить();
		
		НС = РеквизитыОбъекта.Добавить();
		НС.Имя = "Выполнена";
		НС.Представление = НС.Имя;
		НС.Категория = 0;
		НС.ТипЗначения = новый ОписаниеТипов("Булево");
		НС.Значение = СтрукРеквизиты.Выполнена;
	КонецЕсли;
	
	Если Метаданные.БизнесПроцессы.Содержит(ОбъектМД) Тогда
		НС = РеквизитыОбъекта.Добавить();
		НС.Имя = "Стартован";
		НС.Представление = НС.Имя;
		НС.Категория = 0;
		НС.ТипЗначения = новый ОписаниеТипов("Булево");
		НС.Значение = СтрукРеквизиты.Стартован;
		
		НС = РеквизитыОбъекта.Добавить();
		НС.Имя = "Завершен";
		НС.Представление = НС.Имя;
		НС.Категория = 0;
		НС.ТипЗначения = новый ОписаниеТипов("Булево");
		НС.Значение = СтрукРеквизиты.Завершен;
	КонецЕсли;
	
	Если Метаданные.ПланыОбмена.Содержит(ОбъектМД) Тогда
		НС.Имя = "НомерОтправленного";
		НС.Представление = НС.Имя;
		НС.Категория = 0;
		НС.ТипЗначения = новый ОписаниеТипов("Число");
		НС.Значение = СтрукРеквизиты.НомерОтправленного;
		
		НС = РеквизитыОбъекта.Добавить();
		НС.Имя = "НомерПринятого";
		НС.Представление = НС.Имя;
		НС.Категория = 0;
		НС.ТипЗначения = новый ОписаниеТипов("Число");
		НС.Значение = СтрукРеквизиты.НомерПринятого;
		
		НС = РеквизитыОбъекта.Добавить();
		НС.Имя = "ЭтотУзел";
		НС.Представление = НС.Имя;
		НС.Категория = 0;
		НС.ТипЗначения = новый ОписаниеТипов("Булево");
		НС.Значение = СтрукРеквизиты.ЭтотУзел;
	КонецЕсли;
КонецПроцедуры


&НаСервере
Процедура вОбновитьДанныеОбъекта()
	Если мОбъектСсылка <> Неопределено Тогда
		Элементы.мОбъектСсылка.ОграничениеТипа = вСоздатьОписаниеТипов(ТипЗнч(мОбъектСсылка));
	КонецЕсли;
	
	НадоСоздаватьРеквизиты = (ТипЗнч(мОбъектСсылка) <> ТипЗнч(мОбъектСсылкаПредыдущий));
	
	Если НадоСоздаватьРеквизиты Тогда
		Элементы.ДекорацияСсылкиНаОбъект.Заголовок = "Ссылки на объекты конфигурации";
		_ЗависимыеОбъекты.ПолучитьЭлементы().Очистить();
		_ГдеНайдено = "";
	КонецЕсли;
	
	Если _КонфигурацияДопускаетДопДвижения и НадоСоздаватьРеквизиты и ЗначениеЗаполнено(мОбъектСсылка) Тогда
		пСтрук = вОпределитьДополнительныеРегистрыДокумента(мОбъектСсылка);
		Элементы._ОткрытьРедакторДвиженийДоп.Видимость = пСтрук.ЕстьДанные;
	КонецЕсли;
	
	вОчиститьДанныеОбъекта();
	вЗаполнитьДанныеОбъекта(НадоСоздаватьРеквизиты);
	мОбъектСсылкаПредыдущий = мОбъектСсылка;
	вОбновитьНаборЗаписей();
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыОбъектаПередНачаломИзменения(Элемент, Отказ)
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Значение = ТекДанные["Значение"];
		
		//Если ТипЗнч(Значение) = мТипХЗ или ТипЗнч(Значение) = мТипUUID Тогда
		Если ТипЗнч(Значение) = мТипХЗ Тогда
			Отказ = истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыОбъектаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "РеквизитыОбъектаЗначение" Тогда
		ТекДанные = Элемент.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			Значение = ТекДанные["Значение"];
			
			Если ТипЗнч(Значение) = мТипХЗ Тогда
				СтандартнаяОбработка = ложь;
				вПоказатьЗначениеХЗ(Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ИмяКолонки = Сред(Поле.Имя, СтрДлина(Элемент.Имя) + 1);
		Значение = ТекДанные[ИмяКолонки];
		
		Если ТипЗнч(Значение) = мТипХЗ Тогда
			СтандартнаяОбработка = ложь;
			вПоказатьЗначениеХЗ(Значение);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	Если Настройки["_ДополнительныеСвойства"] = Неопределено Тогда
		_ДополнительныеСвойства.Очистить();
	КонецЕсли;
	
	пСтрук = новый Структура("мОбъектСсылка");
	
	Для каждого Элем из пСтрук Цикл
		пЗначение = Настройки[Элем.Ключ];
		Если пЗначение <> Неопределено Тогда
			пОписаниеТипов = вСоздатьОписаниеТипов(ТипЗнч(пЗначение));
			
			Элементы[Элем.Ключ].ОграничениеТипа = пОписаниеТипов;
			ЭтаФорма[Элем.Ключ] = пОписаниеТипов.ПривестиЗначение(пЗначение);
		ИНаче
			Элементы[Элем.Ключ].ОграничениеТипа =новый ОписаниеТипов;
			ЭтаФорма[Элем.Ключ] = Неопределено;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	Если мОбъектСсылка <> Неопределено Тогда
		вОбновитьДанныеОбъекта();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ПоказатьСведения(Команда)
	СтрукПарам = новый Структура("ОписаниеРазработки", _ОписаниеРазработки);
	ОткрытьФорму(ПутьКФормам + "ФормаОРазработке", СтрукПарам);
КонецПроцедуры


&НаКлиенте
Процедура _ОткрытьРедакторДвижений(Команда)
	пНастройки = вСформироватьСтруктуруНастроек();
	ЗаполнитьЗначенияСвойств(пНастройки, ЭтаФорма);
	СтрукПарам = новый Структура("ПутьКФормам, мОбъектСсылка, АдресаХранилищ, ОписаниеРазработки, Настройки", ПутьКФормам, мОбъектСсылка, _АдресаХранилищ, _ОписаниеРазработки, пНастройки);
	Попытка
		ОткрытьФорму(ПутьКФормам + "ФормаРедакторДвижений", СтрукПарам, ,мОбъектСсылка);
	Исключение
		Сообщить("Не найдена форма ""ФормаРедакторДвижений""!");
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура _ОткрытьРедакторДвиженийДоп(Команда)
	пНастройки = вСформироватьСтруктуруНастроек();
	ЗаполнитьЗначенияСвойств(пНастройки, ЭтаФорма);
	СтрукПарам = новый Структура("ПутьКФормам, мОбъектСсылка, АдресаХранилищ, ОписаниеРазработки, Настройки", ПутьКФормам, мОбъектСсылка, _АдресаХранилищ, _ОписаниеРазработки, пНастройки);
	Попытка
		ОткрытьФорму(ПутьКФормам + "ФормаРедакторДвиженийДоп", СтрукПарам, ,мОбъектСсылка);
	Исключение
		Сообщить("Не найдена форма ""ФормаРедакторДвижений""!");
	КонецПопытки;
КонецПроцедуры


&НаКлиенте
Процедура _ЗаполнитьДанныеТекущейКолонки(Команда)
	ТекСтраница = Элементы.ГруппаСтраницы.ТекущаяСтраница;
	Если ТекСтраница.Имя = "СтрРеквизитыОбъекта" или ТекСтраница.Имя = "СтрНастройки" или ТекСтраница.Имя = "СтрСсылкиНаОбъект"Тогда
		Возврат;
	КонецЕсли;
	
	ТекТаб = Неопределено;
	Для каждого Элем из ТекСтраница.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элем) = Тип("ТаблицаФормы") Тогда
			ТекТаб = Элем;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	пЗначение = _ЗначениеДляЗаполнения;
	
	Если ТекТаб <> Неопределено Тогда
		СтрукДанные = вПолучитьСвойстваТабличногоПоля(ТекТаб.Имя);
		Если не СтрукДанные.Отказ Тогда
			пТаблица = ЭтаФорма[СтрукДанные.Таблица];
			пПоле = СтрукДанные.Поле;
			
			Если ТипЗнч(пТаблица) = Тип("ДанныеФормыКоллекция") и пТаблица.Количество() <> 0 Тогда
				
				Если _ПриЗаполненииОбрабатыватьТолькоВыделенныеСтроки Тогда
					Для каждого Элем из ТекТаб.ВыделенныеСтроки Цикл
						Стр = пТаблица.НайтиПоИдентификатору(Элем);
						Стр[пПоле] = пЗначение;
					КонецЦикла;
				Иначе
					Для каждого Стр из пТаблица Цикл
						Стр[пПоле] = пЗначение;
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ЗначениеДляЗаполненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если _ЗначениеДляЗаполнения = Неопределено Тогда
		СтандартнаяОбработка = ложь;
		СтрукПарам = новый Структура("ЗакрыватьПриЗакрытииВладельца, ТипыДляЗаполненияЗначений", истина, истина);
		ОткрытьФорму(ПутьКФормам + "ФормаВыбораОбъекта", СтрукПарам, Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли ТипЗнч(_ЗначениеДляЗаполнения) = Тип("УникальныйИдентификатор") Тогда
		СтандартнаяОбработка = ложь;
	Иначе
		Элемент.ОграничениеТипа = вСоздатьОписаниеТипов(ТипЗнч(_ЗначениеДляЗаполнения));
		
		Если _ИспользоватьНеСтандартнуюФормуДляВыбора Тогда
			пПолноеИмя = вПолучитьПолноеИмяМД(_ЗначениеДляЗаполнения);
			Если пПолноеИмя = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			СтандартнаяОбработка = ложь;
			СтрукПараметры = новый Структура("ПутьКФормам, ПолноеИмя, АдресаХранилищ", ПутьКФормам, пПолноеИмя, _АдресаХранилищ);
			СтрукПараметры.Вставить("РежимВыбора", истина);
			Попытка
				ОткрытьФорму(ПутьКФормам + "ФормаСпискаОбъектов", СтрукПараметры, Элемент,истина,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			Исключение
				пОписаниеОшибки = ОписаниеОшибки();
				СтандартнаяОбработка = истина;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ЗначениеДляЗаполненияОчистка(Элемент, СтандартнаяОбработка)
	Элемент.ОграничениеТипа = новый ОписаниеТипов();
КонецПроцедуры

&НаКлиенте
Процедура _ДополнительныеСвойстваЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекДанные = Элементы._ДополнительныеСвойства.ТекущиеДанные;
	
	Если ТекДанные <> Неопределено Тогда
		Если ТекДанные.Значение = Неопределено Тогда
			СтандартнаяОбработка = ложь;
			СтрукПарам = новый Структура("ЗакрыватьПриЗакрытииВладельца, ПоказыватьПростыеТипы", истина, истина);
			ОткрытьФорму(ПутьКФормам + "ФормаВыбораОбъекта", СтрукПарам, Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			Массив = новый Массив;
			Массив.Добавить(ТипЗнч(ТекДанные.Значение));
			Элемент.ОграничениеТипа = новый ОписаниеТипов(Массив);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ДополнительныеСвойстваЗначениеОчистка(Элемент, СтандартнаяОбработка)
	Элемент.ОграничениеТипа = новый ОписаниеТипов();
КонецПроцедуры


// для документов
&НаКлиенте
Процедура _ПровестиДокумент(Команда)
	Если не ЗначениеЗаполнено(мОбъектСсылка) Тогда
		ПоказатьПредупреждение(,"Не задан документ для обработки", 20);
		Возврат;
	КонецЕсли;
	
	Если не _ПроведениеРазрешено Тогда
		ПоказатьПредупреждение(,"Проведение документов данного типа запрещено!", 20);
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(новый ОписаниеОповещения("вПровестиДокументДалее", ЭтаФорма), "Документ будет перепроведен. Продолжить?", РежимДиалогаВопрос.ДаНетОтмена, 20);
КонецПроцедуры

&НаКлиенте
Процедура _РаспровестиДокумент(Команда)
	Если не ЗначениеЗаполнено(мОбъектСсылка) Тогда
		ПоказатьПредупреждение(,"Не задан документ для обработки", 20);
		Возврат;
	КонецЕсли;
	
	Если не _ПроведениеРазрешено Тогда
		ПоказатьПредупреждение(,"Проведение документов данного типа запрещено!", 20);
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(новый ОписаниеОповещения("вРаспровестиДокументДалее", ЭтаФорма), "Для документа будет выполнена отмена проведения. Продолжить?", РежимДиалогаВопрос.ДаНетОтмена, 20);
КонецПроцедуры

&НаКлиенте
Процедура вПровестиДокументДалее(РезультатВопроса, ДопПараметры = Неопределено) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		пСтрук = новый Структура("ДополнительныеСвойства, ПроцедураПередЗаписью");
		
		Если _ИспользоватьДополнительныеСвойстваПриЗаписи и _ДополнительныеСвойства.Количество() <> 0 Тогда
			пСтрук.ДополнительныеСвойства = новый Структура;
			Попытка
				Для каждого Стр из _ДополнительныеСвойства Цикл
					пСтрук.ДополнительныеСвойства.Вставить(Стр.Ключ, Стр.Значение);
				КонецЦикла;
			Исключение
				Сообщить("Ошибка при установке ДополнительныхСвойств: неправильное значение ключа """ + Стр.Ключ + """");
				Возврат;
			КонецПопытки;
		КонецЕсли;
		
		Если _ИспользоватьПроцедуруПередЗаписью и не ПустаяСтрока(_ПроцедураПередЗаписью) Тогда
			пСтрук.ПроцедураПередЗаписью = _ПроцедураПередЗаписью;
		КонецЕсли;
		
		Если вПровестиРаспровестиДокумент(мОбъектСсылка, истина, пСтрук) Тогда
			ОбновитьДанныеОбъекта(Неопределено);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вРаспровестиДокументДалее(РезультатВопроса, ДопПараметры = Неопределено) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Если вПровестиРаспровестиДокумент(мОбъектСсылка, ложь) Тогда
			ОбновитьДанныеОбъекта(Неопределено);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция вПровестиРаспровестиДокумент(Ссылка, Провести = истина, пСтрукПарам = Неопределено)
	Режим = ?(Провести, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.ОтменаПроведения);
	
	Попытка
		ДокОбъект = Ссылка.ПолучитьОбъект();
		
		Если Провести Тогда
			Если пСтрукПарам.ДополнительныеСвойства <> Неопределено Тогда
				Для каждого Элем из пСтрукПарам.ДополнительныеСвойства Цикл
					ДокОбъект.ДополнительныеСвойства.Вставить(Элем.Ключ, Элем.Значение);
				КонецЦикла;
			КонецЕсли;
			
			Если пСтрукПарам.ПроцедураПередЗаписью <> Неопределено Тогда
				Если не вВыполнитьПроцедуруПередЗаписью(ДокОбъект, пСтрукПарам.ПроцедураПередЗаписью) Тогда
					Возврат ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ДокОбъект.Записать(Режим);
	Исключение
		Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат ложь;
	КонецПопытки;
	
	Возврат истина;
КонецФункции


// выгрузка / загрузка объекта через XML

&НаКлиенте
Процедура _ВыгрузитьНаборЗаписей(Команда)
	Если не ЗначениеЗаполнено(мОбъектСсылка) Тогда
		ПоказатьПредупреждение(,"Не задан объект для выгрузки движений", 20);
		Возврат;
	КонецЕсли;
	Если ПустаяСтрока(_ИмяНабораЗаписей) Тогда
		ПоказатьПредупреждение(,"Не задан набор записей для выгрузки", 20);
		Возврат;
	КонецЕсли;
	
	вВыгрузитьОбъект(4);
КонецПроцедуры

&НаКлиенте
Процедура _ВыгрузитьОбъект(Команда)
	вВыгрузитьОбъект(1);
КонецПроцедуры

&НаКлиенте
Процедура _ВыгрузитьОбъектСДвижениями(Команда)
	вВыгрузитьОбъект(2);
КонецПроцедуры

&НаКлиенте
Процедура _ВыгрузитьДвиженияОбъекта(Команда)
	вВыгрузитьОбъект(3);
КонецПроцедуры

&НаКлиенте
Процедура _ЗагрузитьДанныеXML(Команда)
	пСтрук = новый Структура("_ПутьКФормам", ПутьКФормам);
	ОткрытьФорму(ПутьКФормам + "ФормаЗагрузкаXML", пСтрук,,,,,новый ОписаниеОповещения("вОбработатьКомандуЗагрузкиДанныхXML", ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура вОбработатьКомандуЗагрузкиДанныхXML(РезультатЗакрытия = Неопределено, ДопПарам = Неопределено) Экспорт
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		Если РезультатЗакрытия.ЗагружатьДанныеБезИспользованияФайла Тогда
			СтрокаXML = РезультатЗакрытия.ДанныеXML;
			Если не ПустаяСтрока(СтрокаXML) Тогда
				РезультатЗакрытия.ДанныеXML = "";
				вЗагрузитьДанныеXML(РезультатЗакрытия, СтрокаXML);
			КонецЕсли;
			
			Возврат;
		КонецЕсли;
		
		пПутьКФайлуXML = РезультатЗакрытия.ПутьКФайлуXML;
		
		ТДок = новый ТекстовыйДокумент;
		
		пСтрук = новый Структура;
		пСтрук.Вставить("Параметры", РезультатЗакрытия);
		пСтрук.Вставить("ТДок", ТДок);
		
		ТДок.НачатьЧтение(новый ОписаниеОповещения("вПослеОкончанияЧтенияФайла", ЭтаФорма, пСтрук), пПутьКФайлуXML, "UTF-8");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вПослеОкончанияЧтенияФайла(пСтрукПарам) Экспорт
	СтрокаXML = пСтрукПарам.ТДок.ПолучитьТекст();
	
	Если не ПустаяСтрока(СтрокаXML) Тогда
		вЗагрузитьДанныеXML(пСтрукПарам.Параметры, СтрокаXML);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вВыгрузитьОбъект(пРежим)
	Если не ЗначениеЗаполнено(мОбъектСсылка) Тогда
		ПоказатьПредупреждение(, "Не задан документ для выгрузки", 20);
		Возврат;
	КонецЕсли;
	
	пСтрук = новый Структура("_ПутьКФормам, _Режим, _ИмяФайла", ПутьКФормам, пРежим, "ДанныеXML");
	Если пРежим = 1 Тогда
		пСтрук._ИмяФайла = "Объект";
	ИначеЕсли пРежим = 2 Тогда
		пСтрук._ИмяФайла = "Объект (с движениями)";
	ИначеЕсли пРежим = 3 Тогда
		пСтрук._ИмяФайла = "Объект (движения)";
	ИначеЕсли пРежим = 4 Тогда
		пСтрук._ИмяФайла = _ИмяНабораЗаписей;
	КонецЕсли;
	
	ОткрытьФорму(ПутьКФормам + "ФормаВыгрузкаОбъектаXML", пСтрук,,,,,новый ОписаниеОповещения("вВыгрузитьОбъектВФайл", ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура вВыгрузитьОбъектВФайл(РезультатЗакрытия = Неопределено, ДопПарам = Неопределено) Экспорт
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		пРежим = РезультатЗакрытия.Режим;
		СтрокаXML = вСформироватьВыгрузкуXML(мОбъектСсылка, пРежим, _ИмяНабораЗаписей);
		
		Если не ПустаяСтрока(СтрокаXML) Тогда
			ТДок = новый ТекстовыйДокумент;
			ТДок.УстановитьТекст(СтрокаXML);
			
			Если РезультатЗакрытия.ВыгружатьДанныеБезИспользованияФайла Тогда
				ТДок.Показать("ДанныеXML");
			Иначе
				пИмяФайла = РезультатЗакрытия.ПутьКФайлуXML;
				ТДок.НачатьЗапись(новый ОписаниеОповещения("вПослеОкончанияЗаписиФайла", ЭтаФорма), пИмяФайла, "UTF-8");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура вПослеОкончанияЗаписиФайла(Результат, ДопПарам = Неопределено) Экспорт
	Если Результат = истина Тогда
		ПоказатьПредупреждение(, "Данные выгружены в файл", 20);
	КонецЕсли;
КонецПроцедуры


&НаСервереБезКонтекста
Функция вСформироватьВыгрузкуXML(Знач пСсылка, Знач пРежим, Знач пИмяНабораЗаписей = "")
	
	ЗаписьXML = новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("_1CV8DtUD", "http://www.1c.ru/V8/1CV8DtUD/");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("V8Exch", "http://www.1c.ru/V8/1CV8DtUD/");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("core", "http://v8.1c.ru/data");
	
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("v8", "http://v8.1c.ru/8.1/data/enterprise/current-config");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xs", "http://www.w3.org/2001/XMLSchema");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("V8Exch:Data");
	
	
	Если пРежим = 4 Тогда
		Менеджер = вСоздатьМенеджерНабораЗаписей(пИмяНабораЗаписей);
		Если Менеджер <> Неопределено Тогда
			Набор = Менеджер.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(пСсылка);
			Набор.Прочитать();
			
			СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Набор);
		КонецЕсли;
	Иначе
		Попытка
			пОбъект = пСсылка.ПолучитьОбъект();
		Исключение
			Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), СтатусСообщения.Важное);
			Сообщить("Выгрузка данных не выполнена!", СтатусСообщения.Важное);
			Возврат "";
		КонецПопытки;
		
		Если пРежим = 1 или пРежим = 2 Тогда
			СериализаторXDTO.ЗаписатьXML(ЗаписьXML, пОбъект, НазначениеТипаXML.Явное);
		КонецЕсли;
		
		Если пРежим = 2 или пРежим = 3 Тогда
			пОбъектМД = пОбъект.Метаданные();
			Если Метаданные.Документы.Содержит(пОбъектМД) Тогда
				Для каждого Движение из пОбъект.Движения Цикл
					Движение.Прочитать();
					СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Движение);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); // V8Exc:Data
	ЗаписьXML.ЗаписатьКонецЭлемента(); // V8Exc:_1CV8DtUD
	
	СтрокаXML = ЗаписьXML.Закрыть();
	
	Возврат СтрокаXML;
КонецФункции

&НаСервереБезКонтекста
Процедура вВыполнитьПроцедуруВКонтекстеОбъекта(пОбъект, пПроцедураПередЗаписью)
	Попытка
		Выполнить(пПроцедураПередЗаписью);
	Исключение
		Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), СтатусСообщения.Важное);
		ВызватьИсключение "Ошибка при выполнение процедуры перед записью!";
	КонецПопытки;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура вЗагрузитьДанныеXML(Знач пСтрукПараметры, Знач СтрокаXML)
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	
	Сообщить("Загрузка данных стартована");
	
	пОшибкаФормата = ложь;
	пСтрокаНеверныйФормат = НСтр("ru = 'Неверный формат файла выгрузки'");
	
	Попытка
		// проверка формата
		Если пОшибкаФормата
			или не ЧтениеXML.Прочитать()
			или ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента
			или ЧтениеXML.ЛокальноеИмя <> "_1CV8DtUD"
			или ЧтениеXML.URIПространстваИмен <> "http://www.1c.ru/V8/1CV8DtUD/" Тогда
			
			пОшибкаФормата = истина;
		КонецЕсли;
		
		Если пОшибкаФормата
			или не ЧтениеXML.Прочитать()
			или ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента
			или ЧтениеXML.ЛокальноеИмя <> "Data" Тогда
			
			пОшибкаФормата = истина;
		КонецЕсли;
		
		Если пОшибкаФормата или не ЧтениеXML.Прочитать() Тогда
			
			пОшибкаФормата = истина;
		КонецЕсли;
		
	Исключение
		пОшибкаФормата = истина;
	КонецПопытки;
	
	Если пОшибкаФормата Тогда
		Сообщить(пСтрокаНеверныйФормат, СтатусСообщения.Важное);
		ЧтениеXML.Закрыть();
		Возврат;
	КонецЕсли;
	
	// параметры загрузки
	пЗагружатьВТранзакции = пСтрукПараметры.ЗагружатьВТранзакции;
	пЗагружатьВРежимеОбменДанными = пСтрукПараметры.ЗагружатьВРежимеОбменДанными;
	пПродолжатьЗагрузкуПриОшибке = пСтрукПараметры.ПродолжатьЗагрузкуПриОшибке;
	пИспользоватьДополнительныеСвойстваПриЗаписи = пСтрукПараметры.ИспользоватьДополнительныеСвойстваПриЗаписи;
	пИспользоватьПроцедуруПередЗаписью = пСтрукПараметры.ИспользоватьПроцедуруПередЗаписью;
	пДополнительныеСвойства = пСтрукПараметры.ДополнительныеСвойства;
	пПроцедураПередЗаписью = пСтрукПараметры.ПроцедураПередЗаписью;
	
	пПродолжатьЗагрузкуПриОшибке = пПродолжатьЗагрузкуПриОшибке и не пЗагружатьВТранзакции;
	пИспользоватьДополнительныеСвойстваПриЗаписи = пИспользоватьДополнительныеСвойстваПриЗаписи и пДополнительныеСвойства.Количество() <> 0;
	пИспользоватьПроцедуруПередЗаписью = пИспользоватьПроцедуруПередЗаписью и не ПустаяСтрока(пПроцедураПередЗаписью);
	
	
	// чтение данных
	Если пЗагружатьВТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	пСчетчик = 0;
	Пока СериализаторXDTO.ВозможностьЧтенияXML(ЧтениеXML) Цикл
		Попытка
			пОбъект = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
			пОбъект.ОбменДанными.Загрузка = пЗагружатьВРежимеОбменДанными;
			
			Если пИспользоватьДополнительныеСвойстваПриЗаписи Тогда
				Для каждого Элем из пДополнительныеСвойства Цикл
					пОбъект.ДополнительныеСвойства.Вставить(Элем.Ключ, Элем.Значение);
				КонецЦикла;
			КонецЕсли;
			
			Если пИспользоватьПроцедуруПередЗаписью Тогда
				вВыполнитьПроцедуруВКонтекстеОбъекта(пОбъект, пПроцедураПередЗаписью);
			КонецЕсли;
			
			пОбъект.Записать();
			пСчетчик = пСчетчик + 1;
		Исключение
			Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			Если не пПродолжатьЗагрузкуПриОшибке Тогда
				пОшибкаФормата = истина;
				Прервать;
			КонецЕсли;
		КонецПопытки;
	КонецЦикла;
	
	Если пОшибкаФормата Тогда
		Если пЗагружатьВТранзакции Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ЧтениеXML.Закрыть();
		Сообщить("Загрузка данных прервана", СтатусСообщения.Важное);
		Возврат;
	Иначе
		Если пЗагружатьВТранзакции Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
	КонецЕсли;
	
	
	// проверка формата
	Если пОшибкаФормата
		или ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента
		или ЧтениеXML.ЛокальноеИмя <> "Data" Тогда
		
		пОшибкаФормата = истина;
	КонецЕсли;
	
	Если пОшибкаФормата
		или не ЧтениеXML.Прочитать()
		или ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента
		или ЧтениеXML.ЛокальноеИмя <> "_1CV8DtUD"
		или ЧтениеXML.URIПространстваИмен <> "http://www.1c.ru/V8/1CV8DtUD/" Тогда
		
		пОшибкаФормата = истина;
	КонецЕсли;
	
	Если пОшибкаФормата Тогда
		Сообщить(пСтрокаНеверныйФормат, СтатусСообщения.Важное);
		ЧтениеXML.Закрыть();
		Сообщить("Загрузка данных завершена");
		Возврат;
	КонецЕсли;
	
	ЧтениеXML.Закрыть();
	Сообщить("Загрузка данных завершена");
КонецПроцедуры


&НаСервереБезКонтекста
Функция вОпределитьДополнительныеРегистрыДокумента(Знач пПолноеИмяДокумента)
	пСоотв = новый Соответствие;
	
	пСтрук = новый Структура;
	пСтрук.Вставить("ЕстьДанные", ложь);
	пСтрук.Вставить("ДополнительныеРегистры", пСоотв);
	
	пРегистраторМД = Метаданные.Документы.Найти("РегистраторРасчетов");
	Если пРегистраторМД = Неопределено Тогда
		Возврат пСтрук;
	КонецЕсли;
	
	Если ТипЗнч(пПолноеИмяДокумента) <> Тип("Строка") Тогда
		пПолноеИмяДокумента = пПолноеИмяДокумента.Метаданные().ПолноеИмя();
		Если СтрНайти(пПолноеИмяДокумента, "Документ.") <> 1 Тогда
			Возврат пСтрук;
		КонецЕсли;
	КонецЕсли;
	
	Для каждого ЭлемМД из пРегистраторМД.Движения Цикл
		пРеквизитМД = ЭлемМД.Реквизиты.Найти("ДокументРегистратор");
		Если пРеквизитМД <> Неопределено Тогда
			пИмяРегистра = ЭлемМД.ПолноеИмя();
			
			Для каждого пТип из пРеквизитМД.Тип.Типы() Цикл
				пДокМД = Метаданные.НайтиПоТипу(пТип);
				
				Если пДокМД <> Неопределено Тогда
					пИмяДокумента = пДокМД.ПолноеИмя();
					
					Если пИмяДокумента = пПолноеИмяДокумента и пИмяДокумента <> "Документ.РегистраторРасчетов" Тогда
						пСоотв[пИмяРегистра] = ЭлемМД.Представление();
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	пСтрук.ЕстьДанные = (пСоотв.Количество() <> 0);
	
	Возврат пСтрук;
КонецФункции


&НаКлиенте
Процедура _ВставитьУникальныйИдентификатор(Команда)
	ТекТаблица = ЭтаФорма.ТекущийЭлемент;
	
	Если ТекТаблица.Имя = "_ЗначениеДляЗаполнения" Тогда
		пСтрук = новый Структура("Таблица", ТекТаблица.Имя);
		ПоказатьВводСтроки(новый ОписаниеОповещения("вОбработатьВвод_UUID", ЭтаФорма, пСтрук),мПоследнийUUID,"Введите уникальный идентификатор",,ложь);
		Возврат;
	ИначеЕсли ТипЗнч(ТекТаблица) <> Тип("ТаблицаФормы") Тогда
		Возврат;
	КонецЕсли;
	
	ТекКолонка = ТекТаблица.ТекущийЭлемент;
	Если ТекКолонка = Неопределено или ТекКолонка.ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		пДоступныеТипы = ТекКолонка.ДоступныеТипы.Типы();
		Если пДоступныеТипы.Количество() <> 0 и пДоступныеТипы.Найти(Тип("УникальныйИдентификатор")) <> 0 Тогда
			Возврат;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	ТекДанные = Элементы[ТекТаблица.Имя].ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		пСтрук = новый Структура("Таблица", ТекТаблица.Имя);
		
		Если ТекТаблица.Имя = "РеквизитыОбъекта" Тогда
			пСтрук.Вставить("Поле", "Значение");
		ИначеЕсли ТекТаблица.Имя = "_ДополнительныеСвойства" Тогда
			пСтрук.Вставить("Поле", "Значение");
		Иначе
			пСтрук.Вставить("Поле", Сред(ТекКолонка.Имя, СтрДлина(ТекТаблица.Имя)+1));
		КонецЕсли;
		
		ПоказатьВводСтроки(новый ОписаниеОповещения("вОбработатьВвод_UUID", ЭтаФорма, пСтрук),мПоследнийUUID,"Введите уникальный идентификатор",,ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вОбработатьВвод_UUID(Строка, пСтрук = Неопределено) Экспорт
	Если Строка <> Неопределено и не ПустаяСтрока(Строка) Тогда
		Попытка
			пЗначение = новый УникальныйИдентификатор(Строка);
			мПоследнийUUID = Строка;
		Исключение
			ПоказатьПредупреждение(, "Значение не может быть преобразовано в Уникальный идентификатор!", 20);
			Возврат;
		КонецПопытки;
		
		Если пСтрук.Таблица = "_ЗначениеДляЗаполнения" Тогда
			_ЗначениеДляЗаполнения = пЗначение;
		Иначе
			ТекДанные = Элементы[пСтрук.Таблица].ТекущиеДанные;
			Если ТекДанные <> Неопределено Тогда
				ТекДанные[пСтрук.Поле] = пЗначение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура РеквизитыОбъектаЗначениеПриИзменении(Элемент)
	пЗначение = Элементы.РеквизитыОбъекта.ТекущиеДанные.Значение;
	
	Если Элементы.РеквизитыОбъекта.ТекущиеДанные.Имя = "ТипЗначения" и пЗначение <> Неопределено Тогда
		пВидОбъекта = вОпределитьВидОбъекта(мОбъектСсылка);
		Если пВидОбъекта = "ПланВидовХарактеристик" Тогда
			Элементы.РеквизитыОбъекта.ТекущиеДанные.Значение = вСоздатьОписаниеТипов(ТипЗнч(пЗначение));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция вОпределитьВидОбъекта(Знач пСсылка)
	Если пСсылка = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		пОбъектМД = Метаданные.НайтиПоТипу(ТипЗнч(пСсылка));
		Если пОбъектМД = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		пПолноеИмя = пОбъектМД.ПолноеИмя();
		Возврат Лев(пПолноеИмя, СтрНайти(пПолноеИмя, ".")-1);
	КонецЕсли;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция вЗначениеВМассив(Знач пЗначение)
	пМассив = новый Массив;
	пМассив.Добавить(пЗначение);
	
	Возврат пМассив;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция вСоздатьОписаниеТипов(Знач пТип)
	пМассив = новый Массив;
	пМассив.Добавить(пТип);
	
	Возврат новый ОписаниеТипов(пМассив);
КонецФункции



&НаКлиенте
Процедура _РазвернутьВсеУзлы(Команда)
	Для каждого Элем из _ЗависимыеОбъекты.ПолучитьЭлементы() Цикл
		Элементы._ЗависимыеОбъекты.Развернуть(Элем.ПолучитьИдентификатор(), истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура _СвернутьВсеУзлы(Команда)
	Для каждого УзелДЗ из _ЗависимыеОбъекты.ПолучитьЭлементы() Цикл
		Для каждого Элем из УзелДЗ.ПолучитьЭлементы() Цикл
			Элементы._ЗависимыеОбъекты.Свернуть(Элем.ПолучитьИдентификатор());
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура _ЗаполнитьЗависимыеОбъекты(Команда)
	Элементы.ДекорацияСсылкиНаОбъект.Заголовок = "Ссылки на объекты конфигурации";
	_ЗависимыеОбъекты.ПолучитьЭлементы().Очистить();
	_ГдеНайдено = "";
	
	вЗаполнитьЗависимыеОбъекты();
	
	Для каждого Элем из _ЗависимыеОбъекты.ПолучитьЭлементы() Цикл
		Элементы._ЗависимыеОбъекты.Развернуть(Элем.ПолучитьИдентификатор(), ложь);
	КонецЦикла;
	
	Если _КоличествоЗависимых <> 0 Тогда
		Элементы.ДекорацияСсылкиНаОбъект.Заголовок = "Ссылки на объекты конфигурации (" + _КоличествоЗависимых + ")";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура вЗаполнитьЗависимыеОбъекты()
	_КоличествоЗависимых = 0;
	пОбщееКоличество = 0;
	
	пОбъектМД = Метаданные.НайтиПоПолномуИмени(_ТипОбъекта);
	Если пОбъектМД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	пКорневойУзел = _ЗависимыеОбъекты.ПолучитьЭлементы().Добавить();
	пКорневойУзел.ВидУзла = 1;
	пКорневойУзел.Имя = пОбъектМД.Имя;
	пКорневойУзел.Представление = пОбъектМД.Представление();
	пКорневойУзел.ПолноеИмя = _ТипОбъекта;
	
	Поз = СтрНайти(_ТипОбъекта, ".");
	пТипДляПоиска = Тип(Лев(_ТипОбъекта, Поз-1) + "Ссылка" + Сред(_ТипОбъекта, Поз));
	
	пНадоСмотретьПланСчетов = (Лев(_ТипОбъекта, Поз-1) = "ПланСчетов");
	пНадоСмотретьПланВидовРасчета = (Лев(_ТипОбъекта, Поз-1) = "ПланВидовРасчета");
	
	пНадоСмотретьВладельцев = (Лев(_ТипОбъекта, Поз-1) = "Справочник");
	пНадоСмотретьРегистраторов = (Лев(_ТипОбъекта, Поз-1) = "Документ");
	пНадоСмотретьВидыСубконтоПС = (Лев(_ТипОбъекта, Поз-1) = "ПланВидовХарактеристик");
	пНадоСмотретьРодителя = (Лев(_ТипОбъекта, Поз-1) = "Справочник") или (Лев(_ТипОбъекта, Поз-1) = "ПланВидовХарактеристик");
	
	Если пНадоСмотретьРодителя и не пОбъектМД.Иерархический Тогда
		пНадоСмотретьРодителя = ложь;
	КонецЕсли;
	
	пТабОбщиеРеквизиты = вПолучитьДанныеПоОбщимРеквизитам(_АдресаХранилищ.ОбщиеРеквизиты, УникальныйИдентификатор);
	пТабТипы = пТабОбщиеРеквизиты.Скопировать(, "Тип");
	пТабТипы.Свернуть("Тип");
	пМассивОТ = новый Массив;
	Для каждого Стр из пТабТипы Цикл
		Если Стр.Тип.СодержитТип(пТипДляПоиска) Тогда
			пМассивОТ.Добавить(Стр.Тип);
		КонецЕсли;
	КонецЦикла;
	
	пНадоСмотретьОбщиеРеквизиты = (пМассивОТ.Количество() <> 0);
	Если пНадоСмотретьОбщиеРеквизиты Тогда
		пТабОбщиеРеквизитыХХХ = Неопределено;
		Для каждого Элем из пМассивОТ Цикл
			Если пТабОбщиеРеквизитыХХХ = Неопределено Тогда
				пТабОбщиеРеквизитыХХХ = пТабОбщиеРеквизиты.Скопировать(новый Структура("Тип", Элем));
			Иначе
				Для каждого Стр из пТабОбщиеРеквизиты.НайтиСтроки(новый Структура("Тип", Элем)) Цикл
					ЗаполнитьЗначенияСвойств(пТабОбщиеРеквизитыХХХ.Добавить(), Стр);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		пТабОбщиеРеквизитыХХХ.Индексы.Добавить("Объект");
		пТабОбщиеРеквизиты = Неопределено;
	КонецЕсли;
	
	пТабРезультат = новый ТаблицаЗначений;
	пТабРезультат.Колонки.Добавить("Имя", новый ОписаниеТипов("Строка"));
	пТабРезультат.Колонки.Добавить("Представление", новый ОписаниеТипов("Строка"));
	пТабРезультат.Колонки.Добавить("ПолноеИмя", новый ОписаниеТипов("Строка"));
	пТабРезультат.Колонки.Добавить("ГдеНайдено", новый ОписаниеТипов("Строка"));
	
	
	// ---
	пСтрукРазделы = новый Структура("ПараметрыСеанса, ОпределяемыеТипы, Константы");
	
	пСоотв = новый Соответствие;
	
	Для каждого пЭлем из пСтрукРазделы Цикл
		пТабРезультат.Очистить();
		
		пРазделМД = Метаданные[пЭлем.Ключ];
		
		Для каждого ОбъектМД из пРазделМД Цикл
			пПолноеИмя = ОбъектМД.ПолноеИмя();
			пГдеНайдено = "";
			пСчетчик = 0;
			
			Если ОбъектМД.Тип.Типы().Найти(пТипДляПоиска) <> Неопределено Тогда
				пПуть = "Объект.Тип";
				Если пСчетчик = 0 Тогда
					пГдеНайдено = пПуть;
				Иначе
					пГдеНайдено = пГдеНайдено + "," + пПуть;
				КонецЕсли;
				пСчетчик = пСчетчик + 1;
				
				пСоотв[пПолноеИмя] = 1;
			КонецЕсли;
			
			Если пСоотв[пПолноеИмя] <> Неопределено Тогда
				НС = пТабРезультат.Добавить();
				НС.Имя = ОбъектМД.Имя;
				НС.Представление = ОбъектМД.Представление();
				НС.ПолноеИмя = пПолноеИмя;
				НС.ГдеНайдено = пГдеНайдено;
			КонецЕсли;
		КонецЦикла;
		
		пКоличество = пТабРезультат.Количество();
		Если пКоличество <> 0 Тогда
			пОбщееКоличество = пОбщееКоличество + пКоличество;
			
			пТабРезультат.Сортировать("Имя");
			
			пУзелРаздела = пКорневойУзел.ПолучитьЭлементы().Добавить();
			пУзелРаздела.Имя = пЭлем.Ключ + " (" + пКоличество + ")";
			пУзелРаздела.ВидУзла = 2;
			пКоллекцияЭлементов = пУзелРаздела.ПолучитьЭлементы();
			
			Для каждого Стр из пТабРезультат Цикл
				ЗаполнитьЗначенияСвойств(пКоллекцияЭлементов.Добавить(), Стр);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// ---
	пСтрукРазделы = новый Структура(
	"ПланыОбмена, Справочники, Документы, ПланыВидовРасчета, ПланыВидовХарактеристик, ПланыСчетов,
	|РегистрыСведений, РегистрыНакопления, РегистрыБухгалтерии, РегистрыРасчета,
	|БизнесПроцессы, Задачи"
	);
	
	пСтрукОбласти = новый Структура("Измерения, Ресурсы, Реквизиты");
	
	пСоотв = новый Соответствие;
	
	Для каждого пЭлем из пСтрукРазделы Цикл
		пТабРезультат.Очистить();
		
		пРазделМД = Метаданные[пЭлем.Ключ];
		
		пЭтоПланСчетов = (пЭлем.Ключ = "ПланыСчетов");
		пЭтоПланОбмена = (пЭлем.Ключ = "ПланыОбмена");
		пЭтоСправочник = (пЭлем.Ключ = "Справочники");
		пЭтоРегистр = (СтрНайти(пЭлем.Ключ, "Регистры") = 1);
		
		Для каждого ОбъектМД из пРазделМД Цикл
			пПолноеИмя = ОбъектМД.ПолноеИмя();
			пГдеНайдено = "";
			пСчетчик = 0;
			
			Если пЭтоРегистр Тогда
				Если пНадоСмотретьРегистраторов и пОбъектМД.Движения.Содержит(ОбъектМД) Тогда
					Если пСчетчик = 0 Тогда
						пГдеНайдено = "Объект.Реквизиты.Регистратор";
					Иначе
						пГдеНайдено = пГдеНайдено + ",Объект.Реквизиты.Регистратор";
					КонецЕсли;
					пСчетчик = пСчетчик + 1;
					
					пСоотв[пПолноеИмя] = 1;
				КонецЕсли;
				
				Если пНадоСмотретьПланСчетов и СтрНайти(пПолноеИмя, "РегистрБухгалтерии") = 1 Тогда
					Если ОбъектМД.ПланСчетов = пОбъектМД Тогда
						Если пСчетчик = 0 Тогда
							пГдеНайдено = "Объект.Реквизиты.Счет";
						Иначе
							пГдеНайдено = пГдеНайдено + ",Объект.Реквизиты.Счет";
						КонецЕсли;
						пСчетчик = пСчетчик + 1;
						
						пСоотв[пПолноеИмя] = 1;
					КонецЕсли;
				КонецЕсли;
				
				Если пНадоСмотретьПланВидовРасчета и СтрНайти(пПолноеИмя, "РегистрРасчета") = 1 Тогда
					Если ОбъектМД.ПланВидовРасчета = пОбъектМД Тогда
						Если пСчетчик = 0 Тогда
							пГдеНайдено = "Объект.Реквизиты.ВидРасчета";
						Иначе
							пГдеНайдено = пГдеНайдено + ",Объект.Реквизиты.ВидРасчета";
						КонецЕсли;
						пСчетчик = пСчетчик + 1;
						
						пСоотв[пПолноеИмя] = 1;
					КонецЕсли;
				КонецЕсли;
				
				Для каждого пОбласть из пСтрукОбласти Цикл
					Для каждого пРеквизит из ОбъектМД[пОбласть.Ключ] Цикл
						Если пРеквизит.Тип.Типы().Найти(пТипДляПоиска) <> Неопределено Тогда
							пПуть = "Объект." + пОбласть.Ключ + "." + пРеквизит.Имя;
							Если пСчетчик = 0 Тогда
								пГдеНайдено = пПуть;
							Иначе
								пГдеНайдено = пГдеНайдено + "," + пПуть;
							КонецЕсли;
							пСчетчик = пСчетчик + 1;
							
							пСоотв[пПолноеИмя] = 1;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
			Иначе // для не регистров
				
				Если пНадоСмотретьВладельцев и пЭтоСправочник Тогда
					Если ОбъектМД.Владельцы.Содержит(пОбъектМД) Тогда
						Если пСчетчик = 0 Тогда
							пГдеНайдено = "Объект.Реквизиты.Владелец";
						Иначе
							пГдеНайдено = пГдеНайдено + ",Объект.Реквизиты.Владелец";
						КонецЕсли;
						пСчетчик = пСчетчик + 1;
						
						пСоотв[пПолноеИмя] = 1;
					КонецЕсли;
				КонецЕсли;
				
				Если пНадоСмотретьРодителя и пПолноеИмя = _ТипОбъекта Тогда
						Если пСчетчик = 0 Тогда
							пГдеНайдено = "Объект.Реквизиты.Родитель";
						Иначе
							пГдеНайдено = пГдеНайдено + ",Объект.Реквизиты.Родитель";
						КонецЕсли;
						пСчетчик = пСчетчик + 1;
						
						пСоотв[пПолноеИмя] = 1;
				КонецЕсли;
				
				Для каждого пРеквизит из ОбъектМД.Реквизиты Цикл
					Если пРеквизит.Тип.Типы().Найти(пТипДляПоиска) <> Неопределено Тогда
						Если пСчетчик = 0 Тогда
							пГдеНайдено = "Объект.Реквизиты." + пРеквизит.Имя;
						Иначе
							пГдеНайдено = пГдеНайдено + ",Объект.Реквизиты." + пРеквизит.Имя;
						КонецЕсли;
						пСчетчик = пСчетчик + 1;
						
						пСоотв[пПолноеИмя] = 1;
					КонецЕсли;
				КонецЦикла;
				
				Для каждого пТабличнаяЧасть из ОбъектМД.ТабличныеЧасти Цикл
					Для каждого пРеквизит из пТабличнаяЧасть.Реквизиты Цикл
						Если пРеквизит.Тип.Типы().Найти(пТипДляПоиска) <> Неопределено Тогда
							Если пСчетчик = 0 Тогда
								пГдеНайдено = "Объект." + пТабличнаяЧасть.Имя + ".Реквизиты." + пРеквизит.Имя;
							Иначе
								пГдеНайдено = пГдеНайдено + ",Объект." + пТабличнаяЧасть.Имя + ".Реквизиты." + пРеквизит.Имя;
							КонецЕсли;
							пСчетчик = пСчетчик + 1;
							
							пСоотв[пПолноеИмя] = 1;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
				Если пЭтоПланОбмена Тогда
					Если ОбъектМД.Состав.Содержит(пОбъектМД) Тогда
						Если пСчетчик = 0 Тогда
							пГдеНайдено = "Объект.Состав";
						Иначе
							пГдеНайдено = пГдеНайдено + ",Объект.Состав";
						КонецЕсли;
						пСчетчик = пСчетчик + 1;
						
						пСоотв[пПолноеИмя] = 1;
					КонецЕсли;
				КонецЕсли;
				
				Если пЭтоПланСчетов и пНадоСмотретьВидыСубконтоПС Тогда
					Если ОбъектМД.ВидыСубконто = пОбъектМД Тогда
						Если пСчетчик = 0 Тогда
							пГдеНайдено = "Объект.ВидыСубконто";
						Иначе
							пГдеНайдено = пГдеНайдено + ",Объект.ВидыСубконто";
						КонецЕсли;
						пСчетчик = пСчетчик + 1;
						
						пСоотв[пПолноеИмя] = 1;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если пНадоСмотретьОбщиеРеквизиты Тогда
				Для каждого Стр из пТабОбщиеРеквизитыХХХ.НайтиСтроки(новый Структура("Объект", пПолноеИмя)) Цикл
					Если пСчетчик = 0 Тогда
						пГдеНайдено = "Объект.Реквизиты." + Стр.Имя;
					Иначе
						пГдеНайдено = пГдеНайдено + ",Объект.Реквизиты." + Стр.Имя;
					КонецЕсли;
					пСчетчик = пСчетчик + 1;
					
					пСоотв[пПолноеИмя] = 1;
				КонецЦикла;
			КонецЕсли;
			
			Если пСоотв[пПолноеИмя] <> Неопределено Тогда
				НС = пТабРезультат.Добавить();
				НС.Имя = ОбъектМД.Имя;
				НС.Представление = ОбъектМД.Представление();
				НС.ПолноеИмя = пПолноеИмя;
				НС.ГдеНайдено = пГдеНайдено;
			КонецЕсли;
		КонецЦикла;
		
		пКоличество = пТабРезультат.Количество();
		Если пКоличество <> 0 Тогда
			пОбщееКоличество = пОбщееКоличество + пКоличество;
			
			пТабРезультат.Сортировать("Имя");
			
			пУзелРаздела = пКорневойУзел.ПолучитьЭлементы().Добавить();
			пУзелРаздела.Имя = пЭлем.Ключ + " (" + пКоличество + ")";
			пУзелРаздела.ВидУзла = 2;
			пКоллекцияЭлементов = пУзелРаздела.ПолучитьЭлементы();
			
			Для каждого Стр из пТабРезультат Цикл
				ЗаполнитьЗначенияСвойств(пКоллекцияЭлементов.Добавить(), Стр);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	_КоличествоЗависимых = пОбщееКоличество;
КонецПроцедуры

&НаКлиенте
Процедура _ЗависимыеОбъектыПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("вОбработкаАктивизацииСтрокиЗависимых", 0.1, истина);
КонецПроцедуры

&НаКлиенте
Процедура вОбработкаАктивизацииСтрокиЗависимых()
	ТекДанные = Элементы._ЗависимыеОбъекты.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		_ГдеНайдено = СтрЗаменить(ТекДанные.ГдеНайдено, ",", Символы.ПС);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ЗависимыеОбъектыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекДанные = Элементы._ЗависимыеОбъекты.ТекущиеДанные;
	Если ТекДанные <> Неопределено и ТекДанные.ВидУзла = 0 Тогда
		СтандартнаяОбработка = ложь;
		_ОткрытьСписокЗависимых(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ОткрытьСписокЗависимых(Команда)
	ТекДанные = Элементы._ЗависимыеОбъекты.ТекущиеДанные;
	Если ТекДанные <> Неопределено и ТекДанные.ВидУзла = 0 Тогда
		//Если СтрНайти(ТекДанные.ПолноеИмя, "РегистрБухгалтерии") = 1 Тогда
		//	ПоказатьПредупреждение(, "Будет реализовано в следующих версиях!");
		//	Возврат;
		//КонецЕсли;
		
		пСтрук = новый Структура("ПутьКФормам, мОбъектСсылка, АдресаХранилищ, ПолноеИмя, ГдеНайдено, ОграничениеНаСписокЗависимых",
			ПутьКФормам, мОбъектСсылка, _АдресаХранилищ, ТекДанные.ПолноеИмя, ТекДанные.ГдеНайдено, _ОграничениеНаСписокЗависимых
		);
		ОткрытьФорму(ПутьКФормам + "ФормаСпискаЗависимых", пСтрук, ,истина);
	КонецЕсли;
КонецПроцедуры


// ИТОГИ ПО ЧИСЛОВЫМ КОЛОНКАМ

&НаКлиенте
Процедура _ПрименитьНастройки(Команда)
	пИмяНабораЗаписей = _ИмяНабораЗаписей;
	
	вЗаполнитьДанныеОбъекта(истина);
	
	Если не ПустаяСтрока(пИмяНабораЗаписей) Тогда
		_ИмяНабораЗаписей = пИмяНабораЗаписей;
		вОбновитьНаборЗаписей();
	КонецЕсли;
	
	пНастройки = вСформироватьСтруктуруНастроек();
	ЗаполнитьЗначенияСвойств(пНастройки, ЭтаФорма);
	вСохранитьНастройкиОбработки(пНастройки);
КонецПроцедуры

&НаКлиенте
Процедура _ПересчитатьИтогиПоКолонкам(Команда)
	Если не _ПоказыватьИтогиПоЧисловымКолонкам Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтраница = Элементы.ГруппаСтраницы.ТекущаяСтраница;
	Если ТекСтраница.Имя = "СтрРеквизитыОбъекта" или ТекСтраница.Имя = "СтрНастройки" или ТекСтраница.Имя = "СтрСсылкиНаОбъект"Тогда
		Возврат;
	КонецЕсли;
	
	ТекТаб = Неопределено;
	Для каждого Элем из ТекСтраница.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элем) = Тип("ТаблицаФормы") Тогда
			ТекТаб = Элем;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ТекТаб <> Неопределено Тогда
		вПересчитатьИтогиПоКолонкам(ТекТаб.Имя);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура вПересчитатьИтогиПоКолонкам(Знач пИмяРеквизита)
	пТипЧисло = Тип("Число");
	пТабРезультат = РеквизитФормыВЗначение(пИмяРеквизита);
	
	Если пТабРезультат = Неопределено Тогда
		пТабРезультат = новый ТаблицаЗначений;
	КонецЕсли;
	
	Если пИмяРеквизита = "_НаборЗаписей" Тогда
		пИмяРеквизита = "_НаборЗаписей_";
	КонецЕсли;
	
	Для каждого пКолонка из пТабРезультат.Колонки Цикл
		Если пКолонка.Имя <> "НомерСтроки" и пКолонка.ТипЗначения.СодержитТип(пТипЧисло) Тогда
			ЭФ = Элементы.Найти(пИмяРеквизита + пКолонка.Имя);
			Если ЭФ <> Неопределено Тогда
				ЭФ.ТекстПодвала = Строка(пТабРезультат.Итог(пКолонка.Имя));
				ЭФ.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Право;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры


// НАСТРОЙКИ ОБРАБОТКИ

&НаКлиентеНаСервереБезКонтекста
Функция вСформироватьСтруктуруНастроек()
	пСтрук = новый Структура;
	
	пСтрук.Вставить("_ПоказыватьИтогиПоЧисловымКолонкам", ложь);
	пСтрук.Вставить("_ПоказыватьИтогиПоЧисловымКолонкамРД", ложь);
	пСтрук.Вставить("_ИспользоватьЖирныйШрифтДляИтогов", истина);
	
	Возврат пСтрук;
КонецФункции

&НаСервереБезКонтекста
Функция вПолучитьКлючОбъекта()
	Возврат "СДРОбъектУпр";
КонецФункции

&НаСервереБезКонтекста
Процедура вСохранитьНастройкиОбработки(пНастройки)
	ХранилищеСистемныхНастроек.Сохранить(вПолучитьКлючОбъекта(), "Настройки", пНастройки);
КонецПроцедуры

&НаСервере
Процедура вЗагрузитьНастройкиОбработки()
	пДанные = ХранилищеСистемныхНастроек.Загрузить(вПолучитьКлючОбъекта(), "Настройки");
	
	Если ТипЗнч(пДанные) = Тип("Структура") Тогда
		пНастройки = вСформироватьСтруктуруНастроек();
		ЗаполнитьЗначенияСвойств(пНастройки, пДанные);
		ЗаполнитьЗначенияСвойств(ЭтаФорма, пНастройки);
	КонецЕсли;
КонецПроцедуры
