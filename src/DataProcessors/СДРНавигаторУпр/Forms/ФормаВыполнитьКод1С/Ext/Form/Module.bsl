&НаКлиенте
Перем мПутьКФайлуНастроек;

&НаКлиенте
Перем мЭлементДляОбработки;


&НаСервере
Функция вПолучитьОбработку()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаСервере
Функция вСформироватьОписаниеРазработки()
	пСтрук = новый Структура;
	пСтрук.Вставить("Наименование", "СДР: Выполнить код 1С");
	пСтрук.Вставить("НомерВерсии", "1.003");
	пСтрук.Вставить("ДатаВерсии", "30.03.2020");
	пСтрук.Вставить("Описание", "https://infostart.ru/profile/372296/");
	
	Возврат пСтрук;
КонецФункции

&НаСервере
Процедура вСформироватьЗаголовок()
	ЭтаФорма.Заголовок = СтрШаблон("%1 (%2 от %3)", _ОписаниеРазработки.Наименование, _ОписаниеРазработки.НомерВерсии, _ОписаниеРазработки.ДатаВерсии);
КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	_ОписаниеРазработки = вСформироватьОписаниеРазработки();
	вСформироватьЗаголовок();
	
	ПутьКФормам = вПолучитьОбработку().Метаданные().ПолноеИмя() + ".Форма.";
	
	_ИспользоватьПопыткуДляАлгоритма = истина;
	_ВыполнятьАлгоритмНаСервере = ложь;
	
	вПодключитьНестандартнуюФормуВыбораТипа();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	#Если ВебКлиент Тогда
		_ВыполнятьАлгоритмНаСервере = истина;
		Элементы._ВыполнятьАлгоритмНаСервере.ТолькоПросмотр = истина;
	#КонецЕсли
КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
Функция вПолучитьИмяОбработки()
	Возврат "СДРВыполнитьКод1С";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция вСообщитьОбОшибке(Текст)
	Сообщить(Текст, СтатусСообщения.Важное);
	Возврат ложь;
КонецФункции

&НаКлиенте
Процедура вПоказатьПредупреждение(ТекстПредупреждения)
	ПоказатьПредупреждение(, ТекстПредупреждения, 20);
КонецПроцедуры


&НаКлиенте
Процедура _ВыполнитьАлгоритм(Команда)
	вВыполнитьАлгоритм(ложь);
КонецПроцедуры

&НаКлиенте
Процедура _ПроверитьАлгоритм(Команда)
	вВыполнитьАлгоритм(истина);
КонецПроцедуры

&НаКлиенте
Процедура вВыполнитьАлгоритм(пТолькоСинтаксическийКонтроль = ложь)
	пВыражение = Элементы._Алгоритм.ВыделенныйТекст;
	Если ПустаяСтрока(пВыражение) Тогда
		пВыражение = _Алгоритм;
	КонецЕсли;
	
	Если не ПустаяСтрока(пВыражение) Тогда
		Если пТолькоСинтаксическийКонтроль Тогда
			пВыражение = "Если ложь Тогда
			|" + пВыражение + "
			|КонецЕсли;";
		КонецЕсли;
		
		Если _ВыполнятьАлгоритмНаСервере Тогда
			пРезультат = вВыполнитьАлгоритмНаСервере(пВыражение, пТолькоСинтаксическийКонтроль);
		Иначе
			пРезультат = вВыполнитьАлгоритмНаКлиенте(пВыражение, пТолькоСинтаксическийКонтроль);
		КонецЕсли;
		
		Если пТолькоСинтаксическийКонтроль и пРезультат Тогда
			вПоказатьПредупреждение("Проверка пройдена.");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция вВыполнитьАлгоритмНаКлиенте(Знач пВыражение, Знач пТолькоСинтаксическийКонтроль = ложь)
	#Если ВебКлиент Тогда
		_ВыполнятьАлгоритмНаСервере = истина;
		вПоказатьПредупреждение("Для Web-клиента возможно выполнение алгоритма только на сервере!");
		Возврат ложь;
	#КонецЕсли
	
	Если _ИспользоватьПопыткуДляАлгоритма Тогда
		Попытка
			Выполнить(пВыражение);
		Исключение
			Возврат вСообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	Иначе
		Выполнить(пВыражение);
	КонецЕсли;
	
	Возврат истина;
КонецФункции

&НаСервере
Функция вВыполнитьАлгоритмНаСервере(Знач пВыражение, Знач пТолькоСинтаксическийКонтроль = ложь)
	Если _ИспользоватьПопыткуДляАлгоритма Тогда
		Попытка
			Выполнить(пВыражение);
		Исключение
			Возврат вСообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	Иначе
		Выполнить(пВыражение);
	КонецЕсли;
	
	Возврат истина;
КонецФункции


&НаКлиенте
Процедура _ПараметрыАлгоритма(Команда)
	Струк = новый Структура("мДата, мДатаВремя, мПланОбмена, мДокумент, мПланВидовХарактеристик, мПланВидовРасчета, мПеречисление, мСписокЗначений, мСправочник, мПланСчетов, мБизнесПроцесс, мЗадача, мЧисло");
	
	СписокЗначений = новый СписокЗначений;
	Для каждого Элем из Струк Цикл
		СписокЗначений.Добавить(Элем.Ключ);
	КонецЦикла;
	СписокЗначений.СортироватьПоЗначению();
	
	СписокЗначений.ПоказатьВыборЭлемента(новый ОписаниеОповещения("вОбработатьВыборПараметраАлгоритма", ЭтаФорма), "Параметр алгоритма");
КонецПроцедуры

&НаКлиенте
Процедура вОбработатьВыборПараметраАлгоритма(ВыбранныйЭлемент, ДопПараметры = Неопределено) Экспорт
	Если ВыбранныйЭлемент <> Неопределено Тогда
		Элементы._Алгоритм.ВыделенныйТекст = ВыбранныйЭлемент.Значение;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ОткрытьКонструкторФорматнойСтроки(Команда)
	пТекст = Элементы._Алгоритм.ВыделенныйТекст;
	пКонструкторФорматнойСтроки = новый КонструкторФорматнойСтроки(пТекст);
	
	пОписаниеОповещения = новый ОписаниеОповещения("вОбработатьВыборФорматнойСтроки", ЭтаФорма);
	пКонструкторФорматнойСтроки.Показать(пОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура вОбработатьВыборФорматнойСтроки(пТекст, пДопПарам = Неопределено) Экспорт
	Если пТекст <> Неопределено Тогда
		Элементы._Алгоритм.ВыделенныйТекст = пТекст;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ВставитьУникальныйИдентификатор(Команда)
	Элементы._Алгоритм.ВыделенныйТекст = Строка(новый УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура _ПрописныеБуквы(Команда)
	Элементы._Алгоритм.ВыделенныйТекст = ВРег(Элементы._Алгоритм.ВыделенныйТекст);
КонецПроцедуры

&НаКлиенте
Процедура _СтрочныеБуквы(Команда)
	Элементы._Алгоритм.ВыделенныйТекст = НРег(Элементы._Алгоритм.ВыделенныйТекст);
КонецПроцедуры


&НаКлиенте
Процедура _ЗагрузитьИзФайла(Команда)
	Диалог = вПолучитьДиалогВыбораФайлаXML(истина, мПутьКФайлуНастроек);
	Диалог.Показать(новый ОписаниеОповещения("вЗагрузитьДанныеИзФайла", ЭтаФорма));
КонецПроцедуры

&НаКлиенте
Процедура _СохранитьВФайл(Команда)
	Диалог = вПолучитьДиалогВыбораФайлаXML(ложь, мПутьКФайлуНастроек);
	Диалог.Показать(новый ОписаниеОповещения("вВыгрузитьОбъектВФайл", ЭтаФорма));
КонецПроцедуры

&НаКлиенте
Функция вПолучитьДиалогВыбораФайлаXML(Открытие = истина, ПутьКФайлу = "")
	Диалог = новый ДиалогВыбораФайла(?(Открытие, РежимДиалогаВыбораФайла.Открытие, РежимДиалогаВыбораФайла.Сохранение));
	
	Диалог.ПолноеИмяФайла = ПутьКФайлу;
	Диалог.Заголовок  = "Файл данных XML";
	Диалог.Фильтр     = "Файлы данных XML (*.xml)|*.xml|Все файлы (*.*)|*.*";
	Диалог.Расширение = "xml";
	
	Возврат Диалог;
КонецФункции

&НаКлиенте
Процедура вВыгрузитьОбъектВФайл(ВыбранныеФайлы, пДопПарам = Неопределено) Экспорт
	Если ВыбранныеФайлы <> Неопределено Тогда
		мПутьКФайлуНастроек = ВыбранныеФайлы[0];
		
		СтрокаXML = вСформироватьВыгрузкуXML();
		Если не ПустаяСтрока(СтрокаXML) Тогда
			пИмяФайла = ВыбранныеФайлы[0];
			
			ТДок = новый ТекстовыйДокумент;
			ТДок.УстановитьТекст(СтрокаXML);
			ТДок.НачатьЗапись(новый ОписаниеОповещения("вПослеОкончанияЗаписиФайла", ЭтаФорма), пИмяФайла, "UTF-8");
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура вЗагрузитьДанныеИзФайла(ВыбранныеФайлы, ДопПарам = Неопределено) Экспорт
	Если ВыбранныеФайлы <> Неопределено Тогда
		пИмяФайла = ВыбранныеФайлы[0];
		мПутьКФайлуНастроек = пИмяФайла;
		
		ТДок = новый ТекстовыйДокумент;
		ТДок.НачатьЧтение(новый ОписаниеОповещения("вПослеОкончанияЧтенияФайла", ЭтаФорма, ТДок), пИмяФайла, "UTF-8");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура вПослеОкончанияЗаписиФайла(Результат, ДопПарам = Неопределено) Экспорт
	Если Результат = истина Тогда
		вПоказатьПредупреждение("Настройки выгружены в файл");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вПослеОкончанияЧтенияФайла(ТДок) Экспорт
	Если ТипЗнч(ТДок) = Тип("ТекстовыйДокумент") Тогда
		СтрокаXML = ТДок.ПолучитьТекст();
		Если не ПустаяСтрока(СтрокаXML) Тогда
			вЗагрузитьДанныеXML(СтрокаXML);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция вСформироватьВыгрузкуXML()
	
	пПереченьПолей = "Формат,
	|мБизнесПроцесс, мДата, мДатаВремя, мДокумент, мЗадача, мПеречисление, мПланВидовРасчета, мПланВидовХарактеристик, мСписокЗначений, мСписокЗначений, мСправочник, мПланСчетов, мЧисло,
	|_Алгоритм, _ИспользоватьПопыткуДляАлгоритма, _ВыполнятьАлгоритмНаСервере";
	
	пСтрукДанные = новый Структура(пПереченьПолей);
	ЗаполнитьЗначенияСвойств(пСтрукДанные, ЭтаФорма);
	пСтрукДанные.Формат = вПолучитьИмяОбработки();
	
	ЗаписьXML = новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("_1CV8DtUD", "http://www.1c.ru/V8/1CV8DtUD/");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("V8Exch", "http://www.1c.ru/V8/1CV8DtUD/");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("core", "http://v8.1c.ru/data");
	
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("v8", "http://v8.1c.ru/8.1/data/enterprise/current-config");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xs", "http://www.w3.org/2001/XMLSchema");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("V8Exch:Data");
	
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, пСтрукДанные);
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); // V8Exc:Data
	ЗаписьXML.ЗаписатьКонецЭлемента(); // V8Exc:_1CV8DtUD
	
	СтрокаXML = ЗаписьXML.Закрыть();
	
	Возврат СтрокаXML;
КонецФункции

&НаСервере
Процедура вЗагрузитьДанныеXML(Знач СтрокаXML)
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	
	пОшибкаФормата = ложь;
	пСтрокаНеверныйФормат = НСтр("ru = 'Неверный формат файла данных'");
	
	Попытка
		// проверка формата
		Если пОшибкаФормата
			или не ЧтениеXML.Прочитать()
			или ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента
			или ЧтениеXML.ЛокальноеИмя <> "_1CV8DtUD"
			или ЧтениеXML.URIПространстваИмен <> "http://www.1c.ru/V8/1CV8DtUD/" Тогда
			
			пОшибкаФормата = истина;
		КонецЕсли;
		
		Если пОшибкаФормата
			или не ЧтениеXML.Прочитать()
			или ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента
			или ЧтениеXML.ЛокальноеИмя <> "Data" Тогда
			
			пОшибкаФормата = истина;
		КонецЕсли;
		
		Если пОшибкаФормата или не ЧтениеXML.Прочитать() Тогда
			
			пОшибкаФормата = истина;
		КонецЕсли;
		
	Исключение
		пОшибкаФормата = истина;
	КонецПопытки;
	
	Если пОшибкаФормата Тогда
		Сообщить(пСтрокаНеверныйФормат, СтатусСообщения.Важное);
		ЧтениеXML.Закрыть();
		Возврат;
	КонецЕсли;
	
	
	// чтение данных
	пЗначение = Неопределено;
	Пока СериализаторXDTO.ВозможностьЧтенияXML(ЧтениеXML) Цикл
		Попытка
			пСтрукДата = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
			
			Если ТипЗнч(пСтрукДата) = Тип("Структура") и пСтрукДата.Свойство("Формат", пЗначение) и пЗначение = вПолучитьИмяОбработки() Тогда
				ЗаполнитьЗначенияСвойств(ЭтаФорма, пСтрукДата);
				
				пСтрук = новый Структура(вПереченьОсобыхРеквизитов());
				
				Для каждого Элем из пСтрук Цикл
					пЗначение = ЭтаФорма[Элем.Ключ];
					Если пЗначение <> Неопределено Тогда
						пМассив = новый Массив;
						пМассив.Добавить(ТипЗнч(пЗначение));
						
						пОписаниеТипов = новый ОписаниеТипов(пМассив);
					Иначе
						пОписаниеТипов = новый ОписаниеТипов;
					КонецЕсли;
					Элементы[Элем.Ключ].ОграничениеТипа = пОписаниеТипов;
					ЭтаФорма[Элем.Ключ] = пЗначение;
				КонецЦикла;
				
			Иначе
				пОшибкаФормата = истина;
				Сообщить(пСтрокаНеверныйФормат, СтатусСообщения.Важное);
				Прервать;
			КонецЕсли;
		Исключение
			пОшибкаФормата = истина;
			Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), СтатусСообщения.Важное);
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	Если пОшибкаФормата Тогда
		ЧтениеXML.Закрыть();
		Возврат;
	КонецЕсли;
	
	
	// проверка формата
	Если пОшибкаФормата
		или ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента
		или ЧтениеXML.ЛокальноеИмя <> "Data" Тогда
		
		пОшибкаФормата = истина;
	КонецЕсли;
	
	Если пОшибкаФормата
		или не ЧтениеXML.Прочитать()
		или ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента
		или ЧтениеXML.ЛокальноеИмя <> "_1CV8DtUD"
		или ЧтениеXML.URIПространстваИмен <> "http://www.1c.ru/V8/1CV8DtUD/" Тогда
		
		пОшибкаФормата = истина;
	КонецЕсли;
	
	Если пОшибкаФормата Тогда
		Сообщить(пСтрокаНеверныйФормат, СтатусСообщения.Важное);
		ЧтениеXML.Закрыть();
		Возврат;
	КонецЕсли;
	
	ЧтениеXML.Закрыть();
КонецПроцедуры


// НЕСТАНДАРТНАЯ ФОРМА ВЫБОРА ТИПА
&НаКлиентеНаСервереБезКонтекста
Функция вПереченьОсобыхРеквизитов()
	Возврат "мПланОбмена, мСправочник, мДокумент, мПеречисление, мПланВидовХарактеристик, мПланВидовРасчета, мПланСчетов, мБизнесПроцесс, мЗадача";
КонецФункции

&НаСервере
Процедура вПодключитьНестандартнуюФормуВыбораТипа()
	пСтрук = новый Структура(вПереченьОсобыхРеквизитов());
	Для каждого Элем из пСтрук Цикл
		Элементы[Элем.Ключ].УстановитьДействие("Очистка", "вПараметрОчистка");
		Элементы[Элем.Ключ].УстановитьДействие("НачалоВыбора", "вПараметрНачалоВыбора");
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура вПараметрОчистка(Элемент, СтандартнаяОбработка)
	Элемент.ОграничениеТипа = новый ОписаниеТипов();
КонецПроцедуры

&НаКлиенте
Процедура вПараметрНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	пЗначение = ЭтаФорма[Элемент.Имя];
	Если пЗначение = Неопределено и Элемент.ОграничениеТипа.Типы().Количество() = 0 Тогда
		СтандартнаяОбработка = ложь;
		
		пРазделМД = вСформироватьИмяРазделаМД(Элемент.Имя);
		Если не ПустаяСтрока(пРазделМД) Тогда
			мЭлементДляОбработки = Элемент;
			
			пСтрук = новый Структура("ЗакрыватьПриЗакрытииВладельца", истина);
			пСтрук.Вставить("РазделМД", пРазделМД);
			
			ОткрытьФорму(ПутьКФормам + "ФормаВыбораТипаОбъекта", пСтрук, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	ЭФ = мЭлементДляОбработки;
	пИмя = Сред(ЭФ.Имя, 2) + "Ссылка." + ВыбранноеЗначение;
	
	пОписаниеТипов = новый ОписаниеТипов(пИмя);
	ЭФ.ОграничениеТипа = пОписаниеТипов;
	ЭтаФорма[Эф.Имя] = пОписаниеТипов.ПривестиЗначение();
КонецПроцедуры

&НаКлиенте
Процедура вОбработатьВыборТипа(ВыбранныйЭлемент, ЭФ) Экспорт
	Если ВыбранныйЭлемент <> Неопределено Тогда
		пИмя = Сред(ЭФ.Имя, 2) + "Ссылка." + ВыбранныйЭлемент.Значение;
		
		пОписаниеТипов = новый ОписаниеТипов(пИмя);
		ЭФ.ОграничениеТипа = пОписаниеТипов;
		ЭтаФорма[Эф.Имя] = пОписаниеТипов.ПривестиЗначение();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция вСформироватьИмяРазделаМД(Знач пИмяЭФ)
	Если пИмяЭФ = "мПланОбмена" Тогда
		пРазделМД = "ПланыОбмена";
	ИначеЕсли пИмяЭФ = "мСправочник" Тогда
		пРазделМД = "Справочники";
	ИначеЕсли пИмяЭФ = "мДокумент" Тогда
		пРазделМД = "Документы";
	ИначеЕсли пИмяЭФ = "мПеречисление" Тогда
		пРазделМД = "Перечисления";
	ИначеЕсли пИмяЭФ = "мПланВидовРасчета" Тогда
		пРазделМД = "ПланыВидовРасчета";
	ИначеЕсли пИмяЭФ = "мПланВидовХарактеристик" Тогда
		пРазделМД = "ПланыВидовХарактеристик";
	ИначеЕсли пИмяЭФ = "мПланСчетов" Тогда
		пРазделМД = "ПланыСчетов";
	ИначеЕсли пИмяЭФ = "мБизнесПроцесс" Тогда
		пРазделМД = "БизнесПроцессы";
	ИначеЕсли пИмяЭФ = "мЗадача" Тогда
		пРазделМД = "Задачи";
	Иначе
		пРазделМД = "";
	КонецЕсли;
	
	Возврат пРазделМД;
КонецФункции

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	пСтрук = новый Структура(вПереченьОсобыхРеквизитов());
	
	Для каждого Элем из пСтрук Цикл
		пЗначение = Настройки[Элем.Ключ];
		Если пЗначение <> Неопределено Тогда
			пМассив = новый Массив;
			пМассив.Добавить(ТипЗнч(пЗначение));
			
			пОписаниеТипов = новый ОписаниеТипов(пМассив);
			
			Элементы[Элем.Ключ].ОграничениеТипа = пОписаниеТипов;
			ЭтаФорма[Элем.Ключ] = пОписаниеТипов.ПривестиЗначение(пЗначение);
		ИНаче
			Элементы[Элем.Ключ].ОграничениеТипа =новый ОписаниеТипов;
			ЭтаФорма[Элем.Ключ] = Неопределено;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
