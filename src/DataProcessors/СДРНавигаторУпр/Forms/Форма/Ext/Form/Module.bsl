&НаКлиенте
Перем мОбычныеПрикладныеОбъекты;

&НаКлиенте
Перем мТекущийОбъектДерева;

&НаКлиенте
Перем мОписаниеПравДоступа;

&НаКлиенте
Перем мИдентификаторИзбранного;

&НаКлиенте
Перем мПараметрыКластера1С;


&НаСервере
Функция вПолучитьОбработку()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

#Область ОписаниеОбработки

&НаСервере
Процедура вСформироватьОписаниеРазработки()
	_ОписаниеРазработки = вПолучитьОбработку().вСформироватьОписаниеРазработки();
КонецПроцедуры

&НаКлиенте
Процедура _ОписаниеРазработкиНажатие(Элемент)
	СтрокаURL = _ОписаниеРазработки.Описание;
	Если не ПустаяСтрока(СтрокаURL) Тогда
		вВыполнитьПереходURL(СтрокаURL);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вВыполнитьПереходURL(СтрокаURL)
	Если ЗначениеЗаполнено(СтрокаURL) Тогда
		Попытка
			НачатьЗапускПриложения(новый ОписаниеОповещения("вПустойОбработчикОповещения", ЭтаФорма), СтрокаURL);
		Исключение
			Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вПустойОбработчикОповещения(КодВозврата = Неопределено, ДопПарам = Неопределено) Экспорт
	Возврат;
КонецПроцедуры

#КонецОбласти


&НаСервере
Процедура вСформироватьЗаголовок()
	ЭтаФорма.Заголовок = СтрШаблон("%1 (%2 от %3)", _ОписаниеРазработки.Наименование, _ОписаниеРазработки.НомерВерсии, _ОписаниеРазработки.ДатаВерсии);
КонецПроцедуры

&НаКлиенте
Процедура вПоказатьПредупреждение(Текст)
	ПоказатьПредупреждение(, Текст, 20);
КонецПроцедуры

&НаКлиенте
Процедура вПоказатьВопрос(ТекстВопроса, ИмяПроцедуры, ДопПараметры = Неопределено)
	ПоказатьВопрос(новый ОписаниеОповещения(ИмяПроцедуры, ЭтаФорма, ДопПараметры), ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, 20);
КонецПроцедуры

&НаКлиенте
Процедура вОперацияНеПоддерживаетсяДляВебКлиента()
	вПоказатьПредупреждение("Для Web-клиента данная операция не поддерживается!");
КонецПроцедуры

&НаСервереБезКонтекста
Процедура вЗаполнитьКонтекстФормы(СтрукКонтекст)
	СтрукКонтекст.Вставить("ВерсииПодсистем", (Метаданные.РегистрыСведений.Найти("ВерсииПодсистем") <> Неопределено));
	СтрукКонтекст.Вставить("МонопольныйРежим", МонопольныйРежим());
КонецПроцедуры

&НаСервереБезКонтекста
Функция вЕстьПраваАдминистратора()
	Возврат ПравоДоступа("Администрирование", Метаданные);
КонецФункции

&НаСервереБезКонтекста
Функция вПолучитьИдентификаторПользователя(Знач Имя)
	пПользователь = ПользователиИнформационнойБазы.НайтиПоИмени(Имя);
	
	Возврат ?(пПользователь = Неопределено, "", Строка(пПользователь.УникальныйИдентификатор));
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция вЗначениеВМассив(Знач Значение)
	Массив = новый Массив;
	Массив.Добавить(Значение);
	
	Возврат Массив;
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	ЭтаФорма.УсловноеОформление.Элементы.Очистить();
	
	ЭлементУО = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = новый ПолеКомпоновкиДанных("ДеревоОбъектов.ПолноеИмя");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = "Конфигурация";
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", новый Шрифт(Элементы.ДеревоСервис.Шрифт,,,истина));
	ЭлементУО.Поля.Элементы.Добавить().Поле = новый ПолеКомпоновкиДанных("ДеревоОбъектовИмя");
	
	ЭлементУО = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = новый ПолеКомпоновкиДанных("ДеревоОбъектов.ТипУзла");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = 1;
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ТемноСиний);
	ЭлементУО.Поля.Элементы.Добавить().Поле = новый ПолеКомпоновкиДанных("ДеревоОбъектовИмя");
	
	ЭлементУО = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = новый ПолеКомпоновкиДанных("ДеревоСервис.ЭтоГруппа");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = истина;
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", новый Шрифт(Элементы.ДеревоСервис.Шрифт,,,истина));
	ЭлементУО.Поля.Элементы.Добавить().Поле = новый ПолеКомпоновкиДанных("ДеревоСервисПредставление");
	
	ЭлементУО = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = новый ПолеКомпоновкиДанных("ДеревоСервис.Доступность");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = ложь;
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", новый Цвет(83, 106, 194));
	ЭлементУО.Поля.Элементы.Добавить().Поле = новый ПолеКомпоновкиДанных("ДеревоСервисПредставление");
	
	ЭлементУО = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = новый ПолеКомпоновкиДанных("ТабПроверяемыеПрава.Пометка");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = истина;
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", новый Шрифт(Элементы.ТабПроверяемыеПрава.Шрифт,,,истина));
	ЭлементУО.Поля.Элементы.Добавить().Поле = новый ПолеКомпоновкиДанных("ТабПроверяемыеПраваОбъектМД");
	ЭлементУО.Поля.Элементы.Добавить().Поле = новый ПолеКомпоновкиДанных("ТабПроверяемыеПраваПраво");
	
	ЭлементУО = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = новый ПолеКомпоновкиДанных("_СписокСеансов.ТекущийСеанс");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = истина;
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Синий);
	ЭлементУО.Поля.Элементы.Добавить().Поле = новый ПолеКомпоновкиДанных("_СписокСеансов");
	
	ЭлементУО = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = новый ПолеКомпоновкиДанных("_СписокСоединений.ТекущееСоединение");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = истина;
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Синий);
	ЭлементУО.Поля.Элементы.Добавить().Поле = новый ПолеКомпоновкиДанных("_СписокСоединений");
	
КонецПроцедуры

&НаКлиенте
Функция вСформироватьСтруктуруНастроекФормыСвойствОбъекта()
	Струк = новый Структура("_ПоказыватьПодпискиОбъекта, _ПоказыватьПодсистемыОбъекта, _ПоказыватьОбщиеКомандыОбъекта, _ПоказыватьЧужиеКомандыОбъекта, _ПоказыватьСтруктуруХраненияВТерминах1С");
	ЗаполнитьЗначенияСвойств(Струк, ЭтаФорма);
	
	Возврат Струк;
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	вСформироватьОписаниеРазработки();
	вСформироватьЗаголовок();
	
	ПутьКФормам = вПолучитьОбработку().Метаданные().ПолноеИмя() + ".Форма.";
	
	пЕстьПраваАдминистратора = вЕстьПраваАдминистратора();
	
	//Элементы.СтрНастройки.Видимость = ложь;
	Элементы.СтрСтруктураХранения.Видимость = ложь;
	Элементы.СтраницыПраваНаОбъект.Видимость = ложь;
	Элементы._ОтображатьПраваНаОбъекты.Доступность = пЕстьПраваАдминистратора;
	Элементы.ДеревоОбъектовАдминистраторам.Доступность = пЕстьПраваАдминистратора;
	Элементы.СтрПользователиИБ.Видимость = пЕстьПраваАдминистратора;
	Элементы._СписокСеансов_ЗавершитьСеансы.Доступность = пЕстьПраваАдминистратора;
	Элементы.СтрСеансы.Видимость = ПравоДоступа("АктивныеПользователи", Метаданные);
	Элементы._СписокСеансов_ЗавершитьСеансы.Доступность = пЕстьПраваАдминистратора;
	
	Элементы.СтрРасширенияКонфигурации.Видимость = ложь;
	//Элементы.СтрРасширенияКонфигурации.Видимость = вПроверитьНаличиеТипа("РасширениеКонфигурации");
	
	_ОтборПоПодсистемам = новый Структура("ЕстьОтбор", ложь);
	
	_КонтекстФормы = новый Структура;
	вЗаполнитьКонтекстФормы(_КонтекстФормы);
	вЗаполнитьДеревоСервис();
	
	_СодержимоеИзбранного = новый Структура("Версия, Данные", 1, новый Массив);
	
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	Если _ПоказыватьСтандартныеНастройки Тогда
		Элементы.СтрСтандартныеНастройки.Видимость = истина;
	КонецЕсли;
	
	Если _ПоказыватьТаблицыИИндексыБД Тогда
		Элементы.СтрСтруктураХранения.Видимость = истина;
	КонецЕсли;
	
	Значение = Настройки["_СодержимоеИзбранного"];
	Если Значение <> Неопределено Тогда
		Если не Значение.Свойство("Версия") Тогда
			Значение.Вставить("Версия", 1);
		КонецЕсли;
		_СодержимоеИзбранного = Значение;
		
		СтрокиДЗ = ДеревоОбъектов.ПолучитьЭлементы();
		Если СтрокиДЗ.Количество() <> 0 Тогда
			// перезаполним избранное
			Для каждого РазделДЗ из СтрокиДЗ Цикл
				Если РазделДЗ.ПолноеИмя = "Избранное" Тогда
					РазделДЗ.ПолучитьЭлементы().Очистить();
					Для каждого Элем из _СодержимоеИзбранного.Данные Цикл
						ЗаполнитьЗначенияСвойств(РазделДЗ.ПолучитьЭлементы().Добавить(), Элем);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Элементы._СписокПользователейИБПереченьРолей.Видимость = _ПоказыватьСписокРолейПользователя;
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	// сформируем избранное
	Для каждого РазделДЗ из ДеревоОбъектов.ПолучитьЭлементы() Цикл
		Если РазделДЗ.ПолноеИмя = "Избранное" Тогда
			ПереченьПолейУзлаДЗ = вПереченьПолейУзлаДЗ();
			_СодержимоеИзбранного.Данные.Очистить();
			Для каждого СтрДЗ из РазделДЗ.ПолучитьЭлементы() Цикл
				Струк = новый Структура(ПереченьПолейУзлаДЗ);
				ЗаполнитьЗначенияСвойств(Струк, СтрДЗ);
				_СодержимоеИзбранного.Данные.Добавить(Струк);
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Настройки.Вставить("_СодержимоеИзбранного", _СодержимоеИзбранного);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	мТекущийОбъектДерева = "";
	
	вСформироватьОписаниеПравДоступа();
	вЗаполнитьПроверяемыеПраваДоступа();
	
	мОбычныеПрикладныеОбъекты = новый Структура("Константа, Справочник, Документ, ЖурналДокументов, ПланВидовХарактеристик, ПланВидовРасчета, ПланСчетов
	|, Обработка, Отчет, РегистрСведений, РегистрНакопления, РегистрБухгалтерии, РегистрРасчета, БизнесПроцесс, Задача
	|, ПланОбмена");
	
	вЗаполнитьДеревоОбъектов();
	
	_АдресаХранилищ = новый Структура("Движения, Подписки, Команды, ОбщиеКоманды, Подсистемы, ОбщиеРеквизиты, РолиИПользователи");
	_АдресаХранилищ.Движения = ПоместитьВоВременноеХранилище(-1, УникальныйИдентификатор);
	_АдресаХранилищ.Подписки = ПоместитьВоВременноеХранилище(-1, УникальныйИдентификатор);
	_АдресаХранилищ.Команды  = ПоместитьВоВременноеХранилище(-1, УникальныйИдентификатор);
	_АдресаХранилищ.ОбщиеКоманды = ПоместитьВоВременноеХранилище(-1, УникальныйИдентификатор);
	_АдресаХранилищ.Подсистемы = ПоместитьВоВременноеХранилище(-1, УникальныйИдентификатор);
	_АдресаХранилищ.ОбщиеРеквизиты = ПоместитьВоВременноеХранилище(-1, УникальныйИдентификатор);
	_АдресаХранилищ.РолиИПользователи = "";
	
	// хранилища настроек
	СтрокиДЗ = ДеревоНастроек.ПолучитьЭлементы();
	СтрокиДЗ.Очистить();
	
	ГруппаДЗ = СтрокиДЗ.Добавить();
	ГруппаДЗ.Представление = "Стандартные хранилища настроек";
	
	СтрукРазделы = новый Структура("ХранилищеВариантовОтчетов, ХранилищеНастроекДанныхФорм, ХранилищеОбщихНастроек
	|, ХранилищеПользовательскихНастроекДинамическихСписков, ХранилищеПользовательскихНастроекОтчетов, ХранилищеСистемныхНастроек");
	
	Для каждого Элем из СтрукРазделы Цикл
		СтрДЗ = ГруппаДЗ.ПолучитьЭлементы().Добавить();
		СтрДЗ.Имя = Элем.Ключ;
		СтрДЗ.Представление = Элем.Ключ;
		СтрДЗ.ВидУзла = "Х";
	КонецЦикла;
	
	_ПоискВДеревеОбъектовПриВводеПриИзменении(Неопределено);
	
	вЗаполнитьДеревоСервисНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура вЗаполнитьДеревоСервисНаКлиенте()
	КореньДЗ = ДеревоСервис;
	
	// клиент
	УзелДЗ = КореньДЗ.ПолучитьЭлементы().Добавить();
	УзелДЗ.Картинка = -1;
	УзелДЗ.ЭтоГруппа = истина;
	УзелДЗ.Доступность = истина;
	УзелДЗ.Представление = "Системная информация (клиент)";
	
	пСтрук = новый Структура("Клиент, База, ИмяКомпьютера, Пользователь, ВерсияОС, ВерсияПриложения, ИдентификаторКлиента, ИнформацияПрограммыПросмотра, ОперативнаяПамять, Процессор, ТипПлатформы");
	пСтрук.База = СтрокаСоединенияИнформационнойБазы();
	пСтрук.Пользователь = ИмяПользователя();
	#Если ВебКлиент Тогда
		пСтрук.ИмяКомпьютера = "<недоступно>";
	#Иначе
		пСтрук.ИмяКомпьютера = ИмяКомпьютера();
	#КонецЕсли
	
	#Если ТонкийКлиент Тогда
		пСтрук.Клиент = "тонкий клиент";
	#ИначеЕсли ВебКлиент Тогда
		пСтрук.Клиент = "web клиент";
	#ИначеЕсли ТолстыйКлиентОбычноеПриложение Тогда
		пСтрук.Клиент = "обычное приложение";
	#ИначеЕсли ТолстыйКлиентУправляемоеПриложение Тогда
		пСтрук.Клиент = "толстый клиент";
	#КонецЕсли
	
	пСистемнаяИнформация = новый СистемнаяИнформация();
	ЗаполнитьЗначенияСвойств(пСтрук, пСистемнаяИнформация);
	
	Для каждого Элем из пСтрук Цикл
		СтрДЗ = УзелДЗ.ПолучитьЭлементы().Добавить();
		СтрДЗ.Доступность = ложь;
		СтрДЗ.Представление = Элем.Ключ + ": " + Элем.Значение;
	КонецЦикла;
	
	
	// сервер
	УзелДЗ = КореньДЗ.ПолучитьЭлементы().Добавить();
	УзелДЗ.Картинка = -1;
	УзелДЗ.ЭтоГруппа = истина;
	УзелДЗ.Доступность = истина;
	УзелДЗ.Представление = "Системная информация (сервер)";
	
	пСтрук = вПолучитьСистемнуюИнформацию();
	
	Для каждого Элем из пСтрук Цикл
		СтрДЗ = УзелДЗ.ПолучитьЭлементы().Добавить();
		СтрДЗ.Доступность = ложь;
		СтрДЗ.Представление = Элем.Ключ + ": " + Элем.Значение;
	КонецЦикла;
	
	
	Для каждого УзелДЗ из КореньДЗ.ПолучитьЭлементы() Цикл
		Элементы.ДеревоСервис.Развернуть(УзелДЗ.ПолучитьИдентификатор());
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция вПолучитьСистемнуюИнформацию()
	пСтрук = новый Структура("Конфигурация, База, ИмяКомпьютера, ВерсияОС, ВерсияПриложения, ОперативнаяПамять, Процессор, ТипПлатформы");
	пСтрук.Конфигурация = ?(ПустаяСтрока(Метаданные.КраткаяИнформация), Метаданные.Имя, Метаданные.КраткаяИнформация)
	+ ?(ПустаяСтрока(Метаданные.Версия), "", " (" + Метаданные.Версия + ")");
	пСтрук.База = СтрокаСоединенияИнформационнойБазы();
	пСтрук.ИмяКомпьютера = ИмяКомпьютера();
	
	пСистемнаяИнформация = новый СистемнаяИнформация();
	ЗаполнитьЗначенияСвойств(пСтрук, пСистемнаяИнформация);
	пСтрук.ТипПлатформы = Строка(пСистемнаяИнформация.ТипПлатформы);
	
	Возврат пСтрук;
КонецФункции



&НаКлиенте
Процедура вЗаполнитьДеревоОбъектов()
	СтрокиДЗ = ДеревоОбъектов.ПолучитьЭлементы();
	СтрокиДЗ.Очистить();
	
	СтрДЗ = СтрокиДЗ.Добавить();
	ЗаполнитьЗначенияСвойств(СтрДЗ, вСформироватьУзелКонфигурация());
	СтрДЗ.ТипУзла = 1;
	
	
	// избранное
	СтрДЗ = СтрокиДЗ.Добавить();
	СтрДЗ.Имя = "Избранное...";
	СтрДЗ.ВидУзла = "Избранное";
	СтрДЗ.ТипУзла = 1;
	СтрДЗ.ПолноеИмя = "Избранное";
	мИдентификаторИзбранного = СтрДЗ.ПолучитьИдентификатор();
	
	Для каждого Элем из _СодержимоеИзбранного.Данные Цикл
		НС = СтрДЗ.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НС, Элем);
	КонецЦикла;
	
	
	СтрДЗ = СтрокиДЗ.Добавить();
	СтрДЗ.Имя = "Общие";
	СтрДЗ.ВидУзла = "ГруппаРазделовМД";
	СтрДЗ.ТипУзла = 1;
	СтрДЗ.ПолучитьЭлементы().Добавить();
	
	СтрукРазделы = новый Структура("Константы, Справочники, Документы, ЖурналыДокументов, Перечисления, ПланыВидовХарактеристик, ПланыВидовРасчета, ПланыСчетов
	|, Обработки, Отчеты, РегистрыСведений, РегистрыНакопления, РегистрыБухгалтерии, РегистрыРасчета, БизнесПроцессы, Задачи");
	
	вРассчитатьКоличествоОбъектовМД(СтрукРазделы);
	
	Для каждого Элем из СтрукРазделы Цикл
		СтрДЗ = СтрокиДЗ.Добавить();
		СтрДЗ.Имя = Элем.Ключ;
		СтрДЗ.Имя = Элем.Ключ + " (" + Элем.Значение + ")";
		СтрДЗ.ВидУзла = "РазделМД";
		СтрДЗ.ТипУзла = 1;
		СтрДЗ.ПолучитьЭлементы().Добавить();
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура _ПоказатьСведения(Команда)
	СтрукПарам = новый Структура("ОписаниеРазработки", _ОписаниеРазработки);
	ОткрытьФорму(ПутьКФормам + "ФормаОРазработке", СтрукПарам);
КонецПроцедуры

&НаКлиенте
Процедура кОткрытьВНовомОкне(Команда)
	ОткрытьФорму(ПутьКФормам,,,истина,,,,РежимОткрытияОкнаФормы.Независимый);
КонецПроцедуры

&НаКлиенте
Процедура _СвернутьВсеУзлы(Команда)
	Для каждого УзелДЗ из ДеревоОбъектов.ПолучитьЭлементы() Цикл
		Элементы.ДеревоОбъектов.Свернуть(УзелДЗ.ПолучитьИдентификатор());
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура _ОбновитьСписокПользователейИБ(Команда)
	Для каждого Стр из ДеревоОбъектов.ПолучитьЭлементы() Цикл
		Если Стр.Имя = "Общие" Тогда
			Для каждого УзелДЗ из Стр.ПолучитьЭлементы() Цикл
				Если УзелДЗ.ВидУзла = "РазделМД" и СтрНайти(УзелДЗ.Имя, "Пользователи") = 1 Тогда
					СтрокиДЗ = УзелДЗ.ПолучитьЭлементы();
					СтрокиДЗ.Очистить();
					
					Струк = вПолучитьСоставРазделаМД("Пользователи", _ОтборПоПодсистемам);
					Для каждого Элем из Струк.МассивОбъектов Цикл
						СтрДЗ = СтрокиДЗ.Добавить();
						ЗаполнитьЗначенияСвойств(СтрДЗ, Элем);
					КонецЦикла;
					УзелДЗ.Имя = "Пользователи (" + Струк.ЧислоОбъектов + ")";
					
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура _СоздатьПользователяИБ(Команда)
	СтрукПараметры = новый Структура("РежимРаботы", 1);
	ОткрытьФорму(ПутьКФормам + "ФормаПользовательИБ", СтрукПараметры,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура _СкопироватьПользователяИБ(Команда)
	ТекДанные = Элементы.ДеревоОбъектов.ТекущиеДанные;
	Если ТекДанные <> Неопределено и СтрНайти(ТекДанные.ПолноеИмя, "Пользователь.") = 1 Тогда
		СтрукПараметры = новый Структура("РежимРаботы, ИдентификаторПользователяИБ", 2, ТекДанные.ПредставлениеОбъекта);
		ОткрытьФорму(ПутьКФормам + "ФормаПользовательИБ", СтрукПараметры,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _УдалитьПользователяИБ(Команда)
	ТекДанные = Элементы.ДеревоОбъектов.ТекущиеДанные;
	Если ТекДанные <> Неопределено и СтрНайти(ТекДанные.ПолноеИмя, "Пользователь.") = 1 Тогда
		пТекст = СтрШаблон("Пользователь ""%1"" будет удален из информационной базы!
		|Продолжить?", ТекДанные.Имя);
		ПоказатьВопрос(новый ОписаниеОповещения("вУдалитьПользователяОтвет", ЭтаФорма, ТекДанные), пТекст, РежимДиалогаВопрос.ДаНетОтмена, 20);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вУдалитьПользователяОтвет(Ответ, ТекДанные) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		пРезультат = вУдалитьПользователяИБ(ТекДанные.ПредставлениеОбъекта);
		Если пРезультат.Отказ Тогда
			вПоказатьПредупреждение(пРезультат.ПричинаОтказа);
		Иначе
			ТекДанные.ПолучитьРодителя().ПолучитьЭлементы().Удалить(ТекДанные);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция вУдалитьПользователяИБ(Идентификатор)
	пРезультат = новый Структура("Отказ, ПричинаОтказа", ложь, "");
	
	Попытка
		пUUID = новый УникальныйИдентификатор(Идентификатор);
		
		пПользователь = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(пUUID);
		Если пПользователь = Неопределено Тогда
			пРезультат.Отказ = истина;
			пРезультат.ПричинаОтказа = "Указанный пользователь не найден!";
			Возврат пРезультат;
		КонецЕсли;
		
		пТекПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
		
		Если пТекПользователь.УникальныйИдентификатор = пUUID Тогда
			пРезультат.Отказ = истина;
			пРезультат.ПричинаОтказа = "Нельзя удалить текущего пользоватля!";
			Возврат пРезультат;
		КонецЕсли;
		
		пПользователь.Удалить();
	Исключение
		пРезультат.Отказ = истина;
		пРезультат.ПричинаОтказа = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат пРезультат;
КонецФункции


&НаКлиенте
Процедура кПоказатьСвойстваОбъекта(Команда)
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя = "СтрСтруктураХранения" Тогда
		ТекДанные = Неопределено;
		Если Элементы.ГруппаТаблицыИИндексы.ТекущаяСтраница.Имя = "СтрИндексы" Тогда
			ТекДанные = Элементы._СХИндексы.ТекущиеДанные;
		ИначеЕсли Элементы.ГруппаТаблицыИИндексы.ТекущаяСтраница.Имя = "СтрТаблицы" Тогда
			ТекДанные = Элементы._СХТаблицы.ТекущиеДанные;
		КонецЕсли;
		
		Если ТекДанные <> Неопределено Тогда
			пПолноеИмя = ТекДанные.Метаданные;
			Если пПолноеИмя = "<не задано>" Тогда
				Возврат;
			КонецЕсли;
			
			Поз = СтрНайти(пПолноеИмя, ".",,,2);
			Если Поз <> 0 Тогда
				пПолноеИмя = Лев(пПолноеИмя, Поз-1);
			КонецЕсли;
			
			СтрукПараметры = новый Структура("ПолноеИмя, ПутьКФормам, _АдресаХранилищ, ОписаниеПравДоступа", пПолноеИмя, ПутьКФормам, _АдресаХранилищ, мОписаниеПравДоступа);
			СтрукПараметры.Вставить("НастройкиОбработки", вСформироватьСтруктуруНастроекФормыСвойствОбъекта());
			ОткрытьФорму(ПутьКФормам + "ФормаСвойств", СтрукПараметры,,пПолноеИмя,,,,РежимОткрытияОкнаФормы.Независимый);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элементы.ДеревоОбъектов.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если ТекДанные.ВидУзла = "ОбъектМД" Тогда
			Если СтрНайти(ТекДанные.ПолноеИмя, "Пользователь.") = 1 Тогда
				СтрукПараметры = новый Структура("ИдентификаторПользователяИБ", ТекДанные.ПредставлениеОбъекта);
				ОткрытьФорму(ПутьКФормам + "ФормаПользовательИБ", СтрукПараметры,,ТекДанные.ПолноеИмя,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			Иначе
				СтрукПараметры = новый Структура("ПолноеИмя, ПутьКФормам, _АдресаХранилищ, ОписаниеПравДоступа", ТекДанные.ПолноеИмя, ПутьКФормам, _АдресаХранилищ, мОписаниеПравДоступа);
				СтрукПараметры.Вставить("НастройкиОбработки", вСформироватьСтруктуруНастроекФормыСвойствОбъекта());
				ОткрытьФорму(ПутьКФормам + "ФормаСвойств", СтрукПараметры,,ТекДанные.ПолноеИмя,,,,РежимОткрытияОкнаФормы.Независимый);
			КонецЕсли;
		ИначеЕсли ТекДанные.ВидУзла = "Конфигурация" Тогда
			СтрукПараметры = новый Структура("ПолноеИмя, ПутьКФормам, _АдресаХранилищ, ОписаниеПравДоступа", "Конфигурация",  ПутьКФормам, _АдресаХранилищ, мОписаниеПравДоступа);
			СтрукПараметры.Вставить("НастройкиОбработки", вСформироватьСтруктуруНастроекФормыСвойствОбъекта());
			ОткрытьФорму(ПутьКФормам + "ФормаСвойств", СтрукПараметры,,ТекДанные.ПолноеИмя,,,,РежимОткрытияОкнаФормы.Независимый);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура кОткрытьФормуСписка(Команда)
	ТекДанные = Элементы.ДеревоОбъектов.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если ТекДанные.ВидУзла = "ОбъектМД" и не вЭтоПрочаяКоманда(ТекДанные.ПолноеИмя) Тогда
			Попытка
				ВидОбъектМД = Лев(ТекДанные.ПолноеИмя, СтрНайти(ТекДанные.ПолноеИмя, ".")-1);
				
				Если ВидОбъектМД = "Пользователь" Тогда
					СтандартнаяОбработка = ложь;
					СтрукПараметры = новый Структура("ИдентификаторПользователяИБ", ТекДанные.ПредставлениеОбъекта);
					ОткрытьФорму(ПутьКФормам + "ФормаПользовательИБ", СтрукПараметры,,ТекДанные.ПолноеИмя,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
					Возврат;
				КонецЕсли;
				
				Если не мОбычныеПрикладныеОбъекты.Свойство(ВидОбъектМД) Тогда
					Возврат;
				КонецЕсли;
				
				Если ВидОбъектМД = "Обработка" Тогда
					ИмяФормыМД = ".Форма";
				ИначеЕсли ВидОбъектМД = "Отчет" Тогда
					ИмяФормыМД = ".Форма";
				ИначеЕсли ВидОбъектМД = "Константа" Тогда
					ИмяФормыМД = ".ФормаКонстант";
				ИначеЕсли ВидОбъектМД = "ОбщаяФорма" Тогда
					ИмяФормыМД = "";
				ИначеЕсли ВидОбъектМД = "Перечисление" Тогда
					СтандартнаяОбработка = истина;
					Возврат;
				Иначе
					ИмяФормыМД = ".ФормаСписка";
				КонецЕсли;
				
				СтандартнаяОбработка = ложь;
				ОткрытьФорму(ТекДанные.ПолноеИмя + ИмяФормыМД);
			Исключение
				Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура кСвернутьРазделДерева(Команда)
	ТекДанные = Элементы.ДеревоОбъектов.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		УзелДЗ = ТекДанные.ПолучитьРодителя();
		Если УзелДЗ <> Неопределено Тогда
			Строка = УзелДЗ.ПолучитьИдентификатор();
			Элементы.ДеревоОбъектов.ТекущаяСтрока = Строка;
			Элементы.ДеревоОбъектов.Свернуть(Строка);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура кЗапускКонфигуратор(Команда)
	вЗапуститьСеанс1С(1);
КонецПроцедуры

&НаКлиенте
Процедура кЗапускТолстыйКлиент(Команда)
	вЗапуститьСеанс1С(2);
КонецПроцедуры

&НаКлиенте
Процедура кЗапускТолстыйКлиентУпр(Команда)
	вЗапуститьСеанс1С(3);
КонецПроцедуры

&НаКлиенте
Процедура кЗапускТонкийКлиент(Команда)
	вЗапуститьСеанс1С(4);
КонецПроцедуры

&НаКлиенте
Процедура кЗапуск1СРасш(Команда)
	#Если ВебКлиент Тогда
		вОперацияНеПоддерживаетсяДляВебКлиента();
	#Иначе
		ОткрытьФорму(ПутьКФормам + "ФормаЗапуска1С",, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОбъектовПередРазворачиванием(Элемент, Строка, Отказ)
	Если не _ОтображатьПраваНаОбъекты Тогда
		Элементы.ДеревоОбъектов.ТекущаяСтрока = Строка; // полезно при раскрытии узлов, которые находятся выше
	КонецЕсли;
	
	УзелДЗ = ДеревоОбъектов.НайтиПоИдентификатору(Строка);
	СтрокиДЗ = УзелДЗ.ПолучитьЭлементы();
	Если СтрокиДЗ.Количество() = 1 и ПустаяСтрока(СтрокиДЗ[0].ВидУзла) Тогда
		Отказ = истина;
		СтрокиДЗ.Очистить();
		
		ИмяУзлаДЗ = УзелДЗ.Имя;
		Поз = СтрНайти(ИмяУзлаДЗ, " (");
		Если Поз <> 0 Тогда
			ИмяУзлаДЗ = Лев(ИмяУзлаДЗ, Поз-1);
		КонецЕсли;
		
		Если УзелДЗ.ВидУзла = "РазделМД" Тогда
			УзелДЗ = ДеревоОбъектов.НайтиПоИдентификатору(Строка);
			СтрокиДЗ = УзелДЗ.ПолучитьЭлементы();
			СтрокиДЗ.Очистить();
			
			Если ИмяУзлаДЗ = "Документы" Тогда
				Струк = новый Структура("НумераторыДокументов, Последовательности");
				вРассчитатьКоличествоОбъектовМД(Струк);
				Для каждого Элем из Струк Цикл
					СтрДЗ = СтрокиДЗ.Добавить();
					СтрДЗ.ВидУзла = "РазделМД";
					СтрДЗ.Имя = Элем.Ключ + " (" + Элем.Значение + ")";
					СтрДЗ.ПолучитьЭлементы().Добавить();
				КонецЦикла;
			КонецЕсли;
			
			Струк = вПолучитьСоставРазделаМД(ИмяУзлаДЗ, _ОтборПоПодсистемам);
			Для каждого Элем из Струк.МассивОбъектов Цикл
				СтрДЗ = СтрокиДЗ.Добавить();
				ЗаполнитьЗначенияСвойств(СтрДЗ, Элем);
				Если СтрНайти(СтрДЗ.ПолноеИмя, "Перечисление.") = 1 Тогда
					СтрДЗ.ПолучитьЭлементы().Добавить();
				ИначеЕсли СтрНайти(СтрДЗ.ПолноеИмя, "Подсистема.") = 1 Тогда
					Если Элем.ЕстьДети Тогда
						СтрДЗ.ПолучитьЭлементы().Добавить();
					КонецЕсли;
				ИначеЕсли СтрНайти(СтрДЗ.ПолноеИмя, "WebСервис.") = 1 Тогда
					СтрДЗ.ПолучитьЭлементы().Добавить();
				ИначеЕсли СтрНайти(СтрДЗ.ПолноеИмя, "HTTPСервис.") = 1 Тогда
					СтрДЗ.ПолучитьЭлементы().Добавить();
				КонецЕсли;
			КонецЦикла;
			УзелДЗ.Имя = ИмяУзлаДЗ + " (" + Струк.ЧислоОбъектов + ")";
			
		ИначеЕсли УзелДЗ.ВидУзла = "ГруппаРазделовМД" Тогда
			СтрукРазделы = новый Структура("Подсистемы, ОбщиеМодули, ПараметрыСеанса, Пользователи, Роли, ОбщиеРеквизиты, ПланыОбмена, КритерииОтбора, ПодпискиНаСобытия, РегламентныеЗадания
			|, ФункциональныеОпции, ПараметрыФункциональныхОпций, ОпределяемыеТипы, ХранилищаНастроек, ОбщиеФормы, ОбщиеКоманды, ГруппыКоманд, ПрочиеКоманды, ОбщиеМакеты, ПакетыXDTO, WebСервисы, HTTPСервисы, WSСсылки");
			
			вРассчитатьКоличествоОбъектовМД(СтрукРазделы);
			
			Для каждого Элем из СтрукРазделы Цикл
				Если Элем.Ключ = "Пользователи" и не вЕстьПраваАдминистратора() Тогда
					Продолжить;
				КонецЕсли;
				СтрДЗ = СтрокиДЗ.Добавить();
				СтрДЗ.Имя = Элем.Ключ;
				СтрДЗ.Имя = Элем.Ключ + " (" + Элем.Значение + ")";
				СтрДЗ.ВидУзла = "РазделМД";
				СтрДЗ.ТипУзла = 1;
				СтрДЗ.ПолучитьЭлементы().Добавить();
			КонецЦикла;
			
		ИначеЕсли УзелДЗ.ВидУзла = "ОбъектМД" Тогда
			ВидОбъектМД = Лев(УзелДЗ.ПолноеИмя, СтрНайти(УзелДЗ.ПолноеИмя, ".")-1);
			
			УзелДЗ = ДеревоОбъектов.НайтиПоИдентификатору(Строка);
			СтрокиДЗ = УзелДЗ.ПолучитьЭлементы();
			СтрокиДЗ.Очистить();
			
			Если ВидОбъектМД = "Перечисление" Тогда
				МассивОбъектов = вПолучитьСоставПеречисления(УзелДЗ.ПолноеИмя);
				Для каждого Элем из МассивОбъектов Цикл
					СтрДЗ = СтрокиДЗ.Добавить();
					ЗаполнитьЗначенияСвойств(СтрДЗ, Элем);
				КонецЦикла;
			ИначеЕсли ВидОбъектМД = "Подсистема" Тогда
				МассивОбъектов = вПолучитьСоставПодсистемы(УзелДЗ.ПолноеИмя, _ОтборПоПодсистемам);
				Для каждого Элем из МассивОбъектов Цикл
					СтрДЗ = СтрокиДЗ.Добавить();
					ЗаполнитьЗначенияСвойств(СтрДЗ, Элем);
					Если Элем.ЕстьДети Тогда
						СтрДЗ.ПолучитьЭлементы().Добавить();
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ВидОбъектМД = "WebСервис" Тогда
				МассивОбъектов = вПолучитьОперацииWebСервиса(УзелДЗ.ПолноеИмя);
				Для каждого Элем из МассивОбъектов Цикл
					СтрДЗ = СтрокиДЗ.Добавить();
					ЗаполнитьЗначенияСвойств(СтрДЗ, Элем);
				КонецЦикла;
			ИначеЕсли ВидОбъектМД = "HTTPСервис" Тогда
				МассивОбъектов = вПолучитьМетодыHTTPСервиса(УзелДЗ.ПолноеИмя);
				Для каждого Элем из МассивОбъектов Цикл
					СтрДЗ = СтрокиДЗ.Добавить();
					ЗаполнитьЗначенияСвойств(СтрДЗ, Элем);
					Для каждого ЭлемХ из Элем.Методы Цикл
						ЗаполнитьЗначенияСвойств(СтрДЗ.ПолучитьЭлементы().Добавить(), ЭлемХ);
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Элементы.ДеревоОбъектов.Развернуть(Строка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вЗапуститьСеанс1С(ТипЗапуска)
	#Если ВебКлиент Тогда
		вОперацияНеПоддерживаетсяДляВебКлиента();
	#Иначе
		Папка1С = КаталогПрограммы();
		
		СтрокаЗапуска = Папка1С;
		
		Если ТипЗапуска = 1 Тогда
			СтрокаЗапуска = СтрокаЗапуска + "1CV8.EXE DESIGNER";
		ИначеЕсли ТипЗапуска = 2 Тогда
			СтрокаЗапуска = СтрокаЗапуска + "1CV8.EXE ENTERPRISE /RunModeOrdinaryApplication";
		ИначеЕсли ТипЗапуска = 3 Тогда
			СтрокаЗапуска = СтрокаЗапуска + "1CV8.EXE ENTERPRISE /RunModeManagedApplication";
		ИначеЕсли ТипЗапуска = 4 Тогда
			СтрокаЗапуска = СтрокаЗапуска + "1CV8C.EXE ENTERPRISE";
		КонецЕсли;
		
		СтрокаЗапуска = СтрШаблон(СтрокаЗапуска + " /IBConnectionString %1 /N""%2""", СтрокаСоединенияИнформационнойБазы(), ИмяПользователя());
		
		Попытка
			НачатьЗапускПриложения(новый ОписаниеОповещения("вПослеЗапускаПриложения", ЭтаФорма), СтрокаЗапуска);
		Исключение
			Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура вВыполнитьКомандуОС(пКоманда)
	Попытка
		НачатьЗапускПриложения(новый ОписаниеОповещения("вПослеЗапускаПриложения", ЭтаФорма), пКоманда);
	Исключение
		Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура вПослеЗапускаПриложения(КодВозврата, ДопПарам = Неопределено) Экспорт
	// фиктивная процедура для совместимости разных версий платыормы
КонецПроцедуры




&НаКлиентеНаСервереБезКонтекста
Функция вПереченьПолейУзлаДЗ()
	Возврат "Имя, Синоним, ПолноеИмя, ВидУзла, ТипУзла, ПредставлениеОбъекта, КоличествоОбъектов, Расширение";
КонецФункции

&НаСервереБезКонтекста
Функция вСформироватьСтруктуруУзлаДЗ(ВидУзла="", Имя="", ПолноеИмя="", Синоним="", ЕстьДети=ложь, ПредставлениеОбъекта="")
	Струк = новый Структура("ВидУзла, Имя, ПолноеИмя, Синоним, ПредставлениеОбъекта, ЕстьДети, Расширение", ВидУзла, Имя, ПолноеИмя, Синоним, ПредставлениеОбъекта, ЕстьДети, ложь);
	Возврат Струк;
КонецФункции

&НаСервереБезКонтекста
Функция вСформироватьУзелКонфигурация()
	Струк = новый Структура("Имя, Синоним, Версия", "", "", "");
	ЗаполнитьЗначенияСвойств(Струк, Метаданные);
	
	Если ПустаяСтрока(Струк.Синоним) Тогда
		Струк.Синоним = Струк.Имя;
	КонецЕсли;
	Если не ПустаяСтрока(Струк.Версия) Тогда
		Струк.Синоним = Струк.Синоним + " (" + Струк.Версия + ")";
	КонецЕсли;
	
	Возврат вСформироватьСтруктуруУзлаДЗ("Конфигурация", Струк.Имя,"Конфигурация",Струк.Синоним);
КонецФункции

&НаСервереБезКонтекста
Функция вПроверитьНаличиеСвойства(Объект, ИмяСвойства)
	Струк = новый Структура(ИмяСвойства);
	ЗаполнитьЗначенияСвойств(Струк, Объект);
	
	Возврат (Струк[ИмяСвойства] <> Неопределено);
КонецФункции

&НаСервереБезКонтекста
Функция вПолучитьСоставРазделаМД(Знач ИмяРаздела, Знач ОтборПоПодсистемам)
	Поз = СтрНайти(ИмяРаздела, " ");
	Если Поз <> 0 Тогда
		ИмяРаздела = Лев(ИмяРаздела, Поз-1);
	КонецЕсли;
	
	СтрукРезультат = новый Структура("ЧислоОбъектов, МассивОбъектов", 0, новый Массив);
	
	// для упорядочивания по именам объектов
	пОбъектыСДопПредставлением = новый Структура("ПланыОбмена, Справочники, Документы, ПланыВидовХарактеристик, ПланыВидовРасчета, ПланыСчетов, БизнесПроцессы, Задачи");
	ЕстьДопПредставление = пОбъектыСДопПредставлением.Свойство(ИмяРаздела);
	
	ТипСтрока = новый ОписаниеТипов("Строка");
	
	Таблица = новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ОбъектМД");
	Таблица.Колонки.Добавить("Имя", ТипСтрока);
	Таблица.Колонки.Добавить("Синоним", ТипСтрока);
	Таблица.Колонки.Добавить("ПредставлениеОбъекта", ТипСтрока);
	Таблица.Колонки.Добавить("ПолноеИмя", ТипСтрока);
	Таблица.Колонки.Добавить("ВидУзла", ТипСтрока);
	Таблица.Колонки.Добавить("ЕстьДети", новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("Расширение", новый ОписаниеТипов("Булево"));
	
	Если ИмяРаздела = "Пользователи" Тогда
		Если вЕстьПраваАдминистратора() Тогда
			Для каждого Элем из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
				Стр = Таблица.Добавить();
				Стр.Имя = Элем.Имя;
				Стр.Синоним = Элем.ПолноеИмя;
				Стр.ПредставлениеОбъекта = Элем.УникальныйИдентификатор;
				Стр.ПолноеИмя = "Пользователь." + Элем.Имя;
				Стр.ВидУзла = "ОбъектМД";
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ИмяРаздела = "ПрочиеКоманды" Тогда
		ПереченьРазделов = "Справочники, ЖурналыДокументов, Документы, Перечисления, Обработки, Отчеты,
		|ПланыСчетов, ПланыВидовХарактеристик, ПланыВидовРасчета, ПланыОбмена,
		|РегистрыСведений, РегистрыНакопления, РегистрыРасчета, РегистрыБухгалтерии,
		|БизнесПроцессы, Задачи, КритерииОтбора";
		
		СтрукРазделы = новый Структура(ПереченьРазделов);
		
		Если ОтборПоПодсистемам.ЕстьОтбор Тогда
			пТабСоставПодсистем = вСформироватьТаблицуПодсистем(ОтборПоПодсистемам.АдресХранилища);
		КонецЕсли;
		
		Для каждого Элем из СтрукРазделы Цикл
			Для каждого ОбъектХХХ из Метаданные[Элем.Ключ] Цикл
				ИмяТипаХХХ = ОбъектХХХ.ПолноеИмя();
				
				Если вПроверитьНаличиеСвойства(ОбъектХХХ, "Команды") Тогда
					Если ОтборПоПодсистемам.ЕстьОтбор Тогда
						пПолноеИмя = ОбъектХХХ.ПолноеИмя();
						Если не вПроверитьПоУстановленомуОтбору(пПолноеИмя, ОтборПоПодсистемам, пТабСоставПодсистем) Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					
					Для каждого Элем из ОбъектХХХ.Команды Цикл
						Стр = Таблица.Добавить();
						Стр.ОбъектМД = Элем;
						Стр.Имя = Элем.Имя;
						Стр.Синоним = Элем.Представление();
						Стр.ПолноеИмя = Элем.ПолноеИмя();
						Стр.ВидУзла = "ОбъектМД";
						Стр.Расширение = (Элем.РасширениеКонфигурации() <> Неопределено);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	Иначе
		Если ОтборПоПодсистемам.ЕстьОтбор Тогда
			пТабСоставПодсистем = вСформироватьТаблицуПодсистем(ОтборПоПодсистемам.АдресХранилища);
		КонецЕсли;
		
		Для каждого Элем из Метаданные[ИмяРаздела] Цикл
			пПолноеИмя = Элем.ПолноеИмя();
			
			Если ОтборПоПодсистемам.ЕстьОтбор Тогда
				Если ИмяРаздела = "Подсистемы" Тогда
					Если ОтборПоПодсистемам.СоотвДляПоиска[пПолноеИмя] = Неопределено Тогда
					//Если ОтборПоПодсистемам.Подсистемы.Найти(пПолноеИмя) = Неопределено Тогда
						Продолжить;
					КонецЕсли;
				ИначеЕсли не вПроверитьПоУстановленомуОтбору(пПолноеИмя, ОтборПоПодсистемам, пТабСоставПодсистем) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Стр = Таблица.Добавить();
			Стр.ОбъектМД = Элем;
			Стр.Имя = Элем.Имя;
			Стр.Синоним = Элем.Представление();
			Стр.ПредставлениеОбъекта = ?(ЕстьДопПредставление, Элем.ПредставлениеОбъекта, "");
			Стр.ПолноеИмя = пПолноеИмя;
			Стр.ВидУзла = "ОбъектМД";
			Стр.Расширение = (Элем.РасширениеКонфигурации() <> Неопределено);
			
			Если ИмяРаздела = "Подсистемы" Тогда
				Стр.ЕстьДети = (Элем.Подсистемы.Количество() <> 0);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ИмяРаздела = "ПрочиеКоманды" Тогда
		Таблица.Сортировать("ПолноеИмя");
	Иначе
		Таблица.Сортировать("Имя");
	КонецЕсли;
	
	Для каждого Стр из Таблица Цикл
		Струк = вСформироватьСтруктуруУзлаДЗ();
		ЗаполнитьЗначенияСвойств(Струк, Стр);
		СтрукРезультат.МассивОбъектов.Добавить(Струк);
	КонецЦикла;
	
	Если ИмяРаздела = "Подсистемы" Тогда
		Если ОтборПоПодсистемам.ЕстьОтбор Тогда
			СтрукРезультат.ЧислоОбъектов = ОтборПоПодсистемам.Подсистемы.Количество();
		Иначе
			СтрукРезультат.ЧислоОбъектов = вПолучитьКоличествоПодсистем();
		КонецЕсли;
	Иначе
		СтрукРезультат.ЧислоОбъектов = СтрукРезультат.МассивОбъектов.Количество();
	КонецЕсли;
	
	Возврат СтрукРезультат;
КонецФункции

&НаСервереБезКонтекста
Функция вПроверитьПоУстановленомуОтбору(ПолноеИмя, ОтборПоПодсистемам, Знач пТабСоставПодсистем)
	пПодсистемы = пТабСоставПодсистем.НайтиСтроки(новый Структура("Объект", ПолноеИмя));
	
	Если пПодсистемы.Количество() = 0 Тогда
		Если ОтборПоПодсистемам.ОтбиратьНеПривязанные Тогда
			Возврат истина;
		Иначе
			Возврат ложь;
		КонецЕсли;
	КонецЕсли;
	
	Для каждого Стр из пПодсистемы Цикл
		Если ОтборПоПодсистемам.СоотвДляПоиска[Стр.ПолноеИмя] <> Неопределено Тогда
		//Если ОтборПоПодсистемам.Подсистемы.Найти(Стр.ПолноеИмя) <> Неопределено Тогда
			Возврат истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ложь;
КонецФункции


&НаСервереБезКонтекста
Функция вПолучитьСоставПеречисления(Знач ПолноеИмя)
	МассивОбъектов = новый Массив;
	
	ОбъектМД = Метаданные.НайтиПоПолномуИмени(ПолноеИмя);
	Если ОбъектМД <> Неопределено Тогда
		Для каждого ЭлемХ из ОбъектМД.ЗначенияПеречисления Цикл
			Струк = вСформироватьСтруктуруУзлаДЗ("ЗначениеПеречисления", ЭлемХ.Имя, "", ЭлемХ.Представление());
			Струк.Расширение = (ЭлемХ.РасширениеКонфигурации() <> Неопределено);
			МассивОбъектов.Добавить(Струк);
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивОбъектов;
КонецФункции

&НаСервереБезКонтекста
Функция вПолучитьОперацииWebСервиса(Знач ПолноеИмя)
	МассивОбъектов = новый Массив;
	
	ОбъектМД = Метаданные.НайтиПоПолномуИмени(ПолноеИмя);
	Если ОбъектМД <> Неопределено Тогда
		Для каждого ЭлемХ из ОбъектМД.Операции Цикл
			Струк = вСформироватьСтруктуруУзлаДЗ("ОбъектМД", ЭлемХ.Имя, ЭлемХ.ПолноеИмя(), ЭлемХ.Представление());
			Струк.Расширение = (ЭлемХ.РасширениеКонфигурации() <> Неопределено);
			МассивОбъектов.Добавить(Струк);
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивОбъектов;
КонецФункции

&НаСервереБезКонтекста
Функция вПолучитьМетодыHTTPСервиса(Знач ПолноеИмя)
	МассивОбъектов = новый Массив;
	
	ОбъектМД = Метаданные.НайтиПоПолномуИмени(ПолноеИмя);
	Если ОбъектМД <> Неопределено Тогда
		Для каждого ЭлемХ из ОбъектМД.ШаблоныURL Цикл
			Струк = вСформироватьСтруктуруУзлаДЗ("ОбъектМД", ЭлемХ.Имя, ЭлемХ.ПолноеИмя(), ЭлемХ.Представление());
			Струк.Расширение = (ЭлемХ.РасширениеКонфигурации() <> Неопределено);
			МассивОбъектов.Добавить(Струк);
			
			Струк.Вставить("Методы", новый Массив);
			Для каждого ЭлемХХХ из ЭлемХ.Методы Цикл
				СтрукХХХ = вСформироватьСтруктуруУзлаДЗ("ОбъектМД", ЭлемХХХ.Имя, ЭлемХХХ.ПолноеИмя(), ЭлемХХХ.Представление());
				СтрукХХХ.Расширение = (ЭлемХХХ.РасширениеКонфигурации() <> Неопределено);
				Струк.Методы.Добавить(СтрукХХХ);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивОбъектов;
КонецФункции

&НаСервереБезКонтекста
Функция вПолучитьСоставПодсистемы(Знач ПолноеИмя, Знач ОтборПоПодсистемам)
	ТипСтрока = новый ОписаниеТипов("Строка");
	
	Таблица = новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ОбъектМД");
	Таблица.Колонки.Добавить("Имя", ТипСтрока);
	Таблица.Колонки.Добавить("Синоним", ТипСтрока);
	Таблица.Колонки.Добавить("ПредставлениеОбъекта", ТипСтрока);
	Таблица.Колонки.Добавить("ПолноеИмя", ТипСтрока);
	Таблица.Колонки.Добавить("ВидУзла", ТипСтрока);
	Таблица.Колонки.Добавить("ЕстьДети", новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("Расширение", новый ОписаниеТипов("Булево"));
	
	ОбъектМД = Метаданные.НайтиПоПолномуИмени(ПолноеИмя);
	Если ОбъектМД <> Неопределено Тогда
		Для каждого Элем из ОбъектМД.Подсистемы Цикл
			пПолноеИмя = Элем.ПолноеИмя();
			
			Если ОтборПоПодсистемам.ЕстьОтбор Тогда
				Если ОтборПоПодсистемам.СоотвДляПоиска[пПолноеИмя] = Неопределено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Стр = Таблица.Добавить();
			Стр.ОбъектМД = Элем;
			Стр.Имя = Элем.Имя;
			Стр.Синоним = Элем.Представление();
			Стр.ПолноеИмя = пПолноеИмя;
			Стр.ВидУзла = "ОбъектМД";
			Стр.ЕстьДети = (Элем.Подсистемы.Количество() <> 0);
			Стр.Расширение = (Элем.РасширениеКонфигурации() <> Неопределено);
		КонецЦикла;
	КонецЕсли;
	Таблица.Сортировать("Имя");
	
	МассивОбъектов = новый Массив;
	
	Для каждого Стр из Таблица Цикл
		Струк = вСформироватьСтруктуруУзлаДЗ();
		ЗаполнитьЗначенияСвойств(Струк, Стр);
		МассивОбъектов.Добавить(Струк);
	КонецЦикла;
	
	Возврат МассивОбъектов;
КонецФункции

&НаСервереБезКонтекста
Процедура вРассчитатьКоличествоОбъектовМД(СтрукРазделы)
	УстановитьПривилегированныйРежим(истина);
	
	Для каждого Элем из СтрукРазделы Цикл
		ЧислоОбъектов = 0;
		Если Элем.Ключ = "Пользователи" Тогда
			Если вЕстьПраваАдминистратора() Тогда
				ЧислоОбъектов = ПользователиИнформационнойБазы.ПолучитьПользователей().Количество();
			КонецЕсли;
		ИначеЕсли Элем.Ключ = "Подсистемы" Тогда
			ЧислоОбъектов = вПолучитьКоличествоПодсистем();
		ИначеЕсли Элем.Ключ = "ПрочиеКоманды" Тогда
			ЧислоОбъектов = "???"; //вПолучитьКоличествоПодсистем();
		Иначе
			ЧислоОбъектов = Метаданные[Элем.Ключ].Количество();
		КонецЕсли;
		СтрукРазделы.Вставить(Элем.Ключ, ЧислоОбъектов);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция вПолучитьКоличествоПодсистем(Знач ЭтоПервыйВызов = истина, ПодсистемаМД = Неопределено, Соотв = Неопределено)
	Если ЭтоПервыйВызов Тогда
		Соотв = новый Соответствие;
		
		Для каждого Элем из Метаданные.Подсистемы Цикл
			вПолучитьКоличествоПодсистем(ложь, Элем, Соотв);
		КонецЦикла;
		
		Возврат Соотв.Количество();
	Иначе
		Соотв.Вставить(ПодсистемаМД, 1);
		Для каждого Элем из ПодсистемаМД.Подсистемы Цикл
			Соотв.Вставить(Элем, 1);
			вПолучитьКоличествоПодсистем(ложь, Элем, Соотв);
		КонецЦикла;
		
		Возврат 0;
	КонецЕсли;
КонецФункции


&НаКлиенте
Функция вЭтоПрочаяКоманда(ПолноеИмя)
	Возврат (СтрНайти(ПолноеИмя, "Подсистема.") <> 1 и СтрНайти(ПолноеИмя, ".Команда.") <> 0);
КонецФункции

&НаКлиенте
Процедура ДеревоОбъектовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекДанные = Элементы.ДеревоОбъектов.ТекущиеДанные;
	
	Если ТекДанные <> Неопределено Тогда
		Если ТекДанные.ВидУзла = "ОбъектМД" Тогда
			Если вЭтоПрочаяКоманда(ТекДанные.ПолноеИмя) Тогда
				кПоказатьСвойстваОбъекта(Неопределено);
				Возврат;
			КонецЕсли;
			
			СпецПеречень = "Обработка, Отчет";
			Струк = новый Структура(СпецПеречень);
			
			ВидОбъектМД = Лев(ТекДанные.ПолноеИмя, СтрНайти(ТекДанные.ПолноеИмя, ".")-1);
			Если Струк.Свойство(ВидОбъектМД) Тогда
				кОткрытьФормуСписка(Неопределено);
			Иначе
				кПоказатьСвойстваОбъекта(Неопределено);
			КонецЕсли;
		ИначеЕсли ТекДанные.ВидУзла = "Конфигурация" Тогда
			кПоказатьСвойстваОбъекта(Неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОбъектовПриИзменении(Элемент)
	вВключитьФлагИзмененияНастроек();
КонецПроцедуры

&НаКлиенте
Процедура кИзменитьМасштабОтображенияФорм(Команда)
	ОткрытьФорму(ПутьКФормам + "ФормаВыбораМасштабаОтображения",, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура кОткрытьФормуСпискаДоп(Команда)
	ТекДанные = Элементы.ДеревоОбъектов.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если ТекДанные.ВидУзла = "ОбъектМД" и не вЭтоПрочаяКоманда(ТекДанные.ПолноеИмя) Тогда
			СтрукКатегории = новый Структура("Справочник, Документ, ПланВидовХарактеристик, ПланВидовРасчета, ПланСчетов
			|, РегистрСведений, РегистрНакопления, РегистрБухгалтерии, РегистрРасчета, БизнесПроцесс, Задача");
			
			НадоОбработать = ложь;
			Для каждого Элем из СтрукКатегории Цикл
				Если СтрНайти(ТекДанные.ПолноеИмя, Элем.Ключ) = 1 Тогда
					НадоОбработать = истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НадоОбработать Тогда
				СтрукПараметры = новый Структура("ПутьКФормам, ПолноеИмя", ПутьКФормам, ТекДанные.ПолноеИмя);
				ОткрытьФорму(ПутьКФормам + "ФормаСпискаОбъектов", СтрукПараметры,,ТекДанные.ПолноеИмя,,,,РежимОткрытияОкнаФормы.Независимый);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаСервере
Функция вОбновитьТабНастройки(Знач ВидУзла, Знач Имя)
	УстановитьПривилегированныйРежим(истина);
	
	Если ВидУзла = "Х" Тогда
		МенеджерХН = Вычислить(Имя);
	Иначе
		Возврат ложь;
	КонецЕсли;
	
	Если ТипЗнч(МенеджерХН) <> Тип("СтандартноеХранилищеНастроекМенеджер") Тогда
		Возврат ложь;
	КонецЕсли;
	
	Если не вЕстьПраваАдминистратора() Тогда
		ТекПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
		Отбор = новый Структура("Пользователь", ТекПользователь.Имя);
	Иначе
		Отбор = Неопределено;
	КонецЕсли;
	
	Попытка
		Выборка = МенеджерХН.Выбрать(Отбор);
		Пока Выборка.Следующий() Цикл
			НС = ТабНастройки.Добавить();
			НС.КлючНастроек = Выборка.КлючНастроек;
			НС.КлючОбъекта = Выборка.КлючОбъекта;
			НС.Пользователь = Выборка.Пользователь;
			НС.Представление = Выборка.Представление;
		КонецЦикла;
	Исключение
		Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат истина;
КонецФункции

&НаСервере
Процедура вУдалитьМассивНастроек(Знач Имя, Знач МассивСтрок)
	УстановитьПривилегированныйРежим(истина);
	
	Попытка
		МенеджерХН = Вычислить(Имя);
		
		Для каждого Элем из МассивСтрок Цикл
			Стр = ТабНастройки.НайтиПоИдентификатору(Элем);
			Если Стр <> Неопределено Тогда
				МенеджерХН.Удалить(Стр.КлючОбъекта, Стр.КлючНастроек, Стр.Пользователь);
				ТабНастройки.Удалить(Стр);
			КонецЕсли;
		КонецЦикла;
	Исключение
		Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ТабНастройкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = истина;
КонецПроцедуры

&НаКлиенте
Процедура ТабНастройкиПередУдалением(Элемент, Отказ)
	Отказ = истина;
	Если не ПустаяСтрока(_ИмяМенеджераНастроек) Тогда
		СтрукПараметры = новый Структура;
		СтрукПараметры.Вставить("МассивСтрок", новый ФиксированныйМассив(Элемент.ВыделенныеСтроки));
		вПоказатьВопрос("Отмеченные настройки будут удалены. Продолжить?", "ТабНастройкиПередУдалениемДалее", СтрукПараметры);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабНастройкиПередУдалениемДалее(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		вУдалитьМассивНастроек(_ИмяМенеджераНастроек, Параметры.МассивСтрок);
		вОбновитьЗаголовкиНастройки();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура кОбновтьТаблицуНастроек(Команда)
	ТекДанные = Элементы.ДеревоНастроек.ТекущиеДанные;
	
	Если ТекДанные <> Неопределено и ТекДанные.ВидУзла = "Х" Тогда
		ТабНастройки.Очистить();
		
		Если не вОбновитьТабНастройки(ТекДанные.ВидУзла, ТекДанные.Имя) Тогда
			ТекДанные.ВидУзла = "-";
			ТекДанные.Представление = ТекДанные.Имя + " (не поддерживается)";
		КонецЕсли;
		
		_ИмяМенеджераНастроек = ТекДанные.Имя;
		
		вОбновитьЗаголовкиНастройки();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вОбновитьЗаголовкиНастройки()
	Элементы.ДекорацияНастройки.Заголовок = _ИмяМенеджераНастроек + " (" + ТабНастройки.Количество() + " шт.)";
КонецПроцедуры



// страница Сервис

&НаСервере
Процедура вЗаполнитьДеревоСервис()
	Макет = вПолучитьОбработку().ПолучитьМакет("МакетСервис");
	Если Макет = Неопределено Тогда
		Макет = новый ТабличныйДокумент;
	КонецЕсли;
	
	СтрукСвойства = новый Структура("Доступность, Представление, ВидУзла, Имя, Комментарий, ДоступностьВыражение", истина);
	
	КореньДЗ = ДеревоСервис;
	УзелДЗ = ДеревоСервис;
	
	Для НомерСтроки = 2 по Макет.ВысотаТаблицы Цикл
		СтрукСвойства.Представление = СокрЛП(Макет.Область(НомерСтроки, 1).Текст);
		
		Если не ПустаяСтрока(СтрукСвойства.Представление) Тогда
			СтрукСвойства.ВидУзла = СокрЛП(Макет.Область(НомерСтроки, 2).Текст);
			СтрукСвойства.Имя = СокрЛП(Макет.Область(НомерСтроки, 3).Текст);
			СтрукСвойства.ДоступностьВыражение = СокрЛП(Макет.Область(НомерСтроки, 4).Текст);
			СтрукСвойства.Комментарий = СокрЛП(Макет.Область(НомерСтроки, 5).Текст);
			
			Если СтрукСвойства.ВидУзла = "Г" Тогда
				УзелДЗ = КореньДЗ.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(УзелДЗ, СтрукСвойства);
				УзелДЗ.ЭтоГруппа = истина;
				УзелДЗ.Картинка = -1;
			Иначе
				СтрДЗ = УзелДЗ.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(СтрДЗ, СтрукСвойства);
				Если не ПустаяСтрока(СтрукСвойства.ДоступностьВыражение) Тогда
					СтрДЗ.Доступность = Вычислить(СтрукСвойства.ДоступностьВыражение);
				КонецЕсли;
				Если не СтрДЗ.Доступность Тогда
					СтрДЗ.Представление = СтрДЗ.Представление + " (не доступно)";
				КонецЕсли;
				
				Если СтрДЗ.Имя = "ПереключитьМонопольныйРежим" Тогда
					СтрДЗ.Представление = ?(_КонтекстФормы.МонопольныйРежим, "Отключить монопольный режим", "Установить монопольный режим");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСервисВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтрДЗ = ДеревоСервис.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если СтрДЗ <> Неопределено Тогда
		Если не СтрДЗ.ЭтоГруппа Тогда
			СтандартнаяОбработка = ложь;
			Если СтрДЗ.Доступность Тогда
				Попытка
					вОбработатьКомандуСервис(СтрДЗ);
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вОбработатьКомандуСервис(СтрДЗ)
	Если СтрДЗ.Имя = "ВерсииПодсистем" Тогда
		ОткрытьФорму("РегистрСведений.ВерсииПодсистем.ФормаСписка");
	ИначеЕсли СтрДЗ.Имя = "ОбновитьПовторноИспользуемыеЗначения" Тогда
		ОбновитьПовторноИспользуемыеЗначения();
	ИначеЕсли СтрДЗ.Имя = "ОчиститьИзбранное" Тогда
		вПоказатьВопрос("Избранное будет очищено. Продолжить?", "вОчиститьИзбранное");
	ИначеЕсли СтрДЗ.Имя = "МасштабОтображения" Тогда
		кИзменитьМасштабОтображенияФорм(Неопределено);
	ИначеЕсли СтрДЗ.Имя = "УстановитьБлокировкуСеансов" Тогда
		ОткрытьФорму(ПутьКФормам + "ФормаБлокировкиСеансов",, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли СтрДЗ.Имя = "ПереключитьМонопольныйРежим" Тогда
		вПерключитьМонопольныйРежим(_КонтекстФормы);
		СтрДЗ.Представление = ?(_КонтекстФормы.МонопольныйРежим, "Отключить монопольный режим", "Установить монопольный режим");
	ИначеЕсли СтрДЗ.Имя = "Запуск1С" Тогда
		#Если ВебКлиент Тогда
			вОперацияНеПоддерживаетсяДляВебКлиента();
		#Иначе
			ОткрытьФорму(ПутьКФормам + "ФормаЗапуска1С",, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		#КонецЕсли
	ИначеЕсли СтрДЗ.Имя = "Конфигуратор1С" Тогда
		вЗапуститьСеанс1С(1);
	ИначеЕсли СтрДЗ.Имя = "ТолстыйКлиентОбычное" Тогда
		вЗапуститьСеанс1С(2);
	ИначеЕсли СтрДЗ.Имя = "ТолстыйКлиентУпр" Тогда
		вЗапуститьСеанс1С(3);
	ИначеЕсли СтрДЗ.Имя = "ТонкийКлиентУпр" Тогда
		вЗапуститьСеанс1С(4);
	ИначеЕсли СтрДЗ.Имя = "WinStartMenu" Тогда
		вВыполнитьКомандуОС("%ProgramData%\Microsoft\Windows\Start Menu\Programs");
	ИначеЕсли СтрДЗ.Имя = "WinAppData" Тогда
		вВыполнитьКомандуОС("%AppData%");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вОчиститьИзбранное(Результат, ДопПараметры = Неопределено) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		вОчиститьИзбранноеСервер();
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура вОчиститьИзбранноеСервер()
	Избранное = ХранилищеСистемныхНастроек.Загрузить("Общее/ИзбранноеРаботыПользователя");
	Избранное.Очистить();
	ХранилищеСистемныхНастроек.Сохранить("Общее/ИзбранноеРаботыПользователя", "", Избранное);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура вПерключитьМонопольныйРежим(СтрукКонтекст)
	Попытка
		УстановитьМонопольныйРежим(не МонопольныйРежим());
		СтрукКонтекст.МонопольныйРежим = МонопольныйРежим();
	Исключение
		Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура кВыполнитьСервиснуюКоманду(Команда)
	ТекДанные = Элементы.ДеревоСервис.ТекущиеДанные;
	ДеревоСервисВыбор(Элементы.ДеревоСервис, Элементы.ДеревоСервис.ТекущаяСтрока, Неопределено, ложь)
КонецПроцедуры

&НаКлиенте
Процедура _ОтображатьПраваНаОбъектыПриИзменении(Элемент)
	Элементы.СтраницыПраваНаОбъект.Видимость = _ОтображатьПраваНаОбъекты;
	
	Если не _ОтображатьПраваНаОбъекты и не ПустаяСтрока(_АдресаХранилищ.РолиИПользователи) Тогда
		УдалитьИзВременногоХранилища(_АдресаХранилищ.РолиИПользователи);
		_АдресаХранилищ.РолиИПользователи = "";
	КонецЕсли;
	
	Если _ОтображатьПраваНаОбъекты Тогда
		вОтобразитьПраваНаОбъект(ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабПроверяемыеПраваПравоПриИзменении(Элемент)
	ТекДанные = Элементы.ТабПроверяемыеПрава.ТекущиеДанные;
	Если ТекДанные <> Неопределено и ТекДанные.Пометка Тогда
		вОтобразитьПраваНаОбъект(истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОбъектовПриАктивизацииСтроки(Элемент)
	Если _ОтображатьПраваНаОбъекты Тогда
		ПодключитьОбработчикОжидания("ОбработкаАктивизацииСтрокиНавигатора", 0.1, истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизацииСтрокиНавигатора()
	вОтобразитьПраваНаОбъект(ложь);
КонецПроцедуры

&НаКлиенте
Процедура вОтобразитьПраваНаОбъект(пОбновить = ложь)
	ТекДанные = Элементы.ДеревоОбъектов.ТекущиеДанные;
	ТипМД = "";
	Если ТекДанные <> Неопределено и ТекДанные.ВидУзла = "ОбъектМД" Тогда
		Если пОбновить = ложь и ТекДанные.ПолноеИмя = мТекущийОбъектДерева Тогда
			Возврат;
		КонецЕсли;
		
		мТекущийОбъектДерева = ТекДанные.ПолноеИмя;
		
		Для каждого Стр из ТабПроверяемыеПрава.НайтиСтроки(новый Структура("Пометка", истина)) Цикл
			Стр.Пометка = ложь;
		КонецЦикла;
		
		Если СтрНайти(ТекДанные.ПолноеИмя, ".Команда.") <> 0 Тогда
			ТипМД = "ОбщаяКоманда";
		Иначе
			ТипМД = Лев(ТекДанные.ПолноеИмя, СтрНайти(ТекДанные.ПолноеИмя, ".")-1);
		КонецЕсли;
		
		Если ТипМД = "WebСервис" и СтрНайти(ТекДанные.ПолноеИмя, ".Операция.") <> 0 Тогда
			ТипМД = "WebСервис.Свойство";
		ИначеЕсли ТипМД = "HTTPСервис" и СтрНайти(ТекДанные.ПолноеИмя, ".ШаблонURL.") <> 0 и СтрНайти(ТекДанные.ПолноеИмя, ".Метод.") <> 0 Тогда
			ТипМД = "HTTPСервис.Свойство";
		КонецЕсли;
		
		Для каждого Стр из ТабПроверяемыеПрава.НайтиСтроки(новый Структура("ОбъектМД", ТипМД)) Цикл
			Стр.Пометка = истина;
		КонецЦикла;
	Иначе
		мТекущийОбъектДерева = "";
		
		Для каждого Стр из ТабПроверяемыеПрава.НайтиСтроки(новый Структура("Пометка", истина)) Цикл
			Стр.Пометка = ложь;
		КонецЦикла;
	КонецЕсли;
	
	ТабРолиСДоступом.Очистить();
	ТабПользователиСДоступом.Очистить();
	
	Если ТекДанные <> Неопределено и ТекДанные.ВидУзла = "ОбъектМД" Тогда
		
		Если СтрНайти(ТекДанные.ПолноеИмя, "Роль.") = 1 Тогда
			Если Элементы.СтраницыПраваНаОбъект.ТекущаяСтраница <> Элементы.СтрПользователи Тогда
				Элементы.СтраницыПраваНаОбъект.ТекущаяСтраница = Элементы.СтрПользователи;
			КонецЕсли;
			ИмяПрава = "Х";
		ИначеЕсли СтрНайти(ТекДанные.ПолноеИмя, "Пользователь.") = 1 Тогда
			Если Элементы.СтраницыПраваНаОбъект.ТекущаяСтраница <> Элементы.СтрРоли Тогда
				Элементы.СтраницыПраваНаОбъект.ТекущаяСтраница = Элементы.СтрРоли;
			КонецЕсли;
			ИмяПрава = "Х";
		Иначе
			Если ТипМД = "" Тогда
				ТипМД = Лев(ТекДанные.ПолноеИмя, СтрНайти(ТекДанные.ПолноеИмя, ".")-1);
			КонецЕсли;
			НайденныеСтроки = ТабПроверяемыеПрава.НайтиСтроки(новый Структура("ОбъектМД", ТипМД));
			Если НайденныеСтроки.Количество() = 0 Тогда
				вУстановитьЗаголовкиТаблицПрав();
				Возврат;
			КонецЕсли;
			ИмяПрава = НайденныеСтроки[0].Право;
			Если ИмяПрава = "" Тогда
				вУстановитьЗаголовкиТаблицПрав();
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Струк = вПолучитьПраваДоступаКОбъекту(ИмяПрава, ТекДанные.ПолноеИмя, _АдресаХранилищ.РолиИПользователи, УникальныйИдентификатор);
		Если Струк.ЕстьДанные Тогда
			Для каждого Элем из Струк.Роли Цикл
				ЗаполнитьЗначенияСвойств(ТабРолиСДоступом.Добавить(), Элем);
			КонецЦикла;
			
			Для каждого Элем из Струк.Пользователи Цикл
				ЗаполнитьЗначенияСвойств(ТабПользователиСДоступом.Добавить(), Элем);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	вУстановитьЗаголовкиТаблицПрав();
КонецПроцедуры

&НаКлиенте
Процедура вУстановитьЗаголовкиТаблицПрав()
	Если не _ПоказыватьЗаголовкиВТаблицеПрав Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки = ТабПроверяемыеПрава.НайтиСтроки(новый Структура("Пометка", истина));
	Если НайденныеСтроки.Количество() = 0 Тогда
		ИмяПрава = "";
	Иначе
		ИмяПрава = НайденныеСтроки[0].Право + ": ";
	КонецЕсли;
	
	ЗаголовокРоли = ИмяПрава + "Роли, имеющие доступ (";
	ЗаголовокПользователи = ИмяПрава + "Пользователи, имеющие доступ (";
	
	ТекДанные = Элементы.ДеревоОбъектов.ТекущиеДанные;
	Если ТекДанные <> Неопределено и ТекДанные.ВидУзла = "ОбъектМД" Тогда
		Если СтрНайти(ТекДанные.ПолноеИмя, "Роль.") = 1 Тогда
			ЗаголовокРоли = "";
			ЗаголовокПользователи = "Пользователи, имеющие данную роль (";
		ИначеЕсли СтрНайти(ТекДанные.ПолноеИмя, "Пользователь.") = 1 Тогда
			ЗаголовокРоли = "Роли данного пользователя (";
			ЗаголовокПользователи = "";
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ЗаголовокРоли) Тогда
		Элементы.ДекорацияРоли.Заголовок = "Для заданного объекта не используются";
	Иначе
		Элементы.ДекорацияРоли.Заголовок = ЗаголовокРоли + ТабРолиСДоступом.Количество() + " шт.)";
	КонецЕсли;
	
	Если ПустаяСтрока(ЗаголовокПользователи) Тогда
		Элементы.ДекорацияПользователи.Заголовок = "Для заданного объекта не используются";
	Иначе
		Элементы.ДекорацияПользователи.Заголовок = ЗаголовокПользователи + ТабПользователиСДоступом.Количество() + " шт.)";
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция вПолучитьПраваДоступаКОбъекту(Знач ИмяПрава, Знач ПолноеИмя, АдресТаблицыРолиИПользователи, Знач УникальныйИдентификатор)
	СтрукРезультат = новый Структура("ЕстьДанные, Роли, Пользователи", ложь);
	
	ТабРоли = новый ТаблицаЗначений;
	ТабРоли.Колонки.Добавить("Имя", новый ОписаниеТипов("Строка"));
	ТабРоли.Колонки.Добавить("Синоним", новый ОписаниеТипов("Строка"));
	
	ТабПользователи = новый ТаблицаЗначений;
	ТабПользователи.Колонки.Добавить("Имя", новый ОписаниеТипов("Строка"));
	ТабПользователи.Колонки.Добавить("ПолноеИмя", новый ОписаниеТипов("Строка"));
	
	
	Если СтрНайти(ПолноеИмя, ".Команда.") <> 0 Тогда
		ТипМД = "ОбщаяКоманда";
	Иначе
		ТипМД = Лев(ПолноеИмя, СтрНайти(ПолноеИмя, ".")-1);
	КонецЕсли;
	
	Если ТипМД <> "Пользователь" Тогда
		ОбъектМД = Метаданные.НайтиПоПолномуИмени(ПолноеИмя);
		
		Если ОбъектМД = Неопределено Тогда
			Возврат СтрукРезультат;
		КонецЕсли;
	КонецЕсли;
	
	ЭтоОбычныйРежим = (ИмяПрава <> "Х");
	
	Если ЭтоОбычныйРежим и ПустаяСтрока(ИмяПрава) Тогда
		Возврат СтрукРезультат;
	КонецЕсли;
	
	
	Если ЭтоОбычныйРежим Тогда
		Для каждого Элем из Метаданные.Роли Цикл
			Если ПравоДоступа(ИмяПрава, ОбъектМД, Элем) Тогда
				ЗаполнитьЗначенияСвойств(ТабРоли.Добавить(), Элем);
			КонецЕсли;
		КонецЦикла;
		
		ТабРоли.Сортировать("Имя");
	КонецЕсли;
	
	
	Если ПустаяСтрока(АдресТаблицыРолиИПользователи) Тогда
		__ТабРолиИПользователи = новый ТаблицаЗначений;
		__ТабРолиИПользователи.Колонки.Добавить("ИмяР", новый ОписаниеТипов("Строка"));
		__ТабРолиИПользователи.Колонки.Добавить("ИмяП", новый ОписаниеТипов("Строка"));
		__ТабРолиИПользователи.Колонки.Добавить("ПолноеИмяП", новый ОписаниеТипов("Строка"));
		
		Для каждого П из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
			Для каждого Р из П.Роли Цикл
				НС = __ТабРолиИПользователи.Добавить();
				НС.ИмяР = Р.Имя;
				НС.ИмяП = П.Имя;
				НС.ПолноеИмяП = П.ПолноеИмя;
			КонецЦикла;
		КонецЦикла;
		
		__ТабРолиИПользователи.Индексы.Добавить("ИмяР");
		__ТабРолиИПользователи.Индексы.Добавить("ИмяП");
		АдресТаблицыРолиИПользователи = ПоместитьВоВременноеХранилище(__ТабРолиИПользователи, УникальныйИдентификатор);
	Иначе
		__ТабРолиИПользователи = ПолучитьИзВременногоХранилища(АдресТаблицыРолиИПользователи);
	КонецЕсли;
	
	
	Если ЭтоОбычныйРежим Тогда
		СтрукР = новый Структура("ИмяР");
		СтрукП = новый Структура("Имя");
		
		Для каждого Стр из ТабРоли Цикл
			СтрукР.ИмяР = Стр.Имя;
			Для каждого СтрХ из __ТабРолиИПользователи.НайтиСтроки(СтрукР) Цикл
				СтрукП.Имя = СтрХ.ИмяП;
				Если ТабПользователи.НайтиСтроки(СтрукП).Количество() = 0 Тогда
					НС = ТабПользователи.Добавить();
					НС.Имя = СтрХ.ИмяП;
					НС.ПолноеИмя = СтрХ.ПолноеИмяП;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ТабПользователи.Сортировать("Имя");
	КонецЕсли;
	
	Если не ЭтоОбычныйРежим Тогда
		Если ТипМД = "Роль" Тогда
			ИмяР = Сред(ПолноеИмя, СтрНайти(ПолноеИмя, ".")+1);
			Для каждого Стр из __ТабРолиИПользователи.НайтиСтроки(новый Структура("ИмяР", ИмяР)) Цикл
				НС = ТабПользователи.Добавить();
				НС.Имя = Стр.ИмяП;
				НС.ПолноеИмя = Стр.ПолноеИмяП;
			КонецЦикла;
			ТабПользователи.Сортировать("Имя");
			
		ИначеЕсли ТипМД = "Пользователь" Тогда
			ИмяП = Сред(ПолноеИмя, СтрНайти(ПолноеИмя, ".")+1);
			Для каждого Стр из __ТабРолиИПользователи.НайтиСтроки(новый Структура("ИмяП", ИмяП)) Цикл
				НС = ТабРоли.Добавить();
				НС.Имя = Стр.ИмяР;
			КонецЦикла;
			ТабРоли.Сортировать("Имя");
		КонецЕсли;
	КонецЕсли;
	
	СтрукРезультат.ЕстьДанные = истина;
	СтрукРезультат.Роли = новый Массив;
	СтрукРезультат.Пользователи = новый Массив;
	
	Для каждого Стр из ТабРоли Цикл
		Струк = новый Структура("Имя, Синоним");
		ЗаполнитьЗначенияСвойств(Струк, Стр);
		СтрукРезультат.Роли.Добавить(Струк);
	КонецЦикла;
	
	Для каждого Стр из ТабПользователи Цикл
		Струк = новый Структура("Имя, ПолноеИмя");
		ЗаполнитьЗначенияСвойств(Струк, Стр);
		СтрукРезультат.Пользователи.Добавить(Струк);
	КонецЦикла;
	
	Возврат СтрукРезультат;
КонецФункции

&НаКлиенте
Процедура вЗаполнитьПроверяемыеПраваДоступа()
	Для каждого Элем из мОписаниеПравДоступа Цикл
		НС = ТабПроверяемыеПрава.Добавить();
		НС.ОбъектМД = Элем.Ключ;
		Поз = СтрНайти(Элем.Значение, ",");
		НС.Право = ?(Поз = 0, Элем.Значение, Лев(Элем.Значение, Поз-1));
	КонецЦикла;
	
	ТабПроверяемыеПрава.Сортировать("ОбъектМД");
КонецПроцедуры

&НаКлиенте
Процедура ТабПроверяемыеПраваПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекДанные = Элемент.ТекущиеДанные;
	Струк = новый Структура(мОписаниеПравДоступа[ТекДанные.ОбъектМД]);
	
	ЭФ = Элементы.ТабПроверяемыеПраваПраво;
	ЭФ.СписокВыбора.Очистить();
	Для каждого Элем из Струк Цикл
		ЭФ.СписокВыбора.Добавить(Элем.Ключ);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ТабРолиСДоступомВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = ложь;
	
	ТекДанные = Элементы.ТабРолиСДоступом.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		пПолноеИмя = "Роль."+ТекДанные.Имя;
		СтрукПараметры = новый Структура("ПолноеИмя, ПутьКФормам, _АдресаХранилищ, ОписаниеПравДоступа", пПолноеИмя, ПутьКФормам, _АдресаХранилищ, мОписаниеПравДоступа);
		СтрукПараметры.Вставить("НастройкиОбработки", вСформироватьСтруктуруНастроекФормыСвойствОбъекта());
		ОткрытьФорму(ПутьКФормам + "ФормаСвойств", СтрукПараметры,,пПолноеИмя,,,,РежимОткрытияОкнаФормы.Независимый);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабПользователиСДоступомВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = ложь;
	
	ТекДанные = Элементы.ТабПользователиСДоступом.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		пИдентификаторПользователя = вПолучитьИдентификаторПользователя(ТекДанные.Имя);
		
		Если не ПустаяСтрока(пИдентификаторПользователя) Тогда
			пСтрук = новый Структура("РежимРаботы, ИдентификаторПользователяИБ", 0, пИдентификаторПользователя);
			ОткрытьФорму(ПутьКФормам + "ФормаПользовательИБ", пСтрук,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вСформироватьОписаниеПравДоступа()
	ПереченьА = "Чтение, Добавление, Изменение, Удаление, Просмотр, Редактирование";
	ПереченьБ = "Чтение, Изменение, Просмотр, Редактирование, УправлениеИтогами";
	
	мОписаниеПравДоступа = новый Соответствие;
	мОписаниеПравДоступа.Вставить("Подсистема", "Просмотр");
	мОписаниеПравДоступа.Вставить("ПараметрСеанса", "Получение, Установка");
	мОписаниеПравДоступа.Вставить("ОбщийРеквизит", "Просмотр, Редактирование");
	мОписаниеПравДоступа.Вставить("ПланОбмена", ПереченьА);
	мОписаниеПравДоступа.Вставить("КритерийОтбора", "Просмотр");
	мОписаниеПравДоступа.Вставить("ОбщаяФорма", "Просмотр");
	мОписаниеПравДоступа.Вставить("ОбщаяКоманда", "Просмотр");
	мОписаниеПравДоступа.Вставить("ЧужаяКоманда", "Просмотр");
	мОписаниеПравДоступа.Вставить("WebСервис.Свойство", "Использование");
	мОписаниеПравДоступа.Вставить("HTTPСервис.Свойство", "Использование");
	мОписаниеПравДоступа.Вставить("Константа", "Чтение, Изменение, Просмотр, Редактирование");
	мОписаниеПравДоступа.Вставить("Справочник", ПереченьА);
	мОписаниеПравДоступа.Вставить("Документ", ПереченьА + ", Проведение, ОтменаПроведения");
	мОписаниеПравДоступа.Вставить("Последовательность", "Чтение, Изменение");
	мОписаниеПравДоступа.Вставить("ЖурналДокументов", "Чтение, Просмотр");
	мОписаниеПравДоступа.Вставить("Отчет", "Использование, Просмотр");
	мОписаниеПравДоступа.Вставить("Обработка", "Использование, Просмотр");
	мОписаниеПравДоступа.Вставить("ПланВидовХарактеристик", ПереченьА);
	мОписаниеПравДоступа.Вставить("ПланВидовРасчета", ПереченьА);
	мОписаниеПравДоступа.Вставить("ПланСчетов", ПереченьА);
	мОписаниеПравДоступа.Вставить("РегистрСведений", ПереченьБ);
	мОписаниеПравДоступа.Вставить("РегистрНакопления", ПереченьБ);
	мОписаниеПравДоступа.Вставить("РегистрБухгалтерии", ПереченьБ);
	мОписаниеПравДоступа.Вставить("РегистрРасчета", "Чтение, Изменение, Просмотр, Редактирование");
	мОписаниеПравДоступа.Вставить("БизнесПроцесс", ПереченьА + ", Старт");
	мОписаниеПравДоступа.Вставить("Задача", ПереченьА + ", Выполнение");
	
КонецПроцедуры

&НаКлиенте
Процедура кРассчитатьКоличествоОбъектов(Команда)
	ТекДанные = Элементы.ДеревоОбъектов.ТекущиеДанные;
	
	Если ТекДанные <> Неопределено Тогда
		Если ТекДанные.ВидУзла = "ОбъектМД" Тогда
			Перечень = "Последовательность, ПланОбмена, Справочник, Документ, ЖурналДокументов, ПланВидовХарактеристик
			|, ПланВидовРасчета, ПланСчетов, РегистрСведений, РегистрНакопления, РегистрБухгалтерии, РегистрРасчета, БизнесПроцесс, Задача";
			
			Струк = Новый Структура(Перечень);
			ТипМД = Лев(ТекДанные.ПолноеИмя, СтрНайти(ТекДанные.ПолноеИмя, ".")-1);
			
			Если не Струк.Свойство(ТипМД) Тогда
				Возврат;
			КонецЕсли;
			
			МассивОбъектов = новый Массив;
			
			Струк = новый Структура("ПолноеИмя, КоличествоОбъектов", ТекДанные.ПолноеИмя);
			МассивОбъектов.Добавить(Струк);
			
			РодительДЗ = ТекДанные.ПолучитьРодителя();
			
			РодительДЗ.КоличествоОбъектов = РодительДЗ.КоличествоОбъектов - ТекДанные.КоличествоОбъектов;
			
			вРассчитатьКоличествоОбъектов(МассивОбъектов);
			ТекДанные.КоличествоОбъектов = МассивОбъектов[0].КоличествоОбъектов;
			
			РодительДЗ.КоличествоОбъектов = РодительДЗ.КоличествоОбъектов + ТекДанные.КоличествоОбъектов;
			
		ИначеЕсли ТекДанные.ВидУзла = "РазделМД" Тогда
			СтрокиДЗ = ТекДанные.ПолучитьЭлементы();
			Если СтрокиДЗ.Количество() = 1 и ПустаяСтрока(СтрокиДЗ[0].ВидУзла) Тогда
				Возврат;
			КонецЕсли;
			
			Перечень = "Последовательности, ПланыОбмена, Справочники, Документы, ЖурналыДокументов, ПланыВидовХарактеристик
			|, ПланыВидовРасчета, ПланыСчетов, РегистрыСведений, РегистрыНакопления, РегистрыБухгалтерии, РегистрыРасчета, БизнесПроцессы, Задачи";
			
			Струк = Новый Структура(Перечень);
			Поз = СтрНайти(ТекДанные.Имя, " ");
			Если Поз = 0 Тогда
				ИмяРаздела = ТекДанные.Имя;
			Иначе
				ИмяРаздела = Лев(ТекДанные.Имя, Поз-1);
			КонецЕсли;
			
			Если не Струк.Свойство(ИмяРаздела) Тогда
				Возврат;
			КонецЕсли;
			
			МассивОбъектов = новый Массив;
			
			Для каждого Стр из СтрокиДЗ Цикл
				Если Стр.ВидУзла = "ОбъектМД" Тогда
					Струк = новый Структура("Идентификатор, ПолноеИмя, КоличествоОбъектов", Стр.ПолучитьИдентификатор(), Стр.ПолноеИмя);
					МассивОбъектов.Добавить(Струк);
				КонецЕсли;
			КонецЦикла;
			
			вРассчитатьКоличествоОбъектов(МассивОбъектов);
			
			КоличествоОбъектов = 0;
			Для каждого Стр из МассивОбъектов Цикл
				СтрДЗ = ДеревоОбъектов.НайтиПоИдентификатору(Стр.Идентификатор);
				Если СтрДЗ <> Неопределено Тогда
					КоличествоОбъектов= КоличествоОбъектов + Стр.КоличествоОбъектов;
					СтрДЗ.КоличествоОбъектов = Стр.КоличествоОбъектов;
				КонецЕсли;
			КонецЦикла;
			ТекДанные.КоличествоОбъектов = КоличествоОбъектов;
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция вРассчитатьКоличествоОбъектов(МассивОбъектов)
	УстановитьПривилегированныйРежим(истина);
	
	пИспользоватьПопытку = не ПривилегированныйРежим() и не вЕстьПраваАдминистратора();
	
	Для каждого Элем из МассивОбъектов Цикл
		Запрос = новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК КоличествоОбъектов
		|ИЗ
		|	" + Элем.ПолноеИмя + " КАК ТаблицаБД";
		
		Если пИспользоватьПопытку Тогда
			Попытка
				Выборка = Запрос.Выполнить().Выбрать();
				Элем.КоличествоОбъектов = ?(Выборка.Следующий(), Выборка.КоличествоОбъектов, 0);
			Исключение
				Элем.КоличествоОбъектов = 0;
			КонецПопытки;
		Иначе
			Выборка = Запрос.Выполнить().Выбрать();
			Элем.КоличествоОбъектов = ?(Выборка.Следующий(), Выборка.КоличествоОбъектов, 0);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат истина;
КонецФункции


&НаКлиенте
Процедура _ПоказыватьСтандартныеНастройкиПриИзменении(Элемент)
	Элементы.СтрСтандартныеНастройки.Видимость = _ПоказыватьСтандартныеНастройки;
КонецПроцедуры

&НаКлиенте
Процедура _ПоказыватьТаблицыИИндексыБДПриИзменении(Элемент)
	Элементы.СтрСтруктураХранения.Видимость = _ПоказыватьТаблицыИИндексыБД;
КонецПроцедуры

&НаКлиенте
Процедура _ПоказыватьЗаголовкиВТаблицеПравПриИзменении(Элемент)
	Если не _ПоказыватьЗаголовкиВТаблицеПрав Тогда
		Элементы.ДекорацияРоли.Заголовок = "Роли, имеющие доступ";
		Элементы.ДекорацияПользователи.Заголовок = "Пользователи, имеющие доступ";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ПоискВДеревеОбъектовПриВводеПриИзменении(Элемент)
	Если _ПоискВДеревеОбъектовПриВводе Тогда
		Элементы.ДеревоОбъектов.ПоискПриВводе = ПоискВТаблицеПриВводе.Использовать;
		Элементы.ДеревоОбъектов.ПоложениеСтрокиПоиска = ПоложениеСтрокиПоиска.Низ;
	Иначе
		Элементы.ДеревоОбъектов.ПоискПриВводе = ПоискВТаблицеПриВводе.НеИспользовать;
		Элементы.ДеревоОбъектов.ПоложениеСтрокиПоиска = ПоложениеСтрокиПоиска.Нет;
	КонецЕсли;
КонецПроцедуры


// работа с разделом "Избранное..."
&НаКлиенте
Процедура _ДобавитьВИзбранное(Команда)
	ТекДанные = Элементы.ДеревоОбъектов.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если ТекДанные.ВидУзла = "ОбъектМД" Тогда
			СтрДЗ = ДеревоОбъектов.НайтиПоИдентификатору(мИдентификаторИзбранного).ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(СтрДЗ, ТекДанные);
			вВключитьФлагИзмененияНастроек();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _УдалитьИзИзбранного(Команда)
	ТекДанные = Элементы.ДеревоОбъектов.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если не ПустаяСтрока(ТекДанные.ПолноеИмя) Тогда
			СтрокиДЗ = ДеревоОбъектов.НайтиПоИдентификатору(мИдентификаторИзбранного).ПолучитьЭлементы();
			Для каждого СтрДЗ из СтрокиДЗ Цикл
				Если СтрДЗ.ПолноеИмя = ТекДанные.ПолноеИмя Тогда
					СтрокиДЗ.Удалить(СтрДЗ);
					вВключитьФлагИзмененияНастроек();
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вВключитьФлагИзмененияНастроек()
	_ДатаИзмененияНастроек = ТекущаяДата();
КонецПроцедуры

&НаКлиенте
Процедура _ОчиститьИзбранное(Команда)
	ДеревоОбъектов.НайтиПоИдентификатору(мИдентификаторИзбранного).ПолучитьЭлементы().Очистить();
	вВключитьФлагИзмененияНастроек();
КонецПроцедуры

&НаКлиенте
Процедура _УпорядочитьИзбранное(Команда)
	вУпорядочитьИзбранное(); // плохой способ
	
	Для каждого СтрДЗ из ДеревоОбъектов.ПолучитьЭлементы() Цикл
		Если СтрДЗ.ПолноеИмя = "Избранное" Тогда
			мИдентификаторИзбранного = СтрДЗ.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	вВключитьФлагИзмененияНастроек();
КонецПроцедуры

&НаСервере
Процедура вУпорядочитьИзбранное()
	пДерево = РеквизитФормыВЗначение("ДеревоОбъектов");
	пДерево.Строки.Найти("Избранное", "ПолноеИмя", ложь).Строки.Сортировать("ПолноеИмя");
	ЗначениеВРеквизитФормы(пДерево, "ДеревоОбъектов");
КонецПроцедуры


&НаКлиенте
Процедура _ОткрытьРедакторОбъектов(Команда)
	СтрукПарам = новый Структура("мОбъектСсылка, АдресаХранилищ", Неопределено, _АдресаХранилищ);
	ОткрытьФорму(ПутьКФормам + "ФормаОбъекта", СтрукПарам,,истина);
КонецПроцедуры

&НаКлиенте
Процедура _ОткрытьВыполнитьКод1С(Команда)
	ОткрытьФорму(ПутьКФормам + "ФормаВыполнитьКод1С",,,истина);
КонецПроцедуры

&НаКлиенте
Процедура _ОбновитьНумерациюОбъектов(Команда)
	ТекДанные = Элементы.ДеревоОбъектов.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если ТекДанные.ВидУзла = "ОбъектМД" или ТекДанные.ВидУзла = "Конфигурация" Тогда
			Если не вЕстьПраваАдминистратора() Тогда
				вПоказатьПредупреждение("Нет прав на выполнение операции!");
				Возврат;
			КонецЕсли;
			
			пТекст = ?(ТекДанные.ВидУзла = "Конфигурация", "Нумерация всех объектов будет обновлена. Продолжить?", "Нумерация обекта будет обновлена. Продолжить?");
			ПоказатьВопрос(новый ОписаниеОповещения("вОбновитьНумерациюОбъектовОтвет", ЭтаФорма, ТекДанные.ПолноеИмя), пТекст, РежимДиалогаВопрос.ДаНетОтмена, 20);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ОбновитьНумерациюВсехОбъектов(Команда)
	пТекст = "Нумерация всех объектов будет обновлена. Продолжить?";
	ПоказатьВопрос(новый ОписаниеОповещения("вОбновитьНумерациюОбъектовОтвет", ЭтаФорма, "Конфигурация"), пТекст, РежимДиалогаВопрос.ДаНетОтмена, 20);
КонецПроцедуры

&НаКлиенте
Процедура вОбновитьНумерациюОбъектовОтвет(РезультатВопроса, ДопПарам = Неопределено) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		вОбновитьНумерациюОбъектов(ДопПарам);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция вОбновитьНумерациюОбъектов(Знач ПолноеИмя)
	Если ПолноеИмя = "Конфигурация" Тогда
		Попытка
			ОбновитьНумерациюОбъектов();
		Исключение
			Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	ИначеЕсли СтрНайти(ПолноеИмя, ".") <> 0 Тогда
		ОбъектМД = Метаданные.НайтиПоПолномуИмени(ПолноеИмя);
		
		Если ОбъектМД <> Неопределено Тогда
			Попытка
				ОбновитьНумерациюОбъектов(ОбъектМД);
			Исключение
				Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат истина;
КонецФункции

// работа со структурой хранения базы данных (таблицы и индексы)
&НаКлиенте
Процедура _ЗаполнитьСХ(Команда)
	_СХИндексы.Очистить();
	_СХТаблицы.Очистить();
	
	вЗаполнитьСХ();
	
	Элементы.СтрИндексы.Заголовок = "Все индексы БД (" + _СХИндексы.Количество() + ")";
	Элементы.СтрТаблицы.Заголовок = "Все таблицы БД (" + _СХТаблицы.Количество() + ")";
КонецПроцедуры

&НаСервере
Процедура вЗаполнитьСХ()
	ТабРезультат = ПолучитьСтруктуруХраненияБазыДанных(, не _ПоказыватьСтруктуруХраненияВТерминах1С);
	
	Для каждого Стр из ТабРезультат Цикл
		НС = _СХТаблицы.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Стр);
		
		Если НС.ИмяТаблицы = "" Тогда
			НС.ИмяТаблицы = "<не задано>";
		КонецЕсли;
		Если НС.Метаданные = "" Тогда
			НС.Метаданные = "<не задано>";
		КонецЕсли;
		
		Для каждого СтрХ из Стр.Индексы Цикл
			НС = _СХИндексы.Добавить();
			НС.ИмяИндексаХранения = СтрХ.ИмяИндексаХранения;
			ЗаполнитьЗначенияСвойств(НС, Стр, "ИмяТаблицыХранения, Метаданные");
			Если НС.Метаданные = "" Тогда
				НС.Метаданные = "<не задано>";
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура _СХТаблицыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = ложь;
	кПоказатьСвойстваОбъекта(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура _СХИндексыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = ложь;
	кПоказатьСвойстваОбъекта(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура _ПерейтиКТаблицеОтИндекса(Команда)
	ТекДанные = Элементы._СХИндексы.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Массив = _СХТаблицы.НайтиСтроки(новый Структура("ИмяТаблицыХранения", ТекДанные.ИмяТаблицыХранения));
		Если Массив.Количество() <> 0 Тогда
			Строка = Массив[0].ПолучитьИдентификатор();
			ТекСтрока = _СХТаблицы.НайтиПоИдентификатору(Строка);
			Если ТекСтрока <> Неопределено Тогда
				Элементы._СХТаблицы.ТекущаяСтрока = Строка;
				Элементы.ГруппаТаблицыИИндексы.ТекущаяСтраница = Элементы.СтрТаблицы;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


// работа с пользователями ИБ
&НаКлиенте
Процедура _ЗаполнитьСписокПользователейИБ(Команда)
	_СписокПользователейИБ.Очистить();
	
	пПереченьПолей = "АутентификацияOpenID, АутентификацияОС, АутентификацияСтандартная, Имя, ПарольУстановлен,
	|ПоказыватьВСпискеВыбора, ПолноеИмя, ПользовательОС, РежимЗапуска, УникальныйИдентификатор,
	|ПереченьРолей";
	
	пМассив = вПолучитьПользователейИБ(пПереченьПолей, _ПоказыватьСписокРолейПользователя);
	Для каждого Элем из пМассив Цикл
		ЗаполнитьЗначенияСвойств(_СписокПользователейИБ.Добавить(), Элем);
	КонецЦикла;
	
	_СписокПользователейИБ.Сортировать("Имя");
	
	Если Элементы._СписокПользователейИБПереченьРолей.Видимость <> _ПоказыватьСписокРолейПользователя Тогда
		Элементы._СписокПользователейИБПереченьРолей.Видимость = _ПоказыватьСписокРолейПользователя;
	КонецЕсли;
	
	Элементы.СтрПользователиИБ.Заголовок = "Пользователи (" + пМассив.Количество() + ")";
КонецПроцедуры

&НаСервереБезКонтекста
Функция вПолучитьПользователейИБ(Знач пПереченьПолей, Знач пЗаполнятьПереченьРолнй = ложь)
	пРезультат = новый Массив;
	
	Для каждого Элем из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
		пСтрук = новый Структура(пПереченьПолей);
		ЗаполнитьЗначенияСвойств(пСтрук, Элем);
		
		Если пЗаполнятьПереченьРолнй Тогда
			пСписокРолей = новый СписокЗначений;
			Для каждого пРоль из Элем.Роли Цикл
				пСписокРолей.Добавить(пРоль.Имя);
			КонецЦикла;
			пСписокРолей.СортироватьПоЗначению();
			
			пПереченьРолей = "";
			Для каждого пРоль из пСписокРолей Цикл
				пПереченьРолей = пПереченьРолей + ", " + пРоль.Значение;
			КонецЦикла;
			пСтрук.ПереченьРолей = Сред(пПереченьРолей, 2);
		КонецЕсли;
		
		пРезультат.Добавить(пСтрук);
	КонецЦикла;
	
	Возврат пРезультат;
КонецФункции

&НаКлиенте
Процедура _СписокПользователейИБВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = ложь;
	
	ТекДанные = _СписокПользователейИБ.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если ТекДанные <> Неопределено Тогда
		пСтрук = новый Структура("РежимРаботы, ИдентификаторПользователяИБ", 0, ТекДанные.УникальныйИдентификатор);
		ОткрытьФорму(ПутьКФормам + "ФормаПользовательИБ", пСтрук,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _СписокПользователейИБПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = истина;
	
	Если Копирование Тогда
		ТекДанные = Элемент.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			пСтрук = новый Структура("РежимРаботы, ИдентификаторПользователяИБ", 2, ТекДанные.УникальныйИдентификатор);
			ОткрытьФорму(ПутьКФормам + "ФормаПользовательИБ", пСтрук,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	Иначе
		пСтрук = новый Структура("РежимРаботы", 1);
		ОткрытьФорму(ПутьКФормам + "ФормаПользовательИБ", пСтрук,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _СписокПользователейИБПередУдалением(Элемент, Отказ)
	Отказ = истина;
	
	пВыделенныеСтроки = Элемент.ВыделенныеСтроки;
	пЧисло = пВыделенныеСтроки.Количество();
	
	Если пЧисло = 0 Тогда
		Возврат;
	ИначеЕсли пЧисло = 1 Тогда
		пТекст = СтрШаблон("Пользователь ""%1"" будет удален из информационной базы!
		|Продолжить?", _СписокПользователейИБ.НайтиПоИдентификатору(пВыделенныеСтроки[0]).Имя);
	Иначе
		пТекст = СтрШаблон("Отмеченные пользователи (%1 шт) будут удалены из информационной базы!
		|Продолжить?", пЧисло);
	КонецЕсли;
	
	вПоказатьВопрос(пТекст, "вУдалитьПользователейИБОтвет", пВыделенныеСтроки);
КонецПроцедуры

&НаКлиенте
Процедура вУдалитьПользователейИБОтвет(Ответ, пВыделенныеСтроки) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		пМассив = новый Массив;
		Для каждого Стр из пВыделенныеСтроки Цикл
			ТекДанные = _СписокПользователейИБ.НайтиПоИдентификатору(Стр);
			Если ТекДанные <> Неопределено Тогда
				пМассив.Добавить(ТекДанные.УникальныйИдентификатор);
			КонецЕсли;
		КонецЦикла;
		
		Если пМассив.Количество() <> 0 Тогда
			пМассивУдаленных = вУдалитьПользователейИБ(пМассив);
			Для каждого Элем из пМассивУдаленных Цикл
				Для каждого СтрХ из _СписокПользователейИБ.НайтиСтроки(новый Структура("УникальныйИдентификатор", Элем)) Цикл
					_СписокПользователейИБ.Удалить(СтрХ);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция вУдалитьПользователейИБ(Знач пМассивИдентификаторов)
	пРезультат = новый Массив;
	
	пТекПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	
	Для каждого Элем из пМассивИдентификаторов Цикл
		Попытка
			пUUID = новый УникальныйИдентификатор(Элем);
			
			пПользователь = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(пUUID);
			Если пПользователь = Неопределено или (пТекПользователь <> Неопределено и пТекПользователь.УникальныйИдентификатор = пUUID) Тогда
				Продолжить;
			КонецЕсли;
			
			пПользователь.Удалить();
			пРезультат.Добавить(Элем);
		Исключение
			Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	
	Возврат пРезультат;
КонецФункции


// работа с сеансами
&НаКлиенте
Процедура _УстановитьБлокуировкуСеансов(Команда)
	ОткрытьФорму(ПутьКФормам + "ФормаБлокировкиСеансов",, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура _ЗаполнитьСписокСеансов(Команда)
	_СписокСеансов.Очистить();
	
	пПереченьПолей = "ТекущийСеанс, ИмяКомпьютера, ИмяПриложения, ПредставлениеПриложения, НачалоСеанса, НомерСеанса, НомерСоединения, Пользователь, ИдентификаторПользователяИБ,
	|ИмяМетода, Ключ, Начало, Конец, Наименование, Расположение, РегламентноеЗадание, Состояние, ИдентификаторФоновогоЗадания";
	
	пМассив = вПолучитьСенансы(пПереченьПолей);
	
	Для каждого Элем из пМассив Цикл
		ЗаполнитьЗначенияСвойств(_СписокСеансов.Добавить(), Элем);
	КонецЦикла;
	
	_СписокСеансов.Сортировать("НачалоСеанса");
	
	Элементы.ГруппаСеансы.Заголовок = "Сеансы информационной базы (" + пМассив.Количество() + ")";
КонецПроцедуры

&НаСервереБезКонтекста
Функция вПолучитьСенансы(Знач пПереченьПолей)
	УстановитьПривилегированныйРежим(истина);
	
	пТекНомерСеанса = НомерСеансаИнформационнойБазы();
	
	пРезультат = новый Массив;
	
	Для каждого Элем из ПолучитьСеансыИнформационнойБазы() Цикл
		пСтрук = новый Структура(пПереченьПолей);
		ЗаполнитьЗначенияСвойств(пСтрук, Элем);
		
		пСтрук.ТекущийСеанс = (Элем.НомерСеанса = пТекНомерСеанса);
		
		пСтрук.ПредставлениеПриложения = ПредставлениеПриложения(пСтрук.ИмяПриложения);
		
		пСтрук.Пользователь = Строка(пСтрук.Пользователь);
		
		Если Элем.Пользователь <> Неопределено Тогда
			пСтрук.ИдентификаторПользователяИБ = Строка(Элем.Пользователь.УникальныйИдентификатор);
		КонецЕсли;
		
		пФоновоеЗадание = Элем.ПолучитьФоновоеЗадание();
		Если пФоновоеЗадание <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(пСтрук, пФоновоеЗадание);
			пСтрук.Состояние = Строка(пФоновоеЗадание.Состояние);
			пСтрук.РегламентноеЗадание = Строка(пФоновоеЗадание.РегламентноеЗадание);
			пСтрук.ИдентификаторФоновогоЗадания = Строка(пФоновоеЗадание.УникальныйИдентификатор);
		КонецЕсли;
		
		пРезультат.Добавить(пСтрук);
	КонецЦикла;
	
	Возврат пРезультат;
КонецФункции

&НаКлиенте
Процедура _ЗаполнитьСписокСоединений(Команда)
	_СписокСоединений.Очистить();
	
	пПереченьПолей = "ТекущееСоединение, Активность, ИмяКомпьютера, ИмяПриложения, ПредставлениеПриложения, НачалоСоединения, НомерСеанса, НомерСоединения, Пользователь, ИдентификаторПользователяИБ";
	
	пМассив = вПолучитьСоединения(пПереченьПолей);
	
	Для каждого Элем из пМассив Цикл
		ЗаполнитьЗначенияСвойств(_СписокСоединений.Добавить(), Элем);
	КонецЦикла;
	
	_СписокСоединений.Сортировать("НачалоСоединения");
	
	Элементы.ГруппаСоединения.Заголовок = "Соединения информационной базы (" + пМассив.Количество() + ")";
КонецПроцедуры

&НаСервереБезКонтекста
Функция вПолучитьСоединения(Знач пПереченьПолей)
	УстановитьПривилегированныйРежим(истина);
	
	пТекНомерСоединения = НомерСоединенияИнформационнойБазы();
	
	пРезультат = новый Массив;
	
	Для каждого Элем из ПолучитьСоединенияИнформационнойБазы() Цикл
		пСтрук = новый Структура(пПереченьПолей);
		ЗаполнитьЗначенияСвойств(пСтрук, Элем);
		
		пСтрук.ТекущееСоединение = (Элем.НомерСоединения = пТекНомерСоединения);
		
		пСтрук.Активность = ЗначениеЗаполнено(Элем.НомерСеанса);
		
		пСтрук.ПредставлениеПриложения = ПредставлениеПриложения(пСтрук.ИмяПриложения);
		
		пСтрук.Пользователь = Строка(пСтрук.Пользователь);
		
		Если Элем.Пользователь <> Неопределено Тогда
			пСтрук.ИдентификаторПользователяИБ = Строка(Элем.Пользователь.УникальныйИдентификатор);
		КонецЕсли;
		
		пРезультат.Добавить(пСтрук);
	КонецЦикла;
	
	Возврат пРезультат;
КонецФункции


&НаКлиенте
Процедура _ЗавершитьСеансы(Команда)
	пВыделенныеСтроки = Элементы._СписокСеансов.ВыделенныеСтроки;
	Если пВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	пМассивСеансов = новый Массив;
	Для каждого Элем из пВыделенныеСтроки Цикл
		Стр = _СписокСеансов.НайтиПоИдентификатору(Элем);
		Если не Стр.ТекущийСеанс Тогда
			пМассивСеансов.Добавить(Стр.НомерСеанса);
		КонецЕсли;
	КонецЦикла;
	
	Если пМассивСеансов.Количество() = 0 Тогда
		вПоказатьПредупреждение("Невозможно завершить текущий сеанс!
		|Для выхода из программы можно закрыть главное окно программы.");
		Возврат;
	КонецЕсли;
	
	пТекст = СтрШаблон("Отмеченные сеансы (%1 шт) будут завершены.
	|Продолжить?", пМассивСеансов.Количество());
	
	вПоказатьВопрос(пТекст, "вЗавершитьСеансыОтвет", пМассивСеансов);
КонецПроцедуры

&НаКлиенте
Процедура вЗавершитьСеансыОтвет(Ответ, пМассивСеансов) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если мПараметрыКластера1С = Неопределено Тогда
			мПараметрыКластера1С = вПолучитьПараметрыКластера1С();
		КонецЕсли;
		
		Если мПараметрыКластера1С.ФайловыйВариантИБ Тогда
			Элементы._СписокСеансов_ЗавершитьСеансы.Доступность = ложь;
			Элементы.ГруппаАдминистраторКластера.ТолькоПросмотр = истина;
			вПоказатьПредупреждение("Завершение сеансов реализовано только для клиент-серверного варианта!");
			Возврат;
		КонецЕсли;
		
		Попытка
			вЗавершитьСеансы(пМассивСеансов);
		Исключение
			Сообщить(вСформироватьОписаниеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		_ЗаполнитьСписокСеансов(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция вСформироватьОписаниеОшибки(Знач пИнфоОбОшибке)
	пТекст = пИнфоОбОшибке.Описание;
	
	Пока истина Цикл
		Если пИнфоОбОшибке.Причина <> Неопределено Тогда
			пТекст = пТекст + "
			|" + пИнфоОбОшибке.Причина.Описание;
			пИнфоОбОшибке = пИнфоОбОшибке.Причина;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат пТекст;
КонецФункции


&НаКлиенте
Процедура вЗавершитьСеансы(пМассивСеансов)
	COMСоединитель = Новый COMОбъект(мПараметрыКластера1С.ИмяCOMСоединителя, мПараметрыКластера1С.СерверCOMСоединителя);
	
	пСоединениеСАгентомСервера = вСоединениеСАгентомСервера(
		COMСоединитель,
		мПараметрыКластера1С.АдресАгентаСервера,
		мПараметрыКластера1С.ПортАгентаСервера);
	
	пКластер = вПолучитьКластер(
		пСоединениеСАгентомСервера,
		мПараметрыКластера1С.ПортКластера,
		_ИмяАдминистратораКластера,
		?(ПустаяСтрока(_ИмяАдминистратораКластера), "", _ПарольАдминистратораКластера));
	
	пСеансыКУдалению = новый Массив;
	
	Для каждого Сеанс из пСоединениеСАгентомСервера.GetSessions(пКластер).Выгрузить() Цикл
		Если пМассивСеансов.Найти(Сеанс.SessionID) <> Неопределено Тогда
			пСеансыКУдалению.Добавить(Сеанс);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Сеанс из пСеансыКУдалению Цикл
		ОбработкаПрерыванияПользователя();
		
		Попытка
			пСоединениеСАгентомСервера.TerminateSession(пКластер, Сеанс);
		Исключение
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция вСоединениеСАгентомСервера(COMСоединитель, Знач АдресАгентаСервера, Знач ПортАгентаСервера)
	
	пСтрокаСоединенияСАгентомСервера = "tcp://" + АдресАгентаСервера + ":" + Формат(ПортАгентаСервера, "ЧГ=0");
	пСоединениеСАгентомСервера = COMСоединитель.ConnectAgent(пСтрокаСоединенияСАгентомСервера);
	
	Возврат пСоединениеСАгентомСервера;
	
КонецФункции

&НаКлиенте
Функция вПолучитьКластер(СоединениеСАгентомСервера, Знач ПортКластера, Знач ИмяАдминистратораКластера, Знач ПарольАдминистратораКластера)
	
	Для Каждого Кластер Из СоединениеСАгентомСервера.GetClusters() Цикл
		
		Если Кластер.MainPort = ПортКластера Тогда
			
			СоединениеСАгентомСервера.Authenticate(Кластер, ИмяАдминистратораКластера, ПарольАдминистратораКластера);
			
			Возврат Кластер;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВызватьИсключение СтрШаблон("На рабочем сервере %1 не найден кластер %2",
		СоединениеСАгентомСервера.ConnectionString,
		ПортКластера);
	
КонецФункции

&НаСервереБезКонтекста
Функция вПолучитьПараметрыКластера1С()
	пРезультат = новый Структура;
	
	пСистемнаяИнфо = новый СистемнаяИнформация;
	пСтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	
	пРезультат.Вставить("ФайловыйВариантИБ", (Найти(Врег(пСтрокаСоединения), "FILE=") = 1));
	пРезультат.Вставить("СерверCOMСоединителя", "");
	пРезультат.Вставить("ПортАгентаСервера", 1540);
	пРезультат.Вставить("ПортКластера", 1541);
	пРезультат.Вставить("АдресАгентаСервера", "LocalHost");
	пРезультат.Вставить("ИмяАдминистратораКластера", "");
	пРезультат.Вставить("ПарольАдминистратораКластера", "");
	пРезультат.Вставить("ИмяВКластере", "");
	пРезультат.Вставить("ТипПодключения", "COM");
	пРезультат.Вставить("ИмяCOMСоединителя", "V83.COMConnector");
	пРезультат.Вставить("ИмяАдминистратораИнформационнойБазы", ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
	пРезультат.Вставить("ПарольАдминистратораИнформационнойБазы", "");
	пРезультат.Вставить("Платформа1С", "83");
	
	пМассивСтр = СтрРазделить(пСтрокаСоединения, ";", ложь);
	
	пЗначение = СтрЗаменить(вЗначениеКлючаСтроки(пМассивСтр, "Srvr"), """", "");
	Поз = Найти(пЗначение, ":");
	Если Поз <> 0 Тогда
		пРезультат.Вставить("АдресАгентаСервера", СокрЛП(Сред(пЗначение, 1, Поз-1)));
		пРезультат.Вставить("ПортКластера", Число(Сред(пЗначение, Поз+1)));
	Иначе
		пРезультат.Вставить("АдресАгентаСервера", пЗначение);
		пРезультат.Вставить("ПортКластера", 1541);
	КонецЕсли;
	пРезультат.ПортАгентаСервера = пРезультат.ПортКластера - 1;
	
	пРезультат.Вставить("ИмяВКластере",СтрЗаменить(вЗначениеКлючаСтроки(пМассивСтр, "Ref"), """", ""));
	
	пРезультат.Вставить("ВерсияПриложения", пСистемнаяИнфо.ВерсияПриложения);
	пРезультат.Вставить("КаталогПрограммы", КаталогПрограммы());
	
	Если Найти(пРезультат.ВерсияПриложения, "8.4.") = 1 Тогда
		пРезультат.Вставить("ИмяCOMСоединителя", "V84.COMConnector");
		пРезультат.Вставить("Платформа1С", "84");
	КонецЕсли;
	
	Возврат пРезультат;
КонецФункции

&НаСервереБезКонтекста
Функция вЗначениеКлючаСтроки(МассивСтрок, Ключ, ЗначениеПоУмолчанию = "") Экспорт
	КлючВР = ВРег(Ключ) + "=";
	Для каждого Стр из МассивСтрок Цикл
		пЗначение = СокрЛП(Стр);
		Если Найти(ВРег(пЗначение), КлючВР) = 1 Тогда
			Возврат Сред(пЗначение, СтрДлина(КлючВР)+1); 
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЗначениеПоУмолчанию;
КонецФункции


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "СДРНавигатор.ДобавитьВИзбранное" Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			СтрДЗ = ДеревоОбъектов.НайтиПоИдентификатору(мИдентификаторИзбранного).ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(СтрДЗ, Параметр);
			вВключитьФлагИзмененияНастроек();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


// РАСШИРЕНИЯ КОНФИГУРАЦИИ
&НаКлиенте
Процедура _ЗаполнитьСписокРасширений(Команда)
	_СписокРасширений.Очистить();
	
	пМассив = вПолучитьСписокРасширений();
	
	Для каждого Элем из пМассив Цикл
		ЗаполнитьЗначенияСвойств(_СписокРасширений.Добавить(), Элем);
	КонецЦикла;
	
	//вЗаполнитьСписокРасширений();
	
	_СписокРасширений.Сортировать("Имя");
	
	Элементы.СтрРасширенияКонфигурации.Заголовок = "Расширения конфигурации (" + _СписокРасширений.Количество() + ")";
КонецПроцедуры

&НаСервере
Процедура вЗаполнитьСписокРасширений()
	_СписокРасширений.Очистить();
	
	пМассив = РасширенияКонфигурации.Получить();
	
	Для каждого Элем из пМассив Цикл
		НС = _СписокРасширений.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Элем);
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция вСформироватьСтруктуруСвойствРасширения(пРежим = 0)
	пСтрук = новый Структура("Активно, БезопасныйРежим, Версия, ЗащитаОтОпасныхДействий, Имя, Назначение, ОбластьДействия, Синоним, УникальныйИдентификатор, ХешСумма");
	
	Если пРежим = 1 Тогда
		Для каждого Элем из пСтрук Цикл
			пСтрук[Элем.Ключ] = -1;
		КонецЦикла;
	КонецЕсли;
	
	Возврат пСтрук;
КонецФункции

&НаСервереБезКонтекста
Функция вПроверитьНаличиеТипа(Знач пИмяТипа)
	Попытка
		пТип = Тип(пИмяТипа);
	Исключение
		Возврат ложь;
	КонецПопытки;
	
	Возврат истина;
КонецФункции

&НаСервереБезКонтекста
Функция вПолучитьСписокРасширений()
	пРезультат = новый Массив;
	
	пМассив = РасширенияКонфигурации.Получить();
	
	Для каждого Элем из пМассив Цикл
		пСтрук = вСформироватьСтруктуруСвойствРасширения(1);
		ЗаполнитьЗначенияСвойств(пСтрук, Элем);
		
		Если пСтрук.ЗащитаОтОпасныхДействий = -1 Тогда
			пСтрук.ЗащитаОтОпасныхДействий = Неопределено;
		Иначе
			пСтрук.ЗащитаОтОпасныхДействий = пСтрук.ЗащитаОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях;
		КонецЕсли;
		
		Если пСтрук.ОбластьДействия = -1 Тогда
			пСтрук.ОбластьДействия = Неопределено;
		Иначе
			пСтрук.ОбластьДействия = Строка(пСтрук.ОбластьДействия);
		КонецЕсли;
		
		Если пСтрук.Назначение = -1 Тогда
			пСтрук.Назначение = Неопределено;
		Иначе
			пСтрук.Назначение = Строка(пСтрук.Назначение);
		КонецЕсли;
		
		пРезультат.Добавить(пСтрук);
	КонецЦикла;
	
	Возврат пРезультат;
КонецФункции


// ОТБОР ПО ПОДСИСТЕМАМ
&НаКлиенте
Процедура _УстановитьОтборПоПодсистемам(Команда)
	пОповещениеОЗакрытии = новый ОписаниеОповещения("вПослеЗакрытияОтбораПоПодсистемам", ЭтаФорма);
	
	пСтрук = новый Структура("Отбор", _ОтборПоПодсистемам);
	ОткрытьФорму(ПутьКФормам + "ФормаОтбораПоПодсистемам", пСтрук,,,,,пОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура вПослеЗакрытияОтбораПоПодсистемам(пРезультатЗакрытия, пДопПарам = Неопределено) Экспорт
	Если ТипЗнч(пРезультатЗакрытия) = Тип("Структура") Тогда
		Если пРезультатЗакрытия.Действие = "Отключить" Тогда
			_ОтборПоПодсистемам = новый Структура("ЕстьОтбор", ложь);
		Иначе
			_ОтборПоПодсистемам = пРезультатЗакрытия.Отбор;
			_ОтборПоПодсистемам.Вставить("АдресХранилища", _АдресаХранилищ.Подсистемы);
			
			пСоотвДляПоиска = новый Соответствие;
			Для каждого Элем из _ОтборПоПодсистемам.Подсистемы Цикл
				пСоотвДляПоиска.Вставить(Элем, 1);
			КонецЦикла;
			_ОтборПоПодсистемам.Вставить("СоотвДляПоиска", пСоотвДляПоиска);
		КонецЕсли;
		
		вЗаполнитьДеревоОбъектов();
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция вСформироватьТаблицуПодсистем(Знач АдресХранилища)
	Попытка
		ТабРезультат = ПолучитьИзВременногоХранилища(АдресХранилища);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Если ТабРезультат = -1 или ТабРезультат = Неопределено или ТабРезультат.Колонки.Количество() = 0 Тогда
		ТипСтрока = новый ОписаниеТипов("Строка",,,,новый КвалификаторыСтроки(500));
		
		Кэш = новый Соответствие;
		
		ТабРезультат = новый ТаблицаЗначений;
		ТабРезультат.Колонки.Добавить("Объект", ТипСтрока);
		ТабРезультат.Колонки.Добавить("Имя", ТипСтрока);
		ТабРезультат.Колонки.Добавить("ПолноеИмя", ТипСтрока);
		ТабРезультат.Колонки.Добавить("Синоним", ТипСтрока);
		ТабРезультат.Колонки.Добавить("Комментарий", ТипСтрока);
		
		Коллекция = новый Соответствие;
		вСформироватьКоллекциюПодсистем(, Коллекция);
		
		СтрукДанные = новый Структура("Имя, ПолноеИмя, Синоним, Комментарий");
		Для каждого Элем из Коллекция Цикл
			ОбъектМД = Элем.Ключ;
			
			СтрукДанные.Имя = ОбъектМД.Имя;
			СтрукДанные.ПолноеИмя = ОбъектМД.ПолноеИмя();
			СтрукДанные.Синоним = ОбъектМД.Представление();
			СтрукДанные.Комментарий = ОбъектМД.Комментарий;
			
			Для каждого Элем из ОбъектМД.Состав Цикл
				НС = ТабРезультат.Добавить();
				ЗаполнитьЗначенияСвойств(НС, СтрукДанные);
				
				НС.Объект = Элем.ПолноеИмя();
			КонецЦикла;
		КонецЦикла;
		
		ТабРезультат.Сортировать("Объект, Имя");
		ТабРезультат.Индексы.Добавить("Объект");
		
		АдресХранилища = ПоместитьВоВременноеХранилище(ТабРезультат, АдресХранилища);
	КонецЕсли;
	
	Возврат ТабРезультат;
КонецФункции

&НаСервереБезКонтекста
Процедура вСформироватьКоллекциюПодсистем(Знач Подсистема = Неопределено, Знач Коллекция)
	Если Подсистема = Неопределено Тогда
		Для каждого ОбъектМД из Метаданные.Подсистемы Цикл
			вСформироватьКоллекциюПодсистем(ОбъектМД, Коллекция);
		КонецЦикла;
	Иначе
		Коллекция.Вставить(Подсистема);
		Для каждого ОбъектМД из Подсистема.Подсистемы Цикл
			Коллекция.Вставить(ОбъектМД);
			вСформироватьКоллекциюПодсистем(ОбъектМД, Коллекция);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
