   
   
Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаОбъекта" И Не ЗначениеЗаполнено(Параметры) Тогда 
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = "ФормаНовогоЭлемента";
	КонецЕсли;
	
КонецПроцедуры
   
Функция ПолучитьСостояниеКластера(Кластер) Экспорт
		
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьПараметрыАдминистрированияКластера(Кластер) Экспорт
	
	ПараметрыАдминистрированияКластера = АдминистрированиеКластера.ПараметрыАдминистрированияКластера();
	ЗаполнитьЗначенияСвойств(ПараметрыАдминистрированияКластера, Кластер);
	
	Возврат ПараметрыАдминистрированияКластера;
		
КонецФункции

Функция ПолучитьМакетОписанияКластера(Кластер) Экспорт
	
	МакетСводнойИнформации = Справочники.Кластеры1С.ПолучитьМакет("МакетСводнойИнформации");
	
	ОбластьЗаголовок				= МакетСводнойИнформации.ПолучитьОбласть("Заголовок");
	ОбластьСтрокаСоставаКластера	= МакетСводнойИнформации.ПолучитьОбласть("СтрокаСоставаКластера");
	ОбластьПодробнее				= МакетСводнойИнформации.ПолучитьОбласть("ОбластьПодробнее");	
	ОбластьБазыЗаголовок			= МакетСводнойИнформации.ПолучитьОбласть("БазыЗаголовок");
	ОбластьБазыСтрока				= МакетСводнойИнформации.ПолучитьОбласть("БазыСтрока");
	
	ТабличныйДокументОписание = Новый ТабличныйДокумент();
	ТабличныйДокументОписание.Вывести(ОбластьЗаголовок);
	
	ПараметрыАдминистрированияКластера = ПолучитьПараметрыАдминистрированияКластера(Кластер);
	
	ОписаниеКластераМассив = АдминистрированиеКластера.СвойстваКластеров(ПараметрыАдминистрированияКластера);
	
	Для Каждого ЭлементМассиваКластеров Из ОписаниеКластераМассив Цикл
		
		ОбластьСтрокаСоставаКластера.Параметры.ИмяКластера		= ЭлементМассиваКластеров["name"];  	
		ОбластьСтрокаСоставаКластера.Параметры.ИмяКомпьютера	= ЭлементМассиваКластеров["host"];
		ОбластьСтрокаСоставаКластера.Параметры.ПортКластера 	= ЭлементМассиваКластеров["port"]; 
		ОбластьСтрокаСоставаКластера.Параметры.Идинтификатор	= ЭлементМассиваКластеров["cluster"]; 
		ТабличныйДокументОписание.Вывести(ОбластьСтрокаСоставаКластера);
		
		ОбластьПодробнее.Параметры.ОписаниеКластера = Новый Структура("ПараметрыКластера", ЭлементМассиваКластеров);
		ТабличныйДокументОписание.Вывести(ОбластьПодробнее);
		
	КонецЦикла;
	
	МассивБазКластера = АдминистрированиеКластера.СвойстваИнформационныхБаз(Кластер.ИдентификаторКластера, 
																				 ПараметрыАдминистрированияКластера);

	ТабличныйДокументОписание.Вывести(ОбластьБазыЗаголовок);

	Для Каждого БазаКластера Из МассивБазКластера Цикл
		
		ЗарегестрированнаяБаза = Справочники.ИнформационныеБазы.НайтиПоРеквизиту("ИдентификаторБазы", 
																						БазаКластера["infobase"]);
		
		Если Не ЗначениеЗаполнено(ЗарегестрированнаяБаза) Тогда
			ОбластьБазыСтрока.Параметры.НаименованиеБазы = БазаКластера["name"];
			ОбластьБазыСтрока.Параметры.ПараметрыБазы = Новый Структура("ПараметрыБазы", БазаКластера);	
			ТабличныйДокументОписание.Вывести(ОбластьБазыСтрока);
		КонецЕсли;
					
	КонецЦикла;
	
	Возврат ТабличныйДокументОписание;
	
КонецФункции

Процедура СоздатьБазыПоДаннымКластера(Кластер) Экспорт
	
	БлокировкаКластера = Новый БлокировкаДанных;

	ЭлементБлокировки = БлокировкаКластера.Добавить("Справочник.Кластеры1С");
	ЭлементБлокировки.УстановитьЗначение("Ссылка", Кластер);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	
	НачатьТранзакцию();
	Попытка
		
		БлокировкаКластера.Заблокировать();
	
	Исключение
		ОтменитьТранзакцию();
		Возврат;
	КонецПопытки;
	
	СтрукутараПараметров = Константы.ОбщиеПараметрыАутентификации.ПолучитьСтруктуруНастроекПоУмолчанию();
	
	ПараметрыКластера = АдминистрированиеСерверов.ПолучитьПараметрыКластера(Кластер);
	
	Для Каждого АдминистрированиеБазыДанных Из ПараметрыКластера.ИнформационныеБазы Цикл
		
		ИнформационнаяБазаСсылка = Справочники.ИнформационныеБазы.НайтиПоРеквизиту("ИдентификаторБазы", АдминистрированиеБазыДанных.ИдентификаторИнформационнойБазы);
		Если ЗначениеЗаполнено(ИнформационнаяБазаСсылка) Тогда
			Продолжить;
		Иначе
			ИнформационнаяБаза = Справочники.ИнформационныеБазы.СоздатьЭлемент();
		КонецЕсли;
		
		Попытка
			АдминистрированиеБазыДанных.ВыполнитьАутентификацию("", "");
		Исключение      
			Попытка
				АдминистрированиеБазыДанных.ВыполнитьАутентификацию(СтрукутараПараметров.ПользовательИБ, СтрукутараПараметров.ПарольИБ);
			Исключение
			КонецПопытки;
		КонецПопытки;
		
		ИнформационнаяБаза.Владелец		= Кластер;
		ИнформационнаяБаза.Наименование	= АдминистрированиеБазыДанных.Имя;
		ИнформационнаяБаза.ИмяИБ			= АдминистрированиеБазыДанных.Имя;
		ИнформационнаяБаза.СерверБД		= Справочники.СерверыБД.НайтиПоРеквизиту("ИмяСервера", АдминистрированиеБазыДанных.СерверБазДанных);
		ИнформационнаяБаза.БазаДанных		= АдминистрированиеБазыДанных.ИмяБазыДанных;
		
		ИнформационнаяБаза.ИдентификаторБазы	= АдминистрированиеБазыДанных.ИдентификаторИнформационнойБазы;
		ИнформационнаяБаза.ОписаниеВКластере	= АдминистрированиеБазыДанных.Описание;    
		
		ИнформационнаяБаза.Записать();
		
	КонецЦикла; 
	
	КластерОбъект = Кластер.ПолучитьОбъект();
	КластерОбъект.ОбменДанными.Загрузка = Истина;
	КластерОбъект.ИдентификаторЗадания = Неопределено;
	КластерОбъект.Записать();   
	Попытка
		ЗафиксироватьТранзакцию();	
	Исключение
		ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры