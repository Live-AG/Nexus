   
Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаОбъекта" И Не ЗначениеЗаполнено(Параметры) Тогда 
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = "ФормаНовогоЭлемента";
	КонецЕсли;
	
КонецПроцедуры
   
Функция ПолучитьСостояниеКластера(Кластер) Экспорт
		
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьПараметрыАдминистрированияКластера(Кластер) Экспорт
	
	ПараметрыАдминистрированияКластера = АдминистрированиеКластера.ПараметрыАдминистрированияКластера();
	ЗаполнитьЗначенияСвойств(ПараметрыАдминистрированияКластера, Кластер);
	
	Возврат ПараметрыАдминистрированияКластера;
		
КонецФункции

Функция ПолучитьМакетОписанияКластера(Кластер) Экспорт
	
	МакетСводнойИнформации = Справочники.Кластеры1С.ПолучитьМакет("МакетСводнойИнформации");
	
	ОбластьЗаголовок				= МакетСводнойИнформации.ПолучитьОбласть("Заголовок");
	ОбластьСтрокаСоставаКластера	= МакетСводнойИнформации.ПолучитьОбласть("СтрокаСоставаКластера");
	ОбластьПодробнее				= МакетСводнойИнформации.ПолучитьОбласть("ОбластьПодробнее");	
	ОбластьБазыЗаголовок			= МакетСводнойИнформации.ПолучитьОбласть("БазыЗаголовок");
	ОбластьБазыСтрока				= МакетСводнойИнформации.ПолучитьОбласть("БазыСтрока");
	
	ТабличныйДокументОписание = Новый ТабличныйДокумент();
	ТабличныйДокументОписание.Вывести(ОбластьЗаголовок);
	
	ПараметрыАдминистрированияКластера = ПолучитьПараметрыАдминистрированияКластера(Кластер);
	
	ОписаниеКластераМассив = АдминистрированиеКластера.СвойстваКластеров(ПараметрыАдминистрированияКластера);
	
	Для Каждого ЭлементМассиваКластеров Из ОписаниеКластераМассив Цикл
		
		ОбластьСтрокаСоставаКластера.Параметры.ИмяКластера		= ЭлементМассиваКластеров["name"];  	
		ОбластьСтрокаСоставаКластера.Параметры.ИмяКомпьютера	= ЭлементМассиваКластеров["host"];
		ОбластьСтрокаСоставаКластера.Параметры.ПортКластера 	= ЭлементМассиваКластеров["port"]; 
		ОбластьСтрокаСоставаКластера.Параметры.Идинтификатор	= ЭлементМассиваКластеров["cluster"]; 
		ТабличныйДокументОписание.Вывести(ОбластьСтрокаСоставаКластера);
		
		ОбластьПодробнее.Параметры.ОписаниеКластера = Новый Структура("ПараметрыКластера", ЭлементМассиваКластеров);
		ТабличныйДокументОписание.Вывести(ОбластьПодробнее);
		
	КонецЦикла;
	
	МассивБазКластера = АдминистрированиеКластера.СвойстваИнформационныхБаз(Кластер.ИдентификаторКластера, 
																				 ПараметрыАдминистрированияКластера);

	ТабличныйДокументОписание.Вывести(ОбластьБазыЗаголовок);

	Для Каждого БазаКластера Из МассивБазКластера Цикл
		
		ЗарегестрированнаяБаза = Справочники.ИнформационныеБазы.НайтиПоРеквизиту("ИдентификаторБазы", 
																						БазаКластера["infobase"]);
		
		Если Не ЗначениеЗаполнено(ЗарегестрированнаяБаза) Тогда
			ОбластьБазыСтрока.Параметры.НаименованиеБазы = БазаКластера["name"];
			ОбластьБазыСтрока.Параметры.ПараметрыБазы = Новый Структура("ПараметрыБазы", БазаКластера);	
			ТабличныйДокументОписание.Вывести(ОбластьБазыСтрока);
		КонецЕсли;
					
	КонецЦикла;
	
	Возврат ТабличныйДокументОписание;
	
КонецФункции

Функция НачатьРегистрациюБазКластера(Кластер) Экспорт

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	ПараметрыВыполнения.КлючФоновогоЗадания		= Кластер.УникальныйИдентификатор();
	ПараметрыВыполнения.ОжидатьЗавершение			= 0;
	ПараметрыВыполнения.ЗапуститьВФоне				= Истина;
	
	Результат = ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, 
												"Справочники.Кластеры1С.СоздатьБазыПоДаннымКластера",
												Кластер);
	
	ЗаписьТекущегоЗадания = РегистрыСведений.ТекущиеЗаданияОбъектов.СоздатьМенеджерЗаписи(); 
	ЗаписьТекущегоЗадания.ИсточникЗадания				= Кластер; 
	ЗаписьТекущегоЗадания.ИдентификаторЗадания	= Результат.ИдентификаторЗадания;  
	ЗаписьТекущегоЗадания.Записать();
	
	Возврат Результат;

КонецФункции // НачатьРегистрациюБазКластера()

Процедура СоздатьБазыПоДаннымКластера(Кластер) Экспорт
	
	БлокировкаКластера = Новый БлокировкаДанных;

	ЭлементБлокировки = БлокировкаКластера.Добавить("Справочник.Кластеры1С");
	ЭлементБлокировки.УстановитьЗначение("Ссылка", Кластер);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	
	НачатьТранзакцию();
	Попытка
		
		БлокировкаКластера.Заблокировать();
	
		СтрукутараПараметров = Константы.ОбщиеПараметрыАутентификации.ПолучитьСтруктуруНастроекПоУмолчанию();
		ПараметрыАвторизации = Новый Структура("ПользовательИБ, ПарольИБ");
		ЗаполнитьЗначенияСвойств(ПараметрыАвторизации, СтрукутараПараметров);
		
		ПараметрыКластера = АдминистрированиеСерверов.ПолучитьПараметрыКластера(Кластер);
		
		МассивИдентификаторовАктуальныхБаз = Новый Массив;
		
		Для Каждого АдминистрированиеБазыДанных Из ПараметрыКластера.ИнформационныеБазы Цикл
			ЗарегестрироватьИнформационнуюБазу(Кластер, АдминистрированиеБазыДанных, ПараметрыАвторизации);
			МассивИдентификаторовАктуальныхБаз.Добавить(АдминистрированиеБазыДанных.ИдентификаторИнформационнойБазы);
		КонецЦикла;
	
		ПроверитьНеактуальностьЗарегистрированныхБаз(Кластер, МассивИдентификаторовАктуальныхБаз);
	
		ЗафиксироватьТранзакцию();	
	Исключение
		ОтменитьТранзакцию();
		ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
	МенеджерЗаписи = РегистрыСведений.ТекущиеЗаданияОбъектов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ИсточникЗадания = Кластер;
	МенеджерЗаписи.Прочитать();
	МенеджерЗаписи.Удалить();
	
КонецПроцедуры

Процедура ПроверитьНеактуальностьЗарегистрированныхБаз(Кластер, ИдентификаторыБаз)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
						|	ИнформационныеБазы.Ссылка КАК ИнформационнаяБаза
						|ИЗ
						|	Справочник.ИнформационныеБазы КАК ИнформационныеБазы
						|ГДЕ
						|	НЕ ИнформационныеБазы.ИдентификаторБазы В (&ИдентификаторыБаз)
						|	И ИнформационныеБазы.Владелец = &Кластер1С";
	
	Запрос.УстановитьПараметр("Кластер1С",				Кластер);
	Запрос.УстановитьПараметр("ИдентификаторыБаз",	ИдентификаторыБаз);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		ЗаписьРегистра = РегистрыСведений.ПроверкиОбъектов.СоздатьМенеджерЗаписи();
		ЗаписьРегистра.Объект		= Выборка.ИнформационнаяБаза;
		ЗаписьРегистра.Правило		= Справочники.ПравилаПроверкиОбъектов.РегистрацияИнформационнойБазы;
		ЗаписьРегистра.Результат	= Перечисления.ТипРезультатаПроверкиОбъектов.Предупреждение;
		ЗаписьРегистра.Записать();		
	
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗарегестрироватьИнформационнуюБазу(Кластер,
										АдминистрированиеБазыДанных,
										ПараметрыАвторизации = Неопределено,
										ПерезаполнитьДанные = Ложь) Экспорт;
										
										
	Если ПараметрыАвторизации = Неопределено Тогда
		ПараметрыАвторизации = Новый Структура("ПользовательИБ, ПарольИБ");
	КонецЕсли;
	
	ИнформационнаяБазаСсылка = Справочники.ИнформационныеБазы.НайтиПоРеквизиту("ИдентификаторБазы", 
														АдминистрированиеБазыДанных.ИдентификаторИнформационнойБазы);
	Если ЗначениеЗаполнено(ИнформационнаяБазаСсылка) Тогда 
		Если ПерезаполнитьДанные Тогда
			ИнформационнаяБаза = ИнформационнаяБазаСсылка.ПолучитьОбъект();
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		ИнформационнаяБаза = Справочники.ИнформационныеБазы.СоздатьЭлемент();
		ИнформационнаяБаза.ИдентификаторБазы	= АдминистрированиеБазыДанных.ИдентификаторИнформационнойБазы;
	КонецЕсли;
	
	Попытка
		АдминистрированиеБазыДанных.ВыполнитьАутентификацию(ИнформационнаяБаза.ИмяПользователяИБ, 
														ИнформационнаяБаза.ПарольПользователяИБ);
	Исключение
		Попытка
			АдминистрированиеБазыДанных.ВыполнитьАутентификацию(ПараметрыАвторизации.ПользовательИБ, 
															ПараметрыАвторизации.ПарольИБ);
		Исключение
		КонецПопытки;
	КонецПопытки;
	
	ИнформационнаяБаза.Владелец		= Кластер;
	ИнформационнаяБаза.Наименование	= АдминистрированиеБазыДанных.Имя;
	ИнформационнаяБаза.ИмяИБ			= АдминистрированиеБазыДанных.Имя;
	ИнформационнаяБаза.СерверБД		= Справочники.СерверыБД.НайтиПоРеквизиту("ИмяСервера", АдминистрированиеБазыДанных.СерверБазДанных);
	ИнформационнаяБаза.БазаДанных		= АдминистрированиеБазыДанных.ИмяБазыДанных;
	
	ИнформационнаяБаза.ОписаниеВКластере	= АдминистрированиеБазыДанных.Описание;
	
	ИнформационнаяБаза.Записать();
	
КонецПроцедуры