			  
			  
#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы
// Раздел "Обработчики событий формы" содержит процедуры-обработчики событий формы: ПриСозданииНаСервере, ПриОткрытии и т.п.

 &НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ТекущаяСтраницаПараметров) Тогда
		ТекущаяСтраницаПараметров = "ГруппаИнформация";
	КонецЕсли;    
	
	//Отладка
	УстановитьОтображениеНезаполненныхЭлементов();	
	
	//#TODO Получение Свойств скриптами
	ЖурналРегистрации = "ClickHouse";
	ОбъемБазы = "4.7 Гб (из 11 Гб)";
	КоличествоАктивныхСеансов = 18;
	Объект.ИспользуетсяПо = ?(ЗначениеЗаполнено(Объект.ИспользуетсяПо), Объект.ИспользуетсяПо, ТекущаяДата());
	
	ОтобразитьГрафикАктивности();
	ОтобразитьЭлементыАвторизации(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ВыполнитьЗаполнениеСвойствБазы();
	
КонецПроцедуры   
 

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы
// Раздел "Обработчики событий элементов шапки формы" содержит процедуры-обработчики элементов, расположенных в основной части формы (все, что не связано с таблицами на форме).
#КонецОбласти


#Область ОбработчикиКомандФормы
// Раздел "Обработчики команд формы" содержит процедуры-обработчики команд формы (имена которых задаются в свойстве Действие команд формы).

&НаКлиенте
Процедура КонфигурацияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ВерсияКонфигурации) Тогда
		
		ОткрытьФорму("Справочник.ВерсииКонфигураций.ФормаОбъекта", 
					Новый Структура("Ключ", Объект.ВерсияКонфигурации), 
					Элемент, ЭтаФорма, 
					, , , 
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе                                                                                                                 
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ИмяЭлемента", "Конфигурация");
		СтруктураПараметров.Вставить("ИмяРеквизита", "ВерсияКонфигурации");
		ОписаниеОпопвещенияВыбора = Новый ОписаниеОповещения("ОбработкаВыбораЗначенияРеквизита", ЭтотОбъект, СтруктураПараметров);
		
		ПараметрыФормыВыбора = Новый Структура;
		ПараметрыФормыВыбора.Вставить("РежимВыбора", Истина);
		
		ОткрытьФорму("Справочник.ВерсииКонфигураций.ФормаВыбора", 
					ПараметрыФормыВыбора, 
					Элемент, ЭтаФорма, 
					, ,
					ОписаниеОпопвещенияВыбора,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца)
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура БлокировкаРегламентныхЗаданийПриИзменении(Элемент)
	
	ОписаниеОбработчикаВопроса = Новый ОписаниеОповещения("ИзменениеБлокировкиРегламентныхЗаданий", ЭтотОбъект, БлокировкаРегламентныхЗаданий); 
	ТекстВопроса = ?(БлокировкаРегламентныхЗаданий = Истина, "Установить блокировку регламентных заданий?", "Снять блокировку регламентных заданий?");
	ПоказатьВопрос(ОписаниеОбработчикаВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры  

&НаКлиенте
Процедура ИзменениеБлокировкиРегламентныхЗаданий(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		УстановитьБлокировкуРегламентныхЗаданийНаСервере(Объект.Ссылка, БлокировкаРегламентныхЗаданий);
	Иначе
		БлокировкаРегламентныхЗаданий = Не БлокировкаРегламентныхЗаданий;
	КонецЕсли;

КонецПроцедуры // ИзменениеБлокировкиРегламентныхЗаданий()

&НаКлиенте
Процедура ОткрытьФормуАвторизации(Команда)
	
	ОписаниеДействияАвторизации = Новый ОписаниеОповещения("ОбработатьДанныеАвторизации", ЭтотОбъект); 
	ОткрытьФорму("ОбщаяФорма.ФормаАвторизации", 
				Новый Структура("ИмяПользователя, ПарольПользователя", Объект.ИмяПользователяИБ, Объект.ПарольПользователяИБ), 
				ЭтаФорма, 
				ЭтаФорма, 
				, , 
				ОписаниеДействияАвторизации, 
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработатьДанныеАвторизации(Результат, ДополнительныеПараметры) Экспорт

	Если ЗначениеЗаполнено(Результат) Тогда
		Объект.ИмяПользователяИБ		= Результат.ИмяПользователя;
		Объект.ПарольПользователяИБ	= Результат.ПарольПользователя;
		
		Записать();
		
		ВыполнитьЗаполнениеСвойствБазы();
	КонецЕсли;

КонецПроцедуры // ОбработатьДанныеАвторизации()


#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// Раздел "Служебные процедуры и функции" имеет такое же предназначение, что и в общих модулях.
#КонецОбласти			  
			  
			  
&НаСервере
Процедура УстановитьОтображениеНезаполненныхЭлементов()
	
	//ОформлениеСсылки = Новый Структура("Шрифт, ЦветТекста", Новый Шрифт(, 11, , , Истина), ЦветаСтиля.ГиперссылкаЦвет);
	//ОформлениеПустойСсылки = Новый Структура("Шрифт, ЦветТекста", Новый Шрифт(, 11, , , Истина), ЦветаСтиля.ЦветПустойГиперссылки);
	
	МассивПроверяемыхРеквизитов = Новый Массив;
	МассивПроверяемыхРеквизитов.Добавить("ВерсияКонфигурации");
	//МассивПроверяемыхРеквизитов.Добавить("ИспользуетсяПо");
	МассивПроверяемыхРеквизитов.Добавить("Назначение");
	МассивПроверяемыхРеквизитов.Добавить("Ответственный");
	МассивПроверяемыхРеквизитов.Добавить("Проект");
	МассивПроверяемыхРеквизитов.Добавить("ВебСервер");
	МассивПроверяемыхРеквизитов.Добавить("ХранилищеКонфигурации");

	Для Каждого ПроверяемогоРеквизита Из МассивПроверяемыхРеквизитов Цикл

		ЗначениеРеквизитаЗаполнено	= ЗначениеЗаполнено(Объект[ПроверяемогоРеквизита]);
		ЭлементПустогоРеквизита		= Элементы["Группа" + ПроверяемогоРеквизита + "Пустая"]; 
		ЭлементРеквизита			= Элементы[ПроверяемогоРеквизита];
		
		ЭлементПустогоРеквизита.Видимость	= Не ЗначениеРеквизитаЗаполнено;
		ЭлементРеквизита.Видимость			= ЗначениеРеквизитаЗаполнено; 
	КонецЦикла;
	
КонецПроцедуры // УстановитьОтображениеНезаполненныхЭлементов()


&НаКлиенте
Процедура ОбработкаВыбораЗначенияРеквизита(Результат, ДополнительныеПараметры) Экспорт

	Если ЗначениеЗаполнено(Результат) Тогда
		Объект[ДополнительныеПараметры.ИмяРеквизита] = Результат;  
		Записать(Новый Структура("ЗаписьВФормеПросмотра"));
		Элементы.ДекорацияКонфигурацияПустая.Видимость = Ложь;
		ЭтотОбъект[ДополнительныеПараметры.ИмяЭлемента] = Новый ФорматированнаяСтрока(Строка(Результат), 
																				Новый Шрифт(, 12, , , Истина), 
																				);   
	КонецЕсли;	
	
КонецПроцедуры // ОбработкаВыбораЗначенияРеквизита()     

&НаСервере
Процедура ОтобразитьГрафикАктивности()
	
	Справочники.ИнформационныеБазы.ПолучитьГрафикПоказателейАктивности(Объект.Ссылка, СводнаяИнформация);

КонецПроцедуры // ОтобразитьГрафикАктивности()

&НаКлиенте
Процедура КомандаРедактировать(Команда)

	//ВыполнитьЗаполнениеСвойствБазы();
	//ОтобразитьГрафикАктивности();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура Прототип_ПолучитьПараметрыКонфигурацииНаСервере(ИнформационнаяБаза)
	
	//#TODO Получить Метаданные Базы
	КаталогФайловБазы = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор()) + ПолучитьРазделительПутиСервера(); 
	
	СоздатьКаталог(КаталогФайловБазы);
	
	
	УдалитьФайлы(КаталогФайловБазы);	
	

КонецПроцедуры // Прототип_ПолучитьПараметрыКонфигурацииНаСервере()

&НаСервере
Процедура ОтобразитьДлительныеОперацииПолученияСвойств(ДлительнаяОперацияАктивна)
	
	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить("ОбъемБазы");
	МассивРеквизитов.Добавить("КоличествоАктивныхСеансов");
	МассивРеквизитов.Добавить("БлокировкаНачалаСеансов");
	МассивРеквизитов.Добавить("БлокировкаРегламентныхЗаданий");
	
	Для Каждого ЭлементМассива Из МассивРеквизитов Цикл
		Элементы[ЭлементМассива].Видимость = Не ДлительнаяОперацияАктивна;
		Элементы["Группа" + ЭлементМассива + "_ПолучениеДанных"].Видимость = ДлительнаяОперацияАктивна;		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьЭлементыАвторизации(АвторизацияПройдена)

	Элементы.ГруппаАдминистрированиеДекорация.Видимость = Не АвторизацияПройдена;
	Элементы.ОткрытьФормуАвторизации.Видимость = Не АвторизацияПройдена;

КонецПроцедуры // ОтобразитьПараметрыАвторизации()

&НаСервереБезКонтекста
Процедура УстановитьБлокировкуРегламентныхЗаданийНаСервере(ИнформационнаяБаза, Заблокировать)

	АдминистрированиеИнформационныхБаз.УстановитьБлокировкуРегламентныхЗаданий(ИнформационнаяБаза, Заблокировать);					

КонецПроцедуры // УстановитьБлокировкуРегламентныхЗаданийНаСервере()


#Область ДлительныеОперации

&НаСервере
Функция НачатьПолучениеСвойствБазы()
	
	ОтобразитьДлительныеОперацииПолученияСвойств(Истина);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.КлючФоновогоЗадания		= Объект.Ссылка.УникальныйИдентификатор();
	ПараметрыВыполнения.ОжидатьЗавершение			= 0;
	ПараметрыВыполнения.ЗапуститьВФоне				= Истина;
	
	Результат = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, 
												"АдминистрированиеИнформационныхБаз.ПолучитьСвойстваИнформационнойБазы",
												Объект.Ссылка);
												
	Возврат Результат;											
													
КонецФункции

&НаКлиенте
Процедура ВыполнитьЗаполнениеСвойствБазы()
	
	ДлительнаяОперация = НачатьПолучениеСвойствБазы();
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьРезультатПолученияСвойств", ЭтотОбъект);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатПолученияСвойств(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;    
	
	Если Результат.Статус = "Выполнено" Тогда
		СтруктураСвойств = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если ЗначениеЗаполнено(СтруктураСвойств) Тогда     
			
			ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураСвойств);
			ОтобразитьЭлементыАвторизации(СтруктураСвойств.АвторизацияПройдена);
			ОтобразитьДлительныеОперацииПолученияСвойств(Ложь);
			
			Если СтруктураСвойств.АвторизацияПройдена = Истина Тогда
				ПроверкаИзмененныхРеквизитов(СтруктураСвойств);
			КонецЕсли;
		КонецЕсли;   
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти  


&НаКлиенте
Процедура ПроверкаИзмененныхРеквизитов(СтруктураСвойств)

	Если ЗначениеЗаполнено(СтруктураСвойств.ИмяБазыДанных) И Объект.БазаДанных <> СтруктураСвойств.ИмяБазыДанных Тогда
		Объект.БазаДанных = СтруктураСвойств.ИмяБазыДанных;
		Записать();
	КонецЕсли;

КонецПроцедуры // ПроверкаИзмененныхРеквизитов()

&НаКлиенте
Процедура ДекорацияНазначениеНеЗаполненоНажатие(Элемент)
	
	ВыбратьЗначениеРеквизита(Элемент, "Назначение", "Перечисление.НазначенияИБ.ФормаВыбора");
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтветственныйНеЗаполненоНажатие(Элемент)
	
	ВыбратьЗначениеРеквизита(Элемент, "Ответственный", "Справочник.ПользователиИБ.ФормаВыбора");
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПроектНеЗаполненоНажатие(Элемент)
	
	ВыбратьЗначениеРеквизита(Элемент, "Проект", "Справочник.Проекты.ФормаВыбора");
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВебСерверНеЗаполненоНажатие(Элемент)
	
	ВыбратьЗначениеРеквизита(Элемент, "ВебСервер", "Справочник.ВебСерверы.ФормаВыбора");
	
КонецПроцедуры 

&НаКлиенте
Процедура ДекорацияХранилищеКонфигурацииНеЗаполненоНажатие(Элемент)
	
	ВыбратьЗначениеРеквизита(Элемент, "ХранилищеКонфигурации", "Справочник.ХранилищаКонфигураций.ФормаВыбора");	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЗначениеРеквизита(Элемент, ИмяРеквизита, ИмяФормы)

	ОписаниеОпопвещенияПриВыборе = Новый ОписаниеОповещения("ОбработатьВыборРеквизита", ЭтотОбъект, ИмяРеквизита);
	ОткрытьФорму(ИмяФормы, 
				Новый Структура("РежимВыбора", Истина), 
				Элемент, 
				Элемент, 
				, 
				, 
				ОписаниеОпопвещенияПриВыборе, 
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры // ВыбратьЗначениеЗеквизита()


&НаКлиенте
Процедура ОбработатьВыборРеквизита(Значение, ИмяРеквизита) Экспорт

	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьЗначениеРеквизита(Значение, ИмяРеквизита);

КонецПроцедуры


&НаКлиенте
Процедура УстановитьЗначениеРеквизита(Значение, ИмяРеквизита)

	Если Объект[ИмяРеквизита] <> Значение Тогда
		Объект[ИмяРеквизита] = Значение;
		Записать();
	
		ЗначениеРеквизитаЗаполнено = ЗначениеЗаполнено(Значение);
		Элементы["Группа" + ИмяРеквизита + "Пустая"].Видимость = Не ЗначениеРеквизитаЗаполнено; 
		Элементы[ИмяРеквизита].Видимость = ЗначениеРеквизитаЗаполнено;
	КонецЕсли;	

КонецПроцедуры // УстановитьЗначениеРеквизита()

&НаКлиенте
Процедура КомандаИзменитьОтветственного(Команда)
	
	ВыбратьЗначениеРеквизита(Элементы.ДекорацияОтветственныйНеЗаполнено, "Ответственный", "Справочник.ПользователиИБ.ФормаВыбора");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИзменитьПроект(Команда)
	
	ВыбратьЗначениеРеквизита(Элементы.ДекорацияПроектНеЗаполнено, "Проект", "Справочник.Проекты.ФормаВыбора");    
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоАктивныхСеансовНажатие(Элемент, СтандартнаяОбработка)
	
	ОткрытьФорму("Справочник.ИнформационныеБазы.Форма.ФормаПользователей",
				Новый Структура("Ключ", Объект.Ссылка),
				ЭтотОбъект,
				Истина,
				ЭтотОбъект.Окно,
				"e1cib/command/Справочник.ИнформационныеБазы.Команда.Пользователи");
				
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновить(Команда)
	
	ВыполнитьЗаполнениеСвойствБазы();
	ОтобразитьГрафикАктивности();
	
КонецПроцедуры




