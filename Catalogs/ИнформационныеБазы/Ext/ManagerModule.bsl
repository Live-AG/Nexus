	
	
#Область ПрограммныйИнтерфейс

Процедура ПолучитьГрафикПоказателейАктивности(ИнформационнаяБаза, ОбластьТабличногоДокумента, ДополнительныеПараметры = Неопределено) Экспорт
	
	//#TODO Обработать следующие виды приложений:
	//	1CV8 - идентификатор приложения "1С:Предприятие";
	//	1CV8C - идентификатор приложения тонкого клиента "1С:Предприятие";
	//	AgentStandardCall – стандартный вызов;
	//	AnalyticsSystemClient - клиент системы аналитики;
	//	AnalyticsSystemQuery - служебный вызов системы аналитики;
	//	BackgroundJob - идентификатор сессии обработки заданий;
	//	COMConnection - идентификатор сессии внешнего соединения 1С:Предприятия через COM;
	//	COMConsole - идентификатор административной сессии внешнего соединения;
	//	Debugger - идентификатор сессии отладчика;
	//	DebugQueryTargets - идентификатор приложения для IDE-отладчика по TCP - запрос состава предметов отладки;
	//	Designer - идентификатор приложения Конфигуратор;
	//	HTTPServiceConnection - идентификатор сессии http-сервиса;
	//	ImplAppID - идентификатор приложения для временного сеанса;
	//	JobScheduler - идентификатор сессии планировщика заданий;
	//	MobileClient - идентификатор приложения мобильного клиента "1С:Предприятие";
	//	ODataConnection - идентификатор сессии OData-сервиса;
	//	OpenIDProvider - идентификатор провайдера OpenID;
	//	RAS - идентификатор сервера администрирования;
	//	RemoteDebugger - идентификатор приложения для IDE-отладчика по TCP;
	//	SrvrConsole - идентификатор сессии консоли кластера;
	//	SystemBackgroundJob - идентификатор системного фонового задания;
	//	WebClient - идентификатор приложения web-клиента 1С:Предприятие;
	//	WebServerExtension - идентификатор приложения модуля расширения веб-сервера;
	//	WSConnection - идентификатор сессии web-сервиса.
	
	ОбластьТабличногоДокумента.Очистить();
	
	СхемаКомпоновкиДанных = Справочники.ИнформационныеБазы.ПолучитьМакет("МакетКомпановкиДиаграммыПоказателей");
	
	СхемаКомпоновкиДанных.Параметры["ИнформационнаяБаза"].Значение = ИнформационнаяБаза;
	
	ДанныеРасшифровки	= Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	Настройки	= СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	КомпоновщикМакета	= Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ОбластьТабличногоДокумента);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	РисунокДиаграммы = ОбластьТабличногоДокумента.Рисунки[0];
	
	РисунокДиаграммы.Высота	= 45;
	РисунокДиаграммы.Ширина	= 100;
	
	РисунокДиаграммы.Объект.ОбластьЛегенды.Шрифт = Новый Шрифт(, 8);
	РисунокДиаграммы.Объект.ОбластьЛегенды.ЦветТекста = ЦветаСтиля.ЦветПустойГиперссылки;
	
	РисунокДиаграммы.Имя = "Динамика активности сеансов";

КонецПроцедуры

Функция ПолучитьСведенияОКонфигурации(ИнформационнаяБаза) Экспорт
	
	Если Не ЗначениеЗаполнено(ИнформационнаяБаза.ИдентификаторБазы) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПутьКВременнымДаннымБазы = АдминистрированиеИнформационныхБаз.ПолучитьКаталогВременныхФайловБазы(ИнформационнаяБаза);
	
	ВременныйРабочийКаталог = ПутьКВременнымДаннымБазы + Формат(ТекущаяДатаСеанса(), "ДФ=yyyyMMddHHmmss") + ПолучитьРазделительПути();
	СоздатьКаталог(ВременныйРабочийКаталог);
	
	ТекстФайлаВыгрузки = Новый ЗаписьТекста(ВременныйРабочийКаталог + "DumpList", КодировкаТекста.UTF8);
	ТекстФайлаВыгрузки.ЗаписатьСтроку("Configuration");
	ТекстФайлаВыгрузки.Закрыть();
	
	СтрокаСоединения = РаботаСоСкриптамиСервер.ПолучитьСтрокуСоединенияСБазой(ИнформационнаяБаза); 

	ПутьКФайлуЛогов = ВременныйРабочийКаталог + "log_" + Формат(ТекущаяДатаСеанса(), "ДФ=yyMMddHHmmss");
	
	СкриптПолученияСведений = СтрокаСоединения + " /DumpConfigToFiles " + ВременныйРабочийКаталог 
							+ " -listFile """ + ВременныйРабочийКаталог + "DumpList"""
							+ " /DisableStartupDialogs /DisableStartupMessages"
							+ " /Out """ + ПутьКФайлуЛогов + """";
							
	Сообщить(СкриптПолученияСведений);
							
	ПараметрыЗапускаПрограммы = ФайловаяСистема.ПараметрыЗапускаПрограммы(); 
	ПараметрыЗапускаПрограммы.ПолучитьПотокВывода = Истина;
	ПараметрыЗапускаПрограммы.ДождатьсяЗавершения = Истина;
	
	РезультатВыполненияСкрипта = ФайловаяСистема.ЗапуститьПрограмму(СкриптПолученияСведений, ПараметрыЗапускаПрограммы); 
	
	ЧтениеФайлаЛогов = Новый ЧтениеТекста(ПутьКФайлуЛогов, КодировкаТекста.UTF8); 
	ТекстЛога = ЧтениеФайлаЛогов.Прочитать();

	РезультатВыполненияСкрипта.Вставить("ЛогВыполненияСкрипта", ТекстЛога);
	
	Если РезультатВыполненияСкрипта.КодВозврата = 1 Тогда
		ЗаписатьСобытиеИнформационнойБазы(ИнформационнаяБаза,
										Перечисления.ВидыРегистрируемыхСобытий.Регламентное,
										СкриптПолученияСведений,
										РезультатВыполненияСкрипта,
										"Получение сведений о конфигурации",
										Ложь);
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураСведений = Новый Структура;
	СтруктураСведений.Вставить("ИмяКонфигурации",	"");
	СтруктураСведений.Вставить("СинонимКонфигурации","");
	СтруктураСведений.Вставить("ВерсияКонфигурации",	"");
	СтруктураСведений.Вставить("WebСервисы",		Новый Массив);
	СтруктураСведений.Вставить("HTTPСервисы",		Новый Массив);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ВременныйРабочийКаталог + "Configuration.xml");
	
	Пока ЧтениеXML.Прочитать() Цикл

		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Name" Тогда
			ЧтениеXML.Прочитать();
			СтруктураСведений.ИмяКонфигурации = ЧтениеXML.Значение;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Version" Тогда
			ЧтениеXML.Прочитать();
			СтруктураСведений.ВерсияКонфигурации = ЧтениеXML.Значение;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Synonym" Тогда 
			Пока ЧтениеXML.Прочитать() Цикл
				Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "v8:content" Тогда
					ЧтениеXML.Прочитать();
					СтруктураСведений.СинонимКонфигурации = ЧтениеXML.Значение;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "WebService" Тогда
			ЧтениеXML.Прочитать();
			СтруктураСведений.WebСервисы.Добавить(ЧтениеXML.Значение);
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "HTTPService" Тогда
			ЧтениеXML.Прочитать();
			СтруктураСведений.HTTPСервисы.Добавить(ЧтениеXML.Значение);
		КонецЕсли;
		
	КонецЦикла;

	ЧтениеXML.Закрыть(); 
	
	УдалитьФайлы(ВременныйРабочийКаталог);
	
	ЗаписатьСобытиеИнформационнойБазы(ИнформационнаяБаза,
									Перечисления.ВидыРегистрируемыхСобытий.Регламентное,
									СкриптПолученияСведений,
									РезультатВыполненияСкрипта,
									"Получение сведений о конфигурации",
									Истина);
	
	Возврат СтруктураСведений;
	
КонецФункции

#КонецОбласти

Функция ПолучитьТаблицуПользователей(ИнформационнаяБаза) Экспорт
	
	ТаблицаИндексовКартинок = Новый ТаблицаЗначений;
	ТаблицаИндексовКартинок.Колонки.Добавить("ИмяПриложения", ОбщегоНазначения.ОписаниеТипаСтрока(25));
	ТаблицаИндексовКартинок.Колонки.Добавить("ИндексКартинки", ОбщегоНазначения.ОписаниеТипаЧисло(1));
	
	ДобавитьЗначенияВТаблицу(ТаблицаИндексовКартинок, "1CV8",					0);
	ДобавитьЗначенияВТаблицу(ТаблицаИндексовКартинок, "1CV8C",				0);
	ДобавитьЗначенияВТаблицу(ТаблицаИндексовКартинок, "AgentStandardCall",		5);
	ДобавитьЗначенияВТаблицу(ТаблицаИндексовКартинок, "AnalyticsSystemClient",	5);
	ДобавитьЗначенияВТаблицу(ТаблицаИндексовКартинок, "AnalyticsSystemQuery",	5);
	ДобавитьЗначенияВТаблицу(ТаблицаИндексовКартинок, "BackgroundJob",			3);
	ДобавитьЗначенияВТаблицу(ТаблицаИндексовКартинок, "COMConnection",			5);
	ДобавитьЗначенияВТаблицу(ТаблицаИндексовКартинок, "COMConsole",			5);
	ДобавитьЗначенияВТаблицу(ТаблицаИндексовКартинок, "Debugger",				5);
	ДобавитьЗначенияВТаблицу(ТаблицаИндексовКартинок, "DebugQueryTargets",		5);
	ДобавитьЗначенияВТаблицу(ТаблицаИндексовКартинок, "Designer",				0);
	ДобавитьЗначенияВТаблицу(ТаблицаИндексовКартинок, "HTTPServiceConnection",	4);
	ДобавитьЗначенияВТаблицу(ТаблицаИндексовКартинок, "ImplAppID",			5);
	ДобавитьЗначенияВТаблицу(ТаблицаИндексовКартинок, "JobScheduler",			3);
	ДобавитьЗначенияВТаблицу(ТаблицаИндексовКартинок, "MobileClient",			0);
	ДобавитьЗначенияВТаблицу(ТаблицаИндексовКартинок, "ODataConnection",		4);
	ДобавитьЗначенияВТаблицу(ТаблицаИндексовКартинок, "OpenIDProvider",			5);
	ДобавитьЗначенияВТаблицу(ТаблицаИндексовКартинок, "RAS",					5);
	ДобавитьЗначенияВТаблицу(ТаблицаИндексовКартинок, "RemoteDebugger",		5);
	ДобавитьЗначенияВТаблицу(ТаблицаИндексовКартинок, "SrvrConsole",			5);
	ДобавитьЗначенияВТаблицу(ТаблицаИндексовКартинок, "SystemBackgroundJob",	5);
	ДобавитьЗначенияВТаблицу(ТаблицаИндексовКартинок, "WebClient",				4);
	ДобавитьЗначенияВТаблицу(ТаблицаИндексовКартинок, "WebServerExtension",		4);
	ДобавитьЗначенияВТаблицу(ТаблицаИндексовКартинок, "WSConnection",			4);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаИндексовКартинок.ИмяПриложения КАК ИмяПриложения,
	               |	ТаблицаИндексовКартинок.ИндексКартинки КАК ИндексКартинки
	               |ПОМЕСТИТЬ ВТ_ТаблицаИндексовКартинок
	               |ИЗ
	               |	&ТаблицаИндексовКартинок КАК ТаблицаИндексовКартинок
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ИмяПриложения
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПользователиИнформационныхБаз.ПользовательИБ.Наименование КАК ИмяПользователя,
	               |	ПользователиИнформационныхБаз.ПользовательИБ КАК ПользовательИБ
	               |ПОМЕСТИТЬ ВТ_ПользователиИБ
	               |ИЗ
	               |	РегистрСведений.ПользователиИнформационныхБаз КАК ПользователиИнформационныхБаз
	               |ГДЕ
	               |	ПользователиИнформационныхБаз.ИнформационнаяБаза = &ИнформационнаяБаза
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ИмяПользователя
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаСеансов.IPАдресКлиента КАК IPАдресКлиента,
	               |	ТаблицаСеансов.ВремяНачала КАК ВремяНачала,
	               |	ТаблицаСеансов.ВремяПоследнейАктивности КАК ВремяПоследнейАктивности,
	               |	ТаблицаСеансов.ИдентификаторИнформационнойБазы КАК ИдентификаторИнформационнойБазы,
	               |	ТаблицаСеансов.ИдентификаторПроцесса КАК ИдентификаторПроцесса,
	               |	ТаблицаСеансов.ИдентификаторСеанса КАК ИдентификаторСеанса,
	               |	ТаблицаСеансов.ИдентификаторСоединения КАК ИдентификаторСоединения,
	               |	ТаблицаСеансов.ИмяКомпьютера КАК ИмяКомпьютера,
	               |	ТаблицаСеансов.ИмяПользователя КАК ИмяПользователя,
	               |	ТаблицаСеансов.ИмяПриложения КАК ИмяПриложения,
	               |	ТаблицаСеансов.ИмяТекущегоСервиса КАК ИмяТекущегоСервиса,
	               |	ТаблицаСеансов.Лицензии КАК Лицензии,
	               |	ТаблицаСеансов.СоединениеСУБД КАК СоединениеСУБД,
	               |	ТаблицаСеансов.СпящийСеанс КАК СпящийСеанс
	               |ПОМЕСТИТЬ ВТ_СеансыПользователей
	               |ИЗ
	               |	&ТаблицаСеансов КАК ТаблицаСеансов
	               |ГДЕ
	               |	ТаблицаСеансов.ИмяПриложения <> ""RAS""
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ИмяПользователя
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СеансыПользователей.ПользовательИБ КАК ПользовательИБ,
	               |	МАКСИМУМ(СеансыПользователей.ВремяНачала) КАК ВремяНачала,
	               |	МАКСИМУМ(СеансыПользователей.ВремяПоследнейАктивности) КАК ВремяПоследнейАктивности
	               |ПОМЕСТИТЬ ВТ_ТаблицаХранимыхСеансов
	               |ИЗ
	               |	РегистрСведений.СеансыПользователей КАК СеансыПользователей
	               |ГДЕ
	               |	СеансыПользователей.ИнформационнаяБаза = &ИнформационнаяБаза
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СеансыПользователей.ПользовательИБ
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ПользовательИБ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(ВТ_ПользователиИБ.ИмяПользователя, ВТ_СеансыПользователей.ИмяПользователя) КАК ИмяПользователя,
	               |	ВТ_СеансыПользователей.IPАдресКлиента КАК IPАдресКлиента,
	               |	ЕСТЬNULL(ВТ_СеансыПользователей.ВремяНачала, ВТ_ТаблицаХранимыхСеансов.ВремяНачала) КАК ВремяНачала,
	               |	ЕСТЬNULL(ВТ_СеансыПользователей.ВремяПоследнейАктивности, ВТ_ТаблицаХранимыхСеансов.ВремяПоследнейАктивности) КАК ВремяПоследнейАктивности,
	               |	ВТ_СеансыПользователей.ИдентификаторИнформационнойБазы КАК ИдентификаторИнформационнойБазы,
	               |	ВТ_СеансыПользователей.ИдентификаторПроцесса КАК ИдентификаторПроцесса,
	               |	ВТ_СеансыПользователей.ИдентификаторСеанса КАК ИдентификаторСеанса,
	               |	ВТ_СеансыПользователей.ИдентификаторСоединения КАК ИдентификаторСоединения,
	               |	ВТ_СеансыПользователей.ИмяКомпьютера КАК ИмяКомпьютера,
	               |	ВТ_СеансыПользователей.ИмяПриложения КАК ИмяПриложения,
	               |	ВТ_СеансыПользователей.ИмяТекущегоСервиса КАК ИмяТекущегоСервиса,
	               |	ВТ_СеансыПользователей.Лицензии КАК Лицензии,
	               |	ВТ_СеансыПользователей.СоединениеСУБД КАК СоединениеСУБД,
	               |	ВТ_СеансыПользователей.СпящийСеанс КАК СпящийСеанс,
	               |	ВЫБОР
	               |		КОГДА ВТ_СеансыПользователей.ВремяНачала ЕСТЬ NULL
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ПолеУпорядочивания,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ВТ_СеансыПользователей.СпящийСеанс, ЛОЖЬ) = ИСТИНА
	               |			ТОГДА 2
	               |		ИНАЧЕ ЕСТЬNULL(ВТ_ТаблицаИндексовКартинок.ИндексКартинки, 1)
	               |	КОНЕЦ КАК ИндексКартинки
	               |ИЗ
	               |	ВТ_ПользователиИБ КАК ВТ_ПользователиИБ
	               |		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_СеансыПользователей КАК ВТ_СеансыПользователей
	               |			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаИндексовКартинок КАК ВТ_ТаблицаИндексовКартинок
	               |			ПО ВТ_СеансыПользователей.ИмяПриложения = ВТ_ТаблицаИндексовКартинок.ИмяПриложения
	               |		ПО ВТ_ПользователиИБ.ИмяПользователя = ВТ_СеансыПользователей.ИмяПользователя
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаХранимыхСеансов КАК ВТ_ТаблицаХранимыхСеансов
	               |		ПО ВТ_ПользователиИБ.ПользовательИБ = ВТ_ТаблицаХранимыхСеансов.ПользовательИБ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПолеУпорядочивания,
	               |	ИндексКартинки УБЫВ,
	               |	ИмяПользователя";
	
	ТаблицаСеансов = АдминистрированиеСеансов.ПолучитьТаблицуСеансовИнформационнойБазы(ИнформационнаяБаза);
	
	Запрос.УстановитьПараметр("ТаблицаСеансов",			ТаблицаСеансов);
	Запрос.УстановитьПараметр("ИнформационнаяБаза",		ИнформационнаяБаза);
	Запрос.УстановитьПараметр("ТаблицаИндексовКартинок",	ТаблицаИндексовКартинок);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Возврат Результат.Выгрузить();

КонецФункции

Процедура ДобавитьЗначенияВТаблицу(ТаблицаИндексовКартинок, ИмяПриложения, ИндексКартинки)

	НоваяСтрока = ТаблицаИндексовКартинок.Добавить();
	НоваяСтрока.ИмяПриложения = ИмяПриложения;
	НоваяСтрока.ИндексКартинки = ИндексКартинки;

КонецПроцедуры

Процедура ЗаписатьСобытиеИнформационнойБазы(ИнформационнаяБаза, ВидСобытия, Контекст, Результат, Описание, УспешноеВыполнение) Экспорт

	ЗаписьРегистраСобытий = РегистрыСведений.СобытияИнформационныхБаз.СоздатьМенеджерЗаписи();
	ЗаписьРегистраСобытий.Период = ТекущаяДатаСеанса();
	ЗаписьРегистраСобытий.ИнформационнаяБаза = ИнформационнаяБаза;
	
	ЗаписьРегистраСобытий.ВидСобытия	= ВидСобытия;
	ЗаписьРегистраСобытий.Контекст		= Новый ХранилищеЗначения(Контекст);
	ЗаписьРегистраСобытий.Результат		= Новый ХранилищеЗначения(Результат);
	ЗаписьРегистраСобытий.Описание		= Описание;
	
	ЗаписьРегистраСобытий.УспешноеВыполнение = УспешноеВыполнение;
	
	ЗаписьРегистраСобытий.Записать();

КонецПроцедуры
