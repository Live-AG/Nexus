
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//СЛС.ЗащищенныйОбъект("СЛС").ПриСозданииНаСервере(Объект, Отказ, СтандартнаяОбработка, Параметры, ЭтаФорма);	
	
	//Если Не Пользователи.ЭтоПолноправныйПользователь() ИЛИ НЕ ПравоДоступа("Добавление", Метаданные.Справочники.Пользователи) Тогда
	//	ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Внимание. Похоже, у Вас недостаточно прав для управления учетными записями пользователей. Необходимы права администратора или полные права.'"), СтатусСообщения.Важное);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	//Если ИмяСобытия = "Запись_ПрофильИмпортаИзAD" Тогда
	//	Если ЗначениеЗаполнено(ПрофильИмпортаИзAD) И ПрофильИмпортаИзAD = Источник Тогда
	//		УстановитьНастройкиПодключения(ПрофильИмпортаИзAD);
	//	КонецЕсли;	
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	//УстановитьНастройкиПодключения(ПрофильИмпортаИзAD);		
	Элементы.ФормаВключатьПодчиненные.Пометка 		= ПросмотрПодчиненных;
	Элементы.ОбновлятьСписокПользователей.Пометка 	= ОбновлятьСписокПользователейПриАктивизацииСтроки;
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если ВебКлиент Тогда		
		Элементы.Обновить.Доступность = Ложь;
		ПоказатьПредупреждение( , НСтр("ru = 'В режиме ""Веб-клиента"" подключение к AD недоступно.'"));		
	#КонецЕсли	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура КонтекстыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)	

	ТекСтр 	= Контексты.НайтиПоИдентификатору(ВыбраннаяСтрока);	
	СС 		= ПолучитьLDAPЗапросПоТекущемуЗначениюДереваAD(ТекСтр.LDAP);		 
	ЗаполнитьТаблицуПользователей(СС, Элементы.ФормаВключатьПодчиненные.Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтекстыПриАктивизацииСтроки(Элемент)	
	
	Если Не ОбновлятьСписокПользователейПриАктивизацииСтроки Тогда
		Возврат;
	КонецЕсли;	
	
	ПодключитьОбработчикОжидания("КонтекстыПриАктивизацииСтрокиОбработчикОжидания", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрофильИмпортаИзADПриИзменении(Элемент)
	
	УстановитьНастройкиПодключения(ПрофильИмпортаИзAD);	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОчиститьРезультаты(Команда)
	
	Результаты.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПользователейКлиент(Команда)
		
	ТекстСообщенияОшибки = ОшибкиВПрофиле();
	
	Если ЗначениеЗаполнено(ТекстСообщенияОшибки) Тогда
		ПоказатьПредупреждение(, ТекстСообщенияОшибки);
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	// Проверка наличия выбранных строк таблицы пользователей AD.
	ВыбранныеСтрокиТаблицыПользователей = ТаблицаПользователей.НайтиСтроки(Новый Структура("Исправить", Истина));
	Если ВыбранныеСтрокиТаблицыПользователей.Количество() = 0 Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрано ни одного пользователя для загрузки.'"));
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьПользователейКлиентПослеВопроса", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Будет выполнен импорт данных согласно настроек профиля. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВсеФлажки(Команда)
	
	Для каждого Запись Из ТаблицаПользователей Цикл
		Запись.Исправить = Истина;
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеФлажки(Команда)
	
	Для каждого Запись Из ТаблицаПользователей Цикл
		Запись.Исправить = Ложь;
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗагрузитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВсемДоменПочты(Команда)
	
	Количество = 0;
	
	Для каждого Юзер Из ТаблицаПользователей Цикл		
		Если Юзер.Исправить Тогда
			Количество = Количество + 1;
		КонецЕсли;	
	КонецЦикла;
	
	Если Количество = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрано ни одного пользователя AD.'"));
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьВсемДоменПочтыПослеВопроса", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Для выбранных пользователей AD будет заполнен электронный адрес вида ""Аккаунт Windows@Имя домена"". Продолжить?'"),
		РежимДиалогаВопрос.ДаНет);
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВсемПодразделение(Команда)
	
	Количество = 0;
	
	Для каждого Юзер Из ТаблицаПользователей Цикл		
		Если Юзер.Исправить Тогда
			Количество = Количество + 1;
		КонецЕсли;	
	КонецЦикла;
	
	Если Количество = 0 Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Не выбрано ни одного пользователя AD.'"));
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьВсемПодразделениеПослеВопроса", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Для выбранных пользователей AD будет заполнено подразделение. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВсемПодразделениеПослеВопроса(Результат, ДополнительныеПараметры)Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Подразделение = Неопределено;
	ОткрытьФорму("Справочник.Подразделения.ФормаВыбора",,,,,, Новый ОписаниеОповещения("УстановитьВсемПодразделениеЗавершение", ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);	
	
КонецПроцедуры	

&НаКлиенте
Процедура ВыбратьНовыхПользователейAD(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьНовыхПользователейADПослеВопроса", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Будут выбраны те пользователи AD, которые еще не загружались в ""1С"". Продолжить?'"),
		РежимДиалогаВопрос.ДаНет);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьНовыхПользователейADПослеВопроса(Результат, ДополнительныеПараметры)Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Юзер Из ТаблицаПользователей Цикл
		Юзер.Исправить = Не ЗначениеЗаполнено(Юзер.ИдентификаторПользователяИБ);
	КонецЦикла;

КонецПроцедуры	

&НаКлиенте
Процедура ОтключитьПользователей(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтключитьПользователейПослеВопроса", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'ВНИМАНИЕ. Выбранным пользователям в программе будет установлен признак ""Недействителен"". Продолжить?'"),
			РежимДиалогаВопрос.ДаНет);
			
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьПользователейПослеВопроса(Результат, ДополнительныеПараметры)Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ВыбранныеСтрокиТаблицыПользователей = ТаблицаПользователей.НайтиСтроки(Новый Структура("Исправить", Истина));
	
	// Проверка выбора пользователей, уже имеющих аккаунт в 1с.
	ОтмеченыСуществующиеПользователи = Ложь;
	Для Каждого Стр Из ВыбранныеСтрокиТаблицыПользователей Цикл
		Если ЗначениеЗаполнено(Стр.ИдентификаторПользователяИБ) Тогда
			ОтмеченыСуществующиеПользователи = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если Не ОтмеченыСуществующиеПользователи Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрано ни одного пользователя с уже существующим аккаунтом 1С.'"));
		Возврат;
	КонецЕсли;
	
	// Загрузка.
	Состояние(НСтр("ru = 'Отключение пользователей...'"));
	ЕстьОшибки = Ложь;
	//ОтключитьПользователейСервер(ЕстьОшибки);
	Если ЕстьОшибки Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Ошибки при отключении пользователей. См. окно сообщений.'"), , НСтр("ru = 'Внимание'"))
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Отключение пользователей успешно завершено.'"));
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОткрытьПользователей(Команда)
	
	//Для Каждого Стр Из Элементы.Учетки.ВыделенныеСтроки Цикл
	//	НайденныйПользователь = УправлениеITОтделом8УФ.НайтиПользователя1С(ТаблицаПользователей.НайтиПоИдентификатору(Стр).ИдентификаторПользователяИБ);
	//	Если НайденныйПользователь <> Неопределено Тогда
	//		ПоказатьЗначение(, НайденныйПользователь);
	//	КонецЕсли;
	//КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключатьПодчиненные(Команда)
	
	ПросмотрПодчиненных 					  = Не ПросмотрПодчиненных;
	Элементы.ФормаВключатьПодчиненные.Пометка = ПросмотрПодчиненных;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлятьСписокПользователей(Команда)
	
	ОбновлятьСписокПользователейПриАктивизацииСтроки = Не ОбновлятьСписокПользователейПриАктивизацииСтроки;
	Элементы.ОбновлятьСписокПользователей.Пометка 	 = ОбновлятьСписокПользователейПриАктивизацииСтроки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПрофиль(Команда)
	
	УстановитьНастройкиПодключения(ПрофильИмпортаИзAD);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДомен(Команда)
	
	Количество = 0;
	
	Для каждого Юзер Из ТаблицаПользователей Цикл		
		Если Юзер.Исправить Тогда
			Количество = Количество + 1;
		КонецЕсли;	
	КонецЦикла;
	
	Если Количество = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрано ни одного пользователя AD.'"));
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьВсемДоменПослеВопроса", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Для выбранных пользователей AD будет заполнен домен для возможности аутентификации ОС (\\mydomen\ИмяПользователя). Продолжить?'"), РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВсемДоменПослеВопроса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли; 
	
	стрДомен = "ИмяДомена";
	ПоказатьВводЗначения(Новый ОписаниеОповещения("УстановитьВсемДоменЗавершение", ЭтаФорма, Новый Структура("стрДомен", стрДомен)), стрДомен, "Введите имя домена");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВсемДоменЗавершение(Значение, ДополнительныеПараметры) Экспорт
	
	стрДомен = ?(Значение = Неопределено, ДополнительныеПараметры.стрДомен, Значение);
	
	Для Каждого Юзер Из ТаблицаПользователей Цикл		
		Если Юзер.Исправить Тогда
			Юзер.Домен = стрДомен;			
		КонецЕсли;	
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ОшибкиВПрофиле()
	
	ТекстСообщения = "";
	
	Если Не ПрофильИмпортаИзAD.МестаХраненияСоздаватьМестаХранения 
		И Не ПрофильИмпортаИзAD.ОрганизацииСоздаватьОрганизации
		И Не ПрофильИмпортаИзAD.ПодразделенияСоздаватьПодразделения
		И Не ПрофильИмпортаИзAD.ПользователиСоздаватьПользователей		
		И Не ПрофильИмпортаИзAD.ФизЛицаСоздаватьФизЛицо Тогда
		ТекстСообщения = НСтр("ru = 'В выбранном профиле не указаны объекты для загрузки.'");
	КонецЕсли;
	
	Возврат ТекстСообщения;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьПользователейКлиентПослеВопроса(Результат, ДополнительныеПараметры)Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьПользователейКлиентФрагмент();

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	Элементы.СоздатьПользователей.Доступность = ЗначениеЗаполнено(ПрофильИмпортаИзAD);
	
КонецПроцедуры	

&НаСервере
Процедура ЗагрузитьПользователейКлиентФрагмент()   
    
	ВыбранныеСтрокиТаблицыПользователей = ТаблицаПользователей.НайтиСтроки(Новый Структура("Исправить", Истина));	
	ТаблицаПользователейАД 				= СтруктураТаблицыПользователейАД();
	
	Для Каждого СтрокаМассива Из ВыбранныеСтрокиТаблицыПользователей Цикл
		НоваяСтрока = ТаблицаПользователейАД.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМассива); 
	КонецЦикла;	
	
	//ТЗРезультаты = УправлениеITОтделом8УФ.ВыполнитьИмпортИзАД(ТаблицаПользователейАД, ПрофильИмпортаИзAD, Истина);
	//
	//Если ТЗРезультаты.Количество() > 0 Тогда
	//	Результаты.Загрузить(ТЗРезультаты);
	//КонецЕсли;	
	//
	//Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.СтраницаРезультат;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВсемДоменПочтыПослеВопроса(Результат, ДополнительныеПараметры)Экспорт
	
	Если Результат<>КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;		
	
	стрДомен = "mail.ru";
	ПоказатьВводЗначения(Новый ОписаниеОповещения("УстановитьВсемДоменПочтыЗавершение", ЭтаФорма, Новый Структура("стрДомен", стрДомен)), стрДомен, "Введите имя домена");
	
КонецПроцедуры	

&НаКлиенте
Функция ПолучитьLDAPЗапросПоТекущемуЗначениюДереваAD(СтрокаДерева)
		
	Если ПодключениеИспользоватьУчетнуюЗапись Тогда
		мПорт	 = ?(ЗначениеЗаполнено(ПодключениеПорт), СокрЛП(ПодключениеПорт), "389");	
		LDAP_HDR = "LDAP://" + ПодключениеКонтроллерДомена + ":" + мПорт + "/";
	Иначе
		LDAP_HDR = "LDAP://";		
	КонецЕсли;	
	
	LDAPText = LDAP_HDR + СтрокаДерева; 
	
	Возврат LDAPText;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьТаблицуПользователей(LDAPText, Рекурсивно = Ложь) Экспорт	
		
	ТаблицаПользователей.Очистить();
	АтрибутДР 				= "";	
	
	Если ПустаяСтрока(LDAPText) Тогда
		Возврат;
	КонецЕсли;
	
	ПодстрокаЗапроса = ">;(&(objectCategory=person)(objectClass=user));ADsPath,DisplayName,mail,telephoneNumber,sAMAccountName,department,company,title,UserAccountControl,thumbnailPhoto;";
	
	Если ФизЛицаЗагружатьДатуРождения И ЗначениеЗаполнено(СокрЛП(ФизЛицаИмяАтрибутаДатаРождения)) Тогда
		АтрибутДР 		 = СокрЛП(ФизЛицаИмяАтрибутаДатаРождения);
		ПодстрокаЗапроса = Сред(ПодстрокаЗапроса, 1, СтрДлина(ПодстрокаЗапроса) - 1) + "," + АтрибутДР + ";";
	КонецЕсли;	
	
	Если ПодключениеИспользоватьУчетнуюЗапись Тогда
		Попытка
			
			Порт				= ?(ЗначениеЗаполнено(ПодключениеПорт), СокрЛП(ПодключениеПорт), "389");			
			СтрокаПодключения 	= "Provider=ADSDSOObject;User Id=" + ПодключениеДомен + "\" + ПодключениеУчетнаяЗапись + ";Password=" + ПодключениеПароль + ";";			
			
			conn				= Новый COMОбъект("ADODB.Connection");
			conn.cursorLocation = 3;
			conn.Open(СтрокаПодключения);			
			
			cmd = Новый COMОбъект("ADODB.Command");
			cmd.ActiveConnection = conn;
			cmd.Properties("Page Size").Value = 100;
			cmd.Properties("Cache Results").Value = True;						
			cmd.CommandText = "<" + СокрЛП(LDAPText) + ПодстрокаЗапроса + ?(Рекурсивно, "subtree", "onelevel");		
			rs = cmd.Execute();				
			
		Исключение			
			ТекстОшибки = ИнформацияОбОшибке();
			ОбщегоНазначенияКлиент.СообщитьПользователю(КраткоеПредставлениеОшибки(ТекстОшибки));
			Возврат;			
		КонецПопытки;
		
	Иначе	
		Попытка 
			conn = Новый COMОбъект("ADODB.Connection");
			conn.Provider = "ADSDSOObject";
			conn.Open("ADs Provider");
			
			cmd = Новый COMОбъект("ADODB.Command");
			cmd.ActiveConnection = conn;
			cmd.Properties("Page Size").Value = 100;
			cmd.Properties("Cache Results").Value = True;						
			cmd.CommandText = "<" + СокрЛП(LDAPText) + ПодстрокаЗапроса + ?(Рекурсивно, "subtree", "onelevel");		
			rs = cmd.Execute();
			
		Исключение
			ТекстОшибки = ИнформацияОбОшибке();
			ОбщегоНазначенияКлиент.СообщитьПользователю(КраткоеПредставлениеОшибки(ТекстОшибки));
			Возврат;			
		КонецПопытки;
	КонецЕсли;
	
	СтатусLDAPЗапроса = "";
	
	Сч = 0;
	Если rs.RecordCount > 0 Тогда
		Пока Не rs.EOF Цикл  
			
			Попытка
				АккаунтИмя 		= rs.Fields("sAMAccountName").Value;
				СтрПочта 		= rs.Fields("mail").Value;
				Представление 	= ?(ПустаяСтрока(rs.Fields("DisplayName").Value), АккаунтИмя, rs.Fields("DisplayName").Value);
				СтрТелефон 		= rs.Fields("telephoneNumber").Value;
				Подразделение	= rs.Fields("department").Value;
				ADsPath			= rs.Fields("ADsPath").Value;				
				Организация		= rs.Fields("company").Value;
				Должность		= rs.Fields("title").Value;
				Если ЗначениеЗаполнено(АтрибутДР) Тогда
					Попытка
						ДатаРождения	= rs.Fields(АтрибутДР).Value;
					Исключение
					КонецПопытки;	
				КонецЕсли;					
				
				Попытка
					Статус = СтатусУчетнойЗаписи(rs.Fields("UserAccountControl").value);					
				Исключение
					Статус = 0;
				КонецПопытки;
				
			Исключение
				rs.MoveNext();
				Сч = Сч + 1;
				Продолжить;
			КонецПопытки;
			
			пСуществует = ложь;
			        
			//Пользователь		= УправлениеITОтделом8УФ.НайтиПользователяИБ(АккаунтИмя);
			//пСуществует			= Пользователь <> Неопределено;
						
			Поз					= СтрНайти(ADsPath, "DC=");
			Если Поз > 0 Тогда
				АккаунтДомен = Сред(ADsPath, Поз+3);
				Поз = СтрНайти(АккаунтДомен, ",");
				Если Поз >  0 Тогда
					АккаунтДомен = Лев(АккаунтДомен, Поз-1);
				КонецЕсли;			
			КонецЕсли;
			
			Если Не ПустаяСтрока(АккаунтИмя) Тогда
				
				НоваяСтрока					= ТаблицаПользователей.Добавить();
				НоваяСтрока.Логин			= АккаунтИмя;
				НоваяСтрока.Имя				= ?(ПустаяСтрока(Представление), АккаунтИмя, Представление);
				НоваяСтрока.Домен			= АккаунтДомен;				
				НоваяСтрока.Почта			= СтрПочта;
				НоваяСтрока.Телефон 		= СтрТелефон;
				НоваяСтрока.Существует		= пСуществует;
				НоваяСтрока.Подразделение 	= Подразделение;
				НоваяСтрока.Организация 	= Организация;
				НоваяСтрока.Должность	 	= Должность;
				НоваяСтрока.ADsPath			= ADsPath;								
				НоваяСтрока.ДатаРождения 	= ПолучитьДатуИзСтроки(ДатаРождения);
				НоваяСтрока.Статус			= Статус;
				//Если Пользователь <> Неопределено Тогда
				//	НоваяСтрока.ИдентификаторПользователяИБ = Пользователь;  
				//КонецЕсли;
				
			КонецЕсли;
			
			Попытка				
				rs.MoveNext();
				Сч = Сч + 1;				
			Исключение				
				// делаем заглушку на ограничение MaxPageSize в политике ADSI.
				Прервать;				
			КонецПопытки;
			
		КонецЦикла;
	КонецЕсли;
	
	rs.Close();
	rs = Неопределено;
	
	conn.Close();
	conn = Неопределено;
	
	ТаблицаПользователей.Сортировать("Имя Возр");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВетвьВДеревоAD(conn, СтрокаДерева)
	
	CommandText = "<" + СтрокаДерева.Path + ">;(|(objectclass=organization)(objectclass=organizationalUnit)(objectclass=container));ADsPath, Name, distinguishedName;onelevel";
	cmd = Новый COMОбъект("ADODB.Command");
	cmd.ActiveConnection 				  = conn;
	cmd.Properties("Page Size").Value 	  = 100;
	cmd.Properties("Cache Results").Value = True;						
	cmd.CommandText 					  = CommandText;
	rs = cmd.Execute();
	
	Если rs.RecordCount > 0 Тогда 
		
		Пока Не rs.EOF Цикл
			
			НоваяСтрока 		= СтрокаДерева.ПолучитьЭлементы().Добавить(); 			
			НоваяСтрока.Path	= rs.Fields("ADsPath").Value;
			НоваяСтрока.Name	= rs.Fields("Name").Value;
			НоваяСтрока.LDAP	= rs.Fields("distinguishedName").Value; 
			
			ДобавитьВетвьВДеревоAD(conn, НоваяСтрока);
			
			Попытка
				rs.MoveNext();
			Исключение
				ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Превышен допустимый размер получаемых данных.'"));
				Прервать;
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
	rs.Close();
	rs = Неопределено;

КонецПроцедуры

&НаСервере
Процедура ЗаписатьОшибкуВЖурналРегистрации(Текст)

	ЗаписьЖурналаРегистрации("ActiveDirectory", УровеньЖурналаРегистрации.Ошибка, , , Текст);

КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиПодключения(ПрофильИмпортаИзAD)
	
	//СЛС.ЗащищенныйОбъект("СЛС").УстановитьНастройкиПодключенияПоПрофилю(ПрофильИмпортаИзAD, ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНаКлиенте()
		
	Контексты.ПолучитьЭлементы().Очистить();
	
	Если ПодключениеИспользоватьУчетнуюЗапись Тогда	
		
		Попытка			
			
			Порт				= ?(ЗначениеЗаполнено(ПодключениеПорт), СокрЛП(ПодключениеПорт), "389");			
			КореньДерева		= ?(ЗначениеЗаполнено(ПодключениеКореньДерева), СокрЛП(ПодключениеКореньДерева), "");						
			СтрокаПодключения 	= "Provider=ADSDSOObject;User Id=" + ПодключениеДомен + "\" + ПодключениеУчетнаяЗапись + ";Password=" + ПодключениеПароль + ";";			
			conn				= Новый COMОбъект("ADODB.Connection");			
			conn.cursorLocation = 3;
			conn.Open(СтрокаПодключения);						
			
			Если ЗначениеЗаполнено(КореньДерева) Тогда 							
				LDAPText 	= "LDAP://" + ПодключениеКонтроллерДомена + ":" + Порт + "/" + КореньДерева;				
				CommandText	= "<" + СокрЛП(LDAPText) + ">;(objectClass=*);ADsPath, Name, distinguishedName;onelevel";				
			Иначе				
				LDAPText 	= "LDAP://" + ПодключениеКонтроллерДомена + ":" + Порт;
				CommandText = "<" + СокрЛП(LDAPText) + ">;(objectClass=domain);ADsPath, Name, distinguishedName;subtree";
			КонецЕсли;	
			
			cmd = Новый COMОбъект("ADODB.Command");
			cmd.ActiveConnection 				  = conn;
			cmd.Properties("Page Size").Value 	  = 100;
			cmd.Properties("Cache Results").Value = True;						
			cmd.CommandText 					  = CommandText;		
			rs = cmd.Execute();	
			
		Исключение			
			ОШ = ОписаниеОшибки();
			ОбщегоНазначенияКлиент.СообщитьПользователю(ОШ);
			Возврат;			
		КонецПопытки;
		
	Иначе		
		
		Попытка
			DSE				= ПолучитьCOMОбъект("LDAP://rootDSE"); 	// определяем домен, к которому принадлежит компьютер.
			LDAP_DNC		= DSE.Get("defaultNamingContext");     	// имя текущего домена.
			LDAPText		= "GC://" + LDAP_DNC; 					// используем глобальный каталог для поиска.
			//LDAPText 		= "LDAP://" + LDAP_DNC;
		Исключение
			ПоказатьПредупреждение(, НСтр("ru = 'Не найдены домены для импорта данных'"));
			Возврат;
		КонецПопытки;
		
		Попытка
			conn				= Новый COMОбъект("ADODB.Connection");;
			conn.Provider		= "ADSDSOObject";
			conn.cursorLocation = 3;
			conn.Open("ADs Provider");
		
			cmd = Новый COMОбъект("ADODB.Command");
			cmd.ActiveConnection = conn;
			cmd.Properties("Page Size").Value = 100;
			cmd.Properties("Cache Results").Value = True;						
			cmd.CommandText = "<" + LDAPText + ">;(objectClass=domain);ADsPath, Name, distinguishedName;subtree";		
			rs = cmd.Execute();			
		Исключение		
			ЗаписатьОшибкуВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Запрос к Active Directory не выполнен. Подробности в журнале регистрации...'"));
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
	Если rs.RecordCount > 0 Тогда 
		Пока Не rs.EOF Цикл  
			
			НоваяСтрока			= Контексты.ПолучитьЭлементы().Добавить();
			НоваяСтрока.Name	= rs.Fields("Name").Value;
			НоваяСтрока.LDAP	= rs.Fields("distinguishedName").Value; 
			НоваяСтрока.Path	= rs.Fields("ADsPath").Value;  // берем путь "как есть", в т.ч. GC.
			
			ДобавитьВетвьВДеревоAD(conn, НоваяСтрока);
			
			Попытка
				rs.MoveNext();
			Исключение
				ЗаписатьОшибкуВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Превышен допустимый размер получаемых данных.'"));
				Прервать;
			КонецПопытки;			
		КонецЦикла;
	КонецЕсли;
	
	rs.Close();
	rs = Неопределено;
	conn.Close();
	
КонецПроцедуры 

&НаКлиенте
Процедура УстановитьВсемДоменПочтыЗавершение(Значение, ДополнительныеПараметры) Экспорт
	
	стрДомен = ?(Значение = Неопределено, ДополнительныеПараметры.стрДомен, Значение);
	
	Для каждого Юзер Из ТаблицаПользователей Цикл		
		Если Юзер.Исправить Тогда
			Если ЗначениеЗаполнено(Юзер.Логин) Тогда
				Юзер.Почта = Юзер.Логин + "@" + стрДомен;
			Иначе	
				Юзер.Почта = Юзер.Имя + "@" + стрДомен;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВсемПодразделениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Подразделение = Результат;	
	Для каждого Юзер Из ТаблицаПользователей Цикл
		Если Юзер.Исправить Тогда
			Юзер.Подразделение = Подразделение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//&НаСервере
//Процедура ОтключитьПользователейСервер(ЕстьОшибки = Ложь)
//	
//	Для Каждого Стр Из ТаблицаПользователей Цикл
//		Если Стр.Исправить 
//			И ЗначениеЗаполнено(Стр.ИдентификаторПользователяИБ) Тогда
//			
//			ЕстьОшибкиВСтроке = Ложь;
//			
//			НачатьТранзакцию();
//			
//			Попытка				
//				
//				Пользователь1С = УправлениеITОтделом8УФ.НайтиПользователя1С(Стр.ИдентификаторПользователяИБ);
//				Если ЗначениеЗаполнено(Пользователь1С) Тогда									
//					ПользовательОбъект 		= Пользователь1С.ПолучитьОбъект(); 					
//					// описание пользователя БД.
//					ОписаниеПользователяИБ 	= Пользователи.НовоеОписаниеПользователяИБ();
//					ОписаниеПользователяИБ.Вставить("Действие", "Удалить");					
//					ПользовательОбъект.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);					
//					ПользовательОбъект.Недействителен = Истина;					
//					ПользовательОбъект.Записать();					
//				КонецЕсли;
//				
//			Исключение 
//				
//				ЕстьОшибкиВСтроке = Истина;
//				ОбщегоНазначения.СообщитьПользователю( СтрШаблон(НСтр("ru = 'Ошибка при отключении пользователя %1: %2'"), Стр.Имя, ОписаниеОшибки()), СтатусСообщения.Важное);
//				
//			КонецПопытки;
//			
//			Если ЕстьОшибкиВСтроке 
//				И Не ЕстьОшибки Тогда
//				ЕстьОшибки = Истина;
//			КонецЕсли;
//			
//			Если ЕстьОшибкиВСтроке Тогда
//				ОтменитьТранзакцию();
//			Иначе
//				ЗафиксироватьТранзакцию();
//				Стр.Исправить = Ложь;
//				Стр.ИдентификаторПользователяИБ = ПользовательОбъект.ИдентификаторПользователяИБ;
//			КонецЕсли;
//			
//		КонецЕсли;
//	КонецЦикла;

//КонецПроцедуры

&НаКлиенте
Процедура КонтекстыПриАктивизацииСтрокиОбработчикОжидания()	
	
	ТекущиеДанные = Элементы.Контексты.ТекущиеДанные;	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	СС 		= ПолучитьLDAPЗапросПоТекущемуЗначениюДереваAD(ТекущиеДанные.LDAP);		 
	ЗаполнитьТаблицуПользователей(СС, Элементы.ФормаВключатьПодчиненные.Пометка);
	
КонецПроцедуры

#КонецОбласти



Функция СтруктураТаблицыПользователейАД()
	
	ТаблицаПользователейАД 	= Новый ТаблицаЗначений;
	ТаблицаПользователейАД.Колонки.Добавить("Логин", 		Новый ОписаниеТипов("Строка"));
	ТаблицаПользователейАД.Колонки.Добавить("Имя", 			Новый ОписаниеТипов("Строка"));
	ТаблицаПользователейАД.Колонки.Добавить("Домен", 		Новый ОписаниеТипов("Строка"));	
	ТаблицаПользователейАД.Колонки.Добавить("Почта", 		Новый ОписаниеТипов("Строка"));
	ТаблицаПользователейАД.Колонки.Добавить("Телефон", 		Новый ОписаниеТипов("Строка"));
	ТаблицаПользователейАД.Колонки.Добавить("Существует",	Новый ОписаниеТипов("Булево"));
	ТаблицаПользователейАД.Колонки.Добавить("Подразделение",Новый ОписаниеТипов("Строка"));
	ТаблицаПользователейАД.Колонки.Добавить("Организация",  Новый ОписаниеТипов("Строка"));
	ТаблицаПользователейАД.Колонки.Добавить("Должность", 	Новый ОписаниеТипов("Строка"));
	ТаблицаПользователейАД.Колонки.Добавить("ADsPath", 		Новый ОписаниеТипов("Строка"));
	ТаблицаПользователейАД.Колонки.Добавить("ДатаРождения", Новый ОписаниеТипов("Дата"));
	ТаблицаПользователейАД.Колонки.Добавить("ИдентификаторПользователяИБ", Новый ОписаниеТипов("УникальныйИдентификатор"));
	ТаблицаПользователейАД.Колонки.Добавить("Статус", 		Новый ОписаниеТипов("Строка"));
	
	Возврат ТаблицаПользователейАД;
	
КонецФункции


Функция ВыполнитьИмпортИзАД(ТаблицаПользователейАД, ПрофильИмпортаИзAD, Интерактивно = Ложь) Экспорт
	
	РезультатТЗ = Новый ТаблицаЗначений;
	РезультатТЗ.Колонки.Добавить("Дата");
	РезультатТЗ.Колонки.Добавить("ВидОперации");
	РезультатТЗ.Колонки.Добавить("ТипОбъекта");
	РезультатТЗ.Колонки.Добавить("Ссылка");
	РезультатТЗ.Колонки.Добавить("Описание");
	РезультатТЗ.Колонки.Добавить("ТекущаяСтрока");
	
	//Для Каждого Строка Из ТаблицаПользователейАД Цикл
	//			
	//	ЕстьОшибкиВСтроке 		= Ложь;		
	//	СоответствиеЗаполнения 	= Новый Соответствие;
	//	СоответствиеЗаполнения.Вставить("ПрофильИмпортаИзAD", ПрофильИмпортаИзAD);
	//	СоответствиеЗаполнения.Вставить("СтрокаТаблицыПользователейAD", Строка);		
	//	СоответствиеЗаполнения.Вставить("Результат", РезультатТЗ);
	//	
	//	Если ПрофильИмпортаИзAD.ПользователиИзменятьРанееСозданных = Ложь 
	//		И ЗначениеЗаполнено(Строка.ИдентификаторПользователяИБ) Тогда
	//		СтрокаРезультат 				= СоответствиеЗаполнения["Результат"].Добавить();
	//		СтрокаРезультат.Дата 			= ТекущаяДатаСеанса();
	//		СтрокаРезультат.ВидОперации		= "ДобавлениеИзменение";
	//		СтрокаРезультат.ТипОбъекта		= "Справочник ""Пользователи""";
	//		СтрокаРезультат.Ссылка			= Строка.Имя;
	//		СтрокаРезультат.Описание		= СтрШаблон("Изменение пользователя ""%1"" отменено в соответствии с настройками профиля импорта", Строка.Имя);
	//		СтрокаРезультат.ТекущаяСтрока 	= Строка;			
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	НачатьТранзакцию();
	//	
	//	// Обработка организации.
	//	ОрганизацияСсылка = Справочники.Организации.ПустаяСсылка();
	//	Если ПрофильИмпортаИзAD.ОрганизацииСоздаватьОрганизации Тогда			
	//		ОрганизацияСтрока = СокрЛП(Строка.Организация);			
	//		Если ЗначениеЗаполнено(ОрганизацияСтрока) Тогда
	//			ОрганизацияСсылка = ИмпортАДНайтиСоздатьОрганизацию(ОрганизацияСтрока, СоответствиеЗаполнения);
	//		Иначе				
	//			Если ЗначениеЗаполнено(ПрофильИмпортаИзAD.ОрганизацииОрганизацияПоУмолчанию) Тогда
	//				ОрганизацияСсылка = ПрофильИмпортаИзAD.ОрганизацииОрганизацияПоУмолчанию;
	//			КонецЕсли;				
	//		КонецЕсли;
	//	КонецЕсли;	
	//	ОрганизацияЗаполнения = ОрганизацияСсылка;
	//	СоответствиеЗаполнения.Вставить("ОрганизацияЗаполнения", ОрганизацияЗаполнения);
	//	
	//	// Обработка подразделения.
	//	ПодразделениеСсылка = Справочники.Подразделения.ПустаяСсылка();
	//	Если ПрофильИмпортаИзAD.ПодразделенияСоздаватьПодразделения Тогда
	//		ПодразделениеСтрока = СокрЛП(Строка.Подразделение);
	//		Если ЗначениеЗаполнено(ПодразделениеСтрока) Тогда
	//			ПодразделениеСсылка = ИмпортАДНайтиСоздатьПодразделение(ПодразделениеСтрока, СоответствиеЗаполнения);				
	//		Иначе
	//			Если ЗначениеЗаполнено(ПрофильИмпортаИзAD.ПодразделенияПодразделениеПоУмолчанию) Тогда
	//				ПодразделениеСсылка = ПрофильИмпортаИзAD.ПодразделенияПодразделениеПоУмолчанию;
	//			КонецЕсли;	
	//		КонецЕсли;			
	//	КонецЕсли;	
	//	ПодразделениеЗаполнения = ПодразделениеСсылка;
	//	СоответствиеЗаполнения.Вставить("ПодразделениеЗаполнения", ПодразделениеЗаполнения);
	//	
	//	// Обработка физ.лица.
	//	ФизЛицоСсылка = Справочники.ФизическиеЛица.ПустаяСсылка();
	//	Если ПрофильИмпортаИзAD.ФизЛицаСоздаватьФизЛицо Тогда
	//		ФизЛицоСтрока = СокрЛП(Строка.Имя);
	//		Если ЗначениеЗаполнено(ФизЛицоСтрока) Тогда
	//			ФизЛицоСсылка = ИмпортАДНайтиСоздатьФизЛицо(ФизЛицоСтрока, СоответствиеЗаполнения);
	//		КонецЕсли;	
	//	КонецЕсли;
	//	ФизЛицоЗаполнения = ФизЛицоСсылка;
	//	СоответствиеЗаполнения.Вставить("ФизЛицоЗаполнения", ФизЛицоЗаполнения);
	//	
	//	// Обработка должности.
	//	ДолжностьСсылка = Справочники.Должности.ПустаяСсылка();
	//	Если ПрофильИмпортаИзAD.СотрудникиСоздаватьСотрудников И ПрофильИмпортаИзAD.СотрудникиСоздаватьДолжности Тогда
	//		ДолжностьСтрока = СокрЛП(Строка.Должность);
	//		Если ЗначениеЗаполнено(ДолжностьСтрока) Тогда
	//			ДолжностьСсылка = ИмпортАДНайтиСоздатьДолжность(ДолжностьСтрока, СоответствиеЗаполнения);
	//		КонецЕсли;	
	//	КонецЕсли;	
	//	ДолжностьЗаполнения = ДолжностьСсылка;
	//	СоответствиеЗаполнения.Вставить("ДолжностьЗаполнения", ДолжностьЗаполнения);
	//	
	//	// Обработка сотрудника.
	//	СотрудникСсылка = Справочники.Сотрудники.ПустаяСсылка();
	//	Если ПрофильИмпортаИзAD.СотрудникиСоздаватьСотрудников Тогда
	//		СотрудникСтрока = СокрЛП(Строка.Имя);
	//		Если ЗначениеЗаполнено(СотрудникСтрока) Тогда
	//			СотрудникСсылка = ИмпортАДНайтиСоздатьСотрудника(СотрудникСтрока, СоответствиеЗаполнения);
	//		КонецЕсли;	
	//	КонецЕсли; 	
	//	СотрудникЗаполнения = СотрудникСсылка;
	//	СоответствиеЗаполнения.Вставить("СотрудникЗаполнения", СотрудникЗаполнения);
	//	
	//	// Обработка мест хранения.
	//	МестоХраненияСсылка = Справочники.МестаХранения.ПустаяСсылка();
	//	Если ПрофильИмпортаИзAD.МестаХраненияСоздаватьМестаХранения Тогда
	//		МестоХраненияСтрока = СокрЛП(Строка.Имя);
	//		Если ЗначениеЗаполнено(МестоХраненияСтрока) Тогда
	//			МестоХраненияСсылка = ИмпортАДНайтиСоздатьМестоХранения(МестоХраненияСтрока, СоответствиеЗаполнения);
	//		КонецЕсли;	
	//	КонецЕсли; 	
	//	МестоХраненияЗаполнения = МестоХраненияСсылка;
	//	СоответствиеЗаполнения.Вставить("МестоХраненияЗаполнения", МестоХраненияЗаполнения);
	//	
	//	// Обработка пользователей.
	//	ПользовательСсылка = Справочники.Пользователи.ПустаяСсылка();
	//	Если ПрофильИмпортаИзAD.ПользователиСоздаватьПользователей Тогда
	//		ПользовательСтрока = СокрЛП(Строка.Имя);
	//		Если ЗначениеЗаполнено(ПользовательСтрока) Тогда
	//			ПользовательСсылка = ИмпортАДНайтиСоздатьПользователя(ПользовательСтрока, СоответствиеЗаполнения, Интерактивно);
	//		КонецЕсли;
	//		ПользовательЗаполнения	= ПользовательСсылка;
	//	КонецЕсли;	
	//	СоответствиеЗаполнения.Вставить("ПользовательЗаполнения", ПользовательЗаполнения);
	//	
	//	Если ЕстьОшибкиВСтроке ИЛИ СоответствиеЗаполнения.Получить("ЕстьОшибкиВСтроке")<>Неопределено Тогда
	//		Если СоответствиеЗаполнения[РезультатТЗ].Количество() > 0 Тогда			
	//			ОтборСтрок 	= Новый Структура("ВидОперации, ТекущаяСтрока", "ДобавлениеИзменение", Строка);
	//			МассивСтрок = СоответствиеЗаполнения[РезультатТЗ].НайтиСтроки(ОтборСтрок);
	//			Если МассивСтрок.Количество()>0 Тогда
	//				Для Каждого УдаляемаяСтрока Из МассивСтрок Цикл
	//					СоответствиеЗаполнения[РезультатТЗ].Удалить(УдаляемаяСтрока);
	//				КонецЦикла;	
	//			КонецЕсли;	
	//		КонецЕсли;	
	//		ОтменитьТранзакцию();
	//	Иначе
	//		ЗафиксироватьТранзакцию();
	//	КонецЕсли;
	//	
	//КонецЦикла;
	
	Возврат РезультатТЗ;
	
КонецФункции

Функция СтатусУчетнойЗаписи(Знач Значение)Экспорт
	
	// http://www.netvision.com/ad_useraccountcontrol.php.
	// за блокировку пользователя отвечает второй бит атрибута userAccountControl.
	// возможные значения:
	// 512		Enabled Account 					(1000000000).
	// 514		Disabled Account					(1000000010).
	// 544		Enabled, Password Not Required 		(1000100000).
	// 546		Disabled, Password Not Required		(1000100010).
	// 66048	Enabled, Password Doesn't Expire 	(10000001000000000).
	// 66050	Disabled, Password Doesn't Expire 	(10000001000000010).
	// 66080	Enabled, Password Doesn't Expire & Not Required.
	// 66082	Disabled, Password Doesn't Expire & Not Required.
	// 262656	Enabled, Smartcard Required.
	// 262658	Disabled, Smartcard Required.
	// 262688	Enabled, Smartcard Required, Password Not Required.
	// 262690	Disabled, Smartcard Required, Password Not Required.
	// 328192	Enabled, Smartcard Required, Password Doesn't Expire.
	// 328194	Disabled, Smartcard Required, Password Doesn't Expire.
	// 328224	Enabled, Smartcard Required, Password Doesn't Expire & Not Required.
	// 328226	Disabled, Smartcard Required, Password Doesn't Expire & Not Required.
	
	Попытка		
		Значение = Число(Значение);
	Исключение
		Значение = 0;
	КонецПопытки;
	
	Если Значение <= 0 Тогда
		Результат = "00";		
	Иначе
		Значение 	= Цел(Значение);
		Результат 	= "";
		Пока Значение > 0 Цикл
			Результат 	= Строка(Значение % 2) + Результат;
			Значение 	= Цел(Значение / 2);
		КонецЦикла;
	КонецЕсли;
	
	// 0 - активный, 1 - заблокированный.
	Статус = Лев(Прав(Результат, 2), 1);	
	
	Возврат Статус;
	
КонецФункции

Функция ПолучитьДатуИзСтроки(ИсхСтр) Экспорт 
	
	Если ПустаяСтрока(ИсхСтр) Тогда
		Возврат Дата(1,1,1,0,0,0);
	КонецЕсли;
	
	Стр = СокрЛП(ИсхСтр);
	Попытка    
	    ЭтоДата = СтрНайти(Стр,".") ИЛИ СтрНайти(Стр,"-") ИЛИ СтрНайти(Стр,"/");
	    ЭтоВремя = СтрНайти(Стр,":");
		
	    Если НЕ ЭтоДата И НЕ ЭтоВремя Тогда
	        Возврат Дата(1,1,1,0,0,0);
	    КонецЕсли;
	    МассивДат = Новый Массив;
	    МассивВремени = Новый Массив;
	    врСтр = "";
	    Для а = 1 По СтрДлина(Стр) Цикл
	        Если (Сред(Стр,а,1) = "." ИЛИ Сред(Стр,а,1) = "-" ИЛИ Сред(Стр,а,1) = "/") и ЭтоДата Тогда
	            МассивДат.Добавить(Число(врСтр));
	            врСтр = "";
	        ИначеЕсли Сред(Стр,а,1) = ":" И Не ЭтоДата Тогда
	            МассивВремени.Добавить(Число(врСтр));
	            врСтр = "";
	        ИначеЕсли Сред(Стр,а,1) = " " ИЛИ КодСимвола(Сред(Стр,а,1))<48 ИЛИ КодСимвола(Сред(Стр,а,1))>57 Тогда
	            Если МассивДат.Количество()>0 И МассивДат.Количество()<3 И врСтр <> "" Тогда
	                МассивДат.Добавить(Число(врСтр));
	            КонецЕсли;
	            ЭтоДата = Ложь;
	            врСтр = "";
	        Иначе
	            врСтр = врСтр + Сред(Стр,а,1);
	        КонецЕсли;
	    КонецЦикла;
	    Если МассивВремени.Количество()>0 И МассивВремени.Количество()<3 И врСтр <> "" Тогда
	        МассивВремени.Добавить(Число(врСтр));
	    ИначеЕсли МассивДат.Количество()>0 И МассивДат.Количество()<3 И врСтр <> "" Тогда
	        МассивДат.Добавить(Число(врСтр));
	    КонецЕсли;
	    врДень = 0;
	    врМесяц = 0;
	    врГод = 0;
	    Для Каждого дСтр из МассивДат Цикл
	        Если врДень <> 0 И врМесяц <> 0 Тогда
	            врГод = дСтр;
	        ИначеЕсли врГод <> 0 И врМесяц <> 0 Тогда
	            врДень = дСтр;
	        ИначеЕсли врГод <> 0 ИЛИ врДень <> 0 Тогда
	            врМесяц = дСтр;
	        КонецЕсли;
	        Если дСтр / 100 > 1 Тогда
	            врГод = дСтр;
	        КонецЕсли;
	        Если врГод = 0 И врДень = 0 Тогда
	            врДень = дСтр;
	        КонецЕсли;
	    КонецЦикла;
	    врЧас = 0;
	    врМин = 0;
	    врСек = 0;
	    Для Каждого вСтр Из МассивВремени Цикл
	        Если врЧас = 0 Тогда
	            врЧас = вСтр;
	        ИначеЕсли врМин = 0 Тогда
	            врМин = вСтр;
	        ИначеЕсли врСек = 0 Тогда
	            врСек = вСтр;
	        КонецЕсли;
	    КонецЦикла;
	    Если врГод = 0 ИЛИ врГод > 9999 Тогда
	        врГод = 1;
	    ИначеЕсли врГод/100<1 Тогда
	        врГод = врГод + 2000;
	    КонецЕсли;
	    
	    Если врМесяц = 0 ИЛИ врМесяц>12 Тогда
	        врМесяц = 1;
	    КонецЕсли;
	    Если врДень = 0 ИЛИ врДень>31 Тогда
	        врДень = 1;
	    КонецЕсли;
	    Если врЧас>23 Тогда
	        врЧас = 0;
	    КонецЕсли;
	    Если врМин>59 Тогда
	        врМин = 0;
	    КонецЕсли;
	    Если врСек>59 Тогда
	        врСек = 0;
		КонецЕсли;
		                   
	    Возврат Дата(врГод, врМесяц, врДень, врЧас, врМин, врСек);
	Исключение
	КонецПопытки;
	
	Д = Дата("00010101000000");
	Стр = ИсхСтр;
	
	Если СтрНайти(Стр,".") > 0 Тогда
		
		Если СтрНайти(Стр,":") > 0 И СтрНайти(Стр," ") > 0 Тогда 
			М = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Стр," ");
			Возврат ПолучитьДатуИзСтроки(М[0]);
		КонецЕсли;
		
		М = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Стр,".");
		
	ИначеЕсли СтрНайти(Стр,"/")>0 Тогда
		
		М = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Стр,"/");
		
	ИначеЕсли СтрНайти(Стр,",")>0 Тогда
		
		М = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Стр,",");
		
	ИначеЕсли СтрНайти(Стр,"-")>0 Тогда
		
		М = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Стр,"-");
		
	КонецЕсли; 
	
	Попытка
		
		Если М.Количество() = 3 Тогда 
			Год = ?(СтрДлина(М[2]) = 2,2000 + М[2],М[2]);
			Д = Дата(Год,М[1],М[0]);
		ИначеЕсли М.Количество() = 2 Тогда 
			Год = ?(СтрДлина(М[1]) = 2,2000 + М[1],М[1]);
			Д = Дата(Год,М[0],1);
		КонецЕсли;
		
	Исключение
	КонецПопытки; 

	Возврат Д; 

КонецФункции
