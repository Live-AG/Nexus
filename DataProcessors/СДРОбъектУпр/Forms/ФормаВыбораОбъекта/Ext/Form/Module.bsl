
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Параметры.Свойство("ТипыДляКонсолиЗапросов", _ТипыДляКонсолиЗапросов);
	Параметры.Свойство("ПоказыватьПростыеТипы", _ПоказыватьПростыеТипы);
	Параметры.Свойство("ПоказыватьПеречисления", _ПоказыватьПеречисления);
	Параметры.Свойство("ПереченьРазделов", _ПереченьРазделов);
	
	Значение = Неопределено;
	Если Параметры.Свойство("ТипыДляЗаполненияЗначений", Значение) и Значение = истина Тогда
		_ПоказыватьПростыеТипы = истина;
		_ПоказыватьПеречисления = истина;
	КонецЕсли;
	
	Если _ТипыДляКонсолиЗапросов Тогда
		_ПоказыватьПеречисления = истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	СтрокиДЗ = ДеревоОбъектов.ПолучитьЭлементы();
	СтрокиДЗ.Очистить();
	
	Если _ПоказыватьПростыеТипы или _ТипыДляКонсолиЗапросов Тогда
		КореньДЗ = СтрокиДЗ.Добавить();
		КореньДЗ.Имя = "ПростыеТипы";
		
		Струк = новый Структура("Число, Строка, Дата, Булево, ВидДвиженияБухгалтерии, ВидДвиженияНакопления, ВидСчета");
		Если _ТипыДляКонсолиЗапросов Тогда
			Струк.Вставить("СписокЗначений");
		КонецЕсли;
		
		СтрокиДЗ = КореньДЗ.ПолучитьЭлементы();
		
		Для каждого Элем из Струк Цикл
			СтрДЗ = СтрокиДЗ.Добавить();
			СтрДЗ.Имя = Элем.Ключ;
			СтрДЗ.ПолноеИмя = Элем.Ключ;
		КонецЦикла;
		
		Элементы.ДеревоОбъектов.Развернуть(КореньДЗ.ПолучитьИдентификатор(), ложь);
		СтрокиДЗ = ДеревоОбъектов.ПолучитьЭлементы();
	КонецЕсли;
	
	КореньДЗ = СтрокиДЗ.Добавить();
	КореньДЗ.Имя = "Конфигурация";
	
	//ПереченьРазделов = "ПланыОбмена, Справочники, Документы, ПланыВидовХарактеристик, ПланыВидовРасчета, ПланыСчетов, БизнесПроцессы, Задачи";
	//!!! ПланыОбмена надо дорабатывать (отключил) !!!
	
	ПереченьРазделов = "ПланыОбмена, Справочники, Документы, ПланыВидовХарактеристик, ПланыВидовРасчета, ПланыСчетов, БизнесПроцессы, Задачи";
	Если _ПоказыватьПеречисления Тогда
		ПереченьРазделов = "ПланыОбмена, Справочники, Документы, Перечисления, ПланыВидовХарактеристик, ПланыВидовРасчета, ПланыСчетов, БизнесПроцессы, Задачи";
	КонецЕсли;
	
	Если не ПустаяСтрока(_ПереченьРазделов) Тогда
		ПереченьРазделов = _ПереченьРазделов;
	КонецЕсли;
	
	СтрукРазделы = новый Структура(ПереченьРазделов);
	СтрокиДЗ = КореньДЗ.ПолучитьЭлементы();
	Для каждого Элем из СтрукРазделы Цикл
		СтрДЗ = СтрокиДЗ.Добавить();
		СтрДЗ.Имя = Элем.Ключ;
		СтрДЗ.ПолучитьЭлементы().Добавить();
	КонецЦикла;
	
	Элементы.ДеревоОбъектов.Развернуть(КореньДЗ.ПолучитьИдентификатор(), ложь);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОбъект(Команда)
	ТекДанные = Элементы.ДеревоОбъектов.ТекущиеДанные;
	
	Если ТекДанные <> Неопределено и не ПустаяСтрока(ТекДанные.ПолноеИмя) Тогда
		Значение = Неопределено;
		ИмяРаздела = ТекДанные.ПолучитьРодителя().Имя;
		
		Если ИмяРаздела = "ПростыеТипы" Тогда
			Если ТекДанные.Имя = "Число" Тогда
				Значение = 0;
			ИначеЕсли ТекДанные.Имя = "Строка" Тогда
				Значение = "";
			ИначеЕсли ТекДанные.Имя = "Дата" Тогда
				Значение = '00010101';
			ИначеЕсли ТекДанные.Имя = "Булево" Тогда
				Значение = ложь;
			ИначеЕсли ТекДанные.Имя = "ВидДвиженияБухгалтерии" Тогда
				Значение = ВидДвиженияБухгалтерии.Дебет;
			ИначеЕсли ТекДанные.Имя = "ВидДвиженияНакопления" Тогда
				Значение = ВидДвиженияНакопления.Приход;
			ИначеЕсли ТекДанные.Имя = "ВидСчета" Тогда
				Значение = ВидСчета.АктивноПассивный;
			ИначеЕсли ТекДанные.Имя = "СписокЗначений" Тогда
				Значение = новый СписокЗначений;
			Иначе
				Значение = Неопределено;
			КонецЕсли;
		Иначе
			ИмяРаздела = Лев(ИмяРаздела, Найти(ИмяРаздела, " ")-1);
			Значение = вВычислитьВыражениеСервер(ИмяРаздела + "." + ТекДанные.Имя + ".ПустаяСсылка()");
		КонецЕсли;
		
		Если Значение <> Неопределено Тогда
			ОповеститьОВыборе(Значение);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОбъектовПередРазворачиванием(Элемент, Строка, Отказ)
	УзелДЗ = ДеревоОбъектов.НайтиПоИдентификатору(Строка);
	СтрокиДЗ = УзелДЗ.ПолучитьЭлементы();
	Если СтрокиДЗ.Количество() = 1 и ПустаяСтрока(СтрокиДЗ[0].Имя) Тогда
		Отказ = истина;
		СтрокиДЗ.Очистить();
		вЗаполнитьРазделМД(Строка);
		Элементы.ДеревоОбъектов.Развернуть(Строка);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция вПолучитьСодержимоеРазделаМД(Знач пИмяРаздела)
	ТипСтрока = новый ОписаниеТипов("Строка");
	
	Таблица = новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Имя", ТипСтрока);
	Таблица.Колонки.Добавить("Синоним", ТипСтрока);
	Таблица.Колонки.Добавить("ПолноеИмя", ТипСтрока);
	Таблица.Колонки.Добавить("Расширение", новый ОписаниеТипов("Булево"));
	
	Для каждого Элем из Метаданные[пИмяРаздела] Цикл
		Стр = Таблица.Добавить();
		Стр.Имя = Элем.Имя;
		Стр.Синоним = Элем.Представление();
		Стр.ПолноеИмя = Элем.ПолноеИмя();
		Стр.Расширение = (Элем.РасширениеКонфигурации() <> Неопределено);
	КонецЦикла;
	
	Таблица.Сортировать("Имя");
	
	пМассив = новый Массив;
	Для каждого Стр из Таблица Цикл
		пСтрук = новый Структура("Имя, Синоним, ПолноеИмя, Расширение");
		ЗаполнитьЗначенияСвойств(пСтрук, Стр);
		пМассив.Добавить(пСтрук);
	КонецЦикла;
	
	Возврат пМассив;
КонецФункции

&НаКлиенте
Процедура вЗаполнитьРазделМД(Знач Строка)
	УзелДЗ = ДеревоОбъектов.НайтиПоИдентификатору(Строка);
	СтрокиДЗ = УзелДЗ.ПолучитьЭлементы();
	СтрокиДЗ.Очистить();
	
	пМассив = вПолучитьСодержимоеРазделаМД(УзелДЗ.Имя);
	
	УзелДЗ.Имя = УзелДЗ.Имя + " (" + пМассив.Количество() + ")";
	
	Для каждого Стр из пМассив Цикл
		СтрДЗ = СтрокиДЗ.Добавить();
		ЗаполнитьЗначенияСвойств(СтрДЗ, Стр);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОбъектовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекДанные = ДеревоОбъектов.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если ТекДанные <> Неопределено и не ПустаяСтрока(ТекДанные.ПолноеИмя) Тогда
		Если не ПустаяСтрока(ТекДанные.ПолноеИмя) Тогда
			СтандартнаяОбработка = ложь;
			ВыбратьОбъект(Неопределено);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция вВычислитьВыражениеСервер(Формула)
	Попытка
		Результат = Вычислить(Формула);
	Исключение
		Результат = Неопределено;
	КонецПопытки;
	
	Возврат Результат;
КонецФункции
