&НаКлиенте
Перем мИмяОбработки;

&НаКлиенте
Перем мЗакрытьФормуБезВопросов;

&НаКлиенте
Перем мИзмененныеДанные;

&НаКлиенте
Перем мТекСтрокаДереваЗапросов;

&НаКлиенте
Перем мТекСтрокаДереваАлгоритмов;

&НаКлиенте
Перем мТекСтрокаСпискаВТ;

&НаКлиенте
Перем мИсточникКопирования;

&НаКлиенте
Перем мИсточникПеретаскивания;

&НаКлиенте
Перем мСтрокаПеретаскивания;

&НаКлиенте
Перем мТипХЗ;

&НаКлиенте
Перем мЭлементДляОбработки;


#Область СервисныеФункции

&НаСервере
Функция вПолучитьОбработку()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаСервере
Функция вПолучитьКлючОбъекта()
	Возврат вПолучитьОбработку().Метаданные().ПолноеИмя();
КонецФункции

&НаСервере
Функция вПреобразоватьРеквизитФормыВСтрокуВнутр(Знач ИмяРеквизита)
	Значение = РеквизитФормыВЗначение(ИмяРеквизита);
	Возврат ЗначениеВСтрокуВнутр(Значение);
КонецФункции

&НаСервереБезКонтекста
Функция вЗначениеВСтрокуВнутр(Знач Значение)
	Возврат ЗначениеВСтрокуВнутр(Значение);
КонецФункции

&НаСервереБезКонтекста
Функция вЗначениеИзСтрокиВнутр(Знач Значение)
	Возврат ЗначениеИзСтрокиВнутр(Значение);
КонецФункции

&НаСервереБезКонтекста
Функция вЗапросВСтрокуXML(Запрос, пСтрукМВТ)
	Структура = новый Структура("Текст, Параметры, МВТ");
	
	ЗаполнитьЗначенияСвойств(Структура, Запрос);
	Структура.МВТ = пСтрукМВТ;
	
	Возврат вЗначениеВСтрокуXML(Структура);
КонецФункции

&НаСервереБезКонтекста
Функция вЗначениеВСтрокуXML(Значение)
	
	ЗаписьXML = новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Значение, НазначениеТипаXML.Явное);
	
	Возврат ЗаписьXML.Закрыть();
КонецФункции

&НаСервереБезКонтекста
Функция вЗначениеИзСтрокиXML(СтрокаXML)
	
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	
	Возврат СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
КонецФункции

&НаСервереБезКонтекста
Функция вПолучитьПолноеИмяМД(Ссыдка)
	Попытка
		Возврат Ссыдка.Метаданные().ПолноеИмя();
	Исключение
		Возврат Неопределено;
	КонецПопытки;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция вПолучитьПустойУникальныйИдентификатор()
	Возврат новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция вДлительностьИнтервала(Знач ЧислоСекунд)
	Часы = Цел(ЧислоСекунд / 3600);
	Минуты = Цел((ЧислоСекунд % 3600) / 60);
	Секунды = ЧислоСекунд % 60;
	
	Возврат "" + Формат(Часы, "ЧН=0") + ":" + Формат(Минуты, "ЧЦ=2;ЧВН=;ЧН=00") + ":" + Формат(Секунды, "ЧЦ=2;ЧВН=;ЧН=00");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция вСоздатьМассив(Значение)
	Массив = новый Массив;
	Массив.Добавить(Значение);
	
	Возврат Массив;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция вСообщитьОбОшибке(Текст)
	Сообщить(Текст, СтатусСообщения.Важное);
	Возврат ложь;
КонецФункции

&НаКлиенте
Функция вФайлСуществует(ИмяФайл)
	Если _СинхронныеВызовыЗапрещены Тогда
		Возврат истина;
	КонецЕсли;
	
	Попытка
		Файл = новый Файл(ИмяФайл);
		Возврат Файл.Существует() и Файл.ЭтоФайл();
	Исключение
		Возврат ложь;
	КонецПопытки;
КонецФункции

&НаКлиенте
Функция вПотомокПроисходитОтПредка(Предок, Потомок)
	Отец = Потомок.ПолучитьРодителя();
	
	Пока Отец <> Неопределено Цикл
		Если Отец = Предок Тогда
			Возврат истина;
		КонецЕсли;
		
		Отец = Отец.ПолучитьРодителя();
	КонецЦикла;
	
	Возврат ложь;
КонецФункции

#КонецОбласти


#Область СервисДляИнтерактива

&НаКлиенте
Процедура вПоказатьПредупреждение(ТекстПредупреждения)
	ПоказатьПредупреждение(, ТекстПредупреждения, 20);
КонецПроцедуры

&НаКлиенте
Процедура вБудетРеализованоПозже()
	вПоказатьПредупреждение("Будет реализовано в следующих версиях!");
КонецПроцедуры

&НаКлиенте
Процедура вПоказатьВопрос(ИмяПроцедуры, ТекстВопроса, ДопПараметры = Неопределено)
	ПоказатьВопрос(новый ОписаниеОповещения(ИмяПроцедуры, ЭтаФорма, ДопПараметры), ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, 20);
КонецПроцедуры

&НаКлиенте
Процедура вПоказатьПростойВопрос(ИмяПроцедуры, ТекстВопроса, ДопПараметры = Неопределено)
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = новый Структура;
	КонецЕсли;
	ДопПараметры.Вставить("__ИмяПроцедуры", ИмяПроцедуры);
	ПоказатьВопрос(новый ОписаниеОповещения("вОбработатьРезультатВопроса", ЭтаФорма, ДопПараметры), ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, 20);
КонецПроцедуры

&НаКлиенте
Процедура вОбработатьРезультатВопроса(РезультатВопроса, ДопПараметры = Неопределено) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		#Если не ВебКлиент Тогда
		Выполнить(ДопПараметры.__ИмяПроцедуры + "(ДопПараметры)");
		#КонецЕсли
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция вПолучитьДиалогВыбораФайлаДанных(Открытие = истина, ПутьКФайлу = "")
	пСтрук = вРазобратьПутьКФайлу(ПутьКФайлу);
	
	Диалог = Новый ДиалогВыбораФайла(?(Открытие, РежимДиалогаВыбораФайла.Открытие, РежимДиалогаВыбораФайла.Сохранение));
	Диалог.Каталог = пСтрук.Каталог;
	Диалог.ПолноеИмяФайла = пСтрук.Имя;
	Диалог.Заголовок  = "Файл данных";
	Диалог.Фильтр     = "Файлы данных (*.dat)|*.dat|Все файлы (*.*)|*.*";
	Диалог.Расширение = "dat";
	
	Возврат Диалог;
КонецФункции

&НаКлиенте
Функция вРазобратьПутьКФайлу(ПутьКФайлу)
	пСтрук = новый Структура("Каталог, Имя", "", "");
	
	Если не ПустаяСтрока(ПутьКФайлу) Тогда
		Поз = СтрНайти(ПутьКФайлу, "\", НаправлениеПоиска.СКонца);
		Если Поз <> 0 Тогда
			пСтрук.Каталог = СокрЛП(Лев(ПутьКФайлу, Поз-1));
			пСтрук.Имя = СокрЛП(Сред(ПутьКФайлу, Поз+1));
		Иначе
			пСтрук.Имя = СокрЛП(ПутьКФайлу);
		КонецЕсли;
	КонецЕсли;
	
	Возврат пСтрук;
КонецФункции

#КонецОбласти


#Область ОписаниеОбработки

&НаСервере
Процедура вСформироватьОписаниеРазработки()
	_ОписаниеРазработки = вПолучитьОбработку().вСформироватьОписаниеРазработки();
КонецПроцедуры

&НаКлиенте
Процедура _ОписаниеРазработкиНажатие(Элемент)
	СтрокаURL = _ОписаниеРазработки.Описание;
	Если не ПустаяСтрока(СтрокаURL) Тогда
		вВыполнитьПереходURL(СтрокаURL);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вВыполнитьПереходURL(СтрокаURL)
	Если ЗначениеЗаполнено(СтрокаURL) Тогда
		Попытка
			НачатьЗапускПриложения(новый ОписаниеОповещения("вПустойОбработчикОповещения", ЭтаФорма), СтрокаURL);
		Исключение
			Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вПустойОбработчикОповещения(КодВозврата = Неопределено, ДопПарам = Неопределено) Экспорт
	Возврат;
КонецПроцедуры

#КонецОбласти


#Область СобытияФормы

&НаСервере
Процедура вСформироватьЗаголовок()
	ЭтаФорма.Заголовок = СтрШаблон("%1 (%2 от %3)", _ОписаниеРазработки.Наименование, _ОписаниеРазработки.НомерВерсии, _ОписаниеРазработки.ДатаВерсии);
КонецПроцедуры

&НаКлиенте
Процедура вСформироватьЗаголовокКлиент()
	ЭтаФорма.Заголовок = СтрШаблон("%1 (%2 от %3)", _ОписаниеРазработки.Наименование, _ОписаниеРазработки.НомерВерсии, _ОписаниеРазработки.ДатаВерсии);
	
	#Если ТонкийКлиент Тогда
		Заголовок = Заголовок + " (тонкий клиент)";
	#ИначеЕсли ВебКлиент Тогда
		Заголовок = Заголовок + " (web клиент)";
	#ИначеЕсли ТолстыйКлиентОбычноеПриложение Тогда
		Заголовок = Заголовок + " (обычное приложение)";
		_ЭтоТолстыйКлиент = истина;
	#ИначеЕсли ТолстыйКлиентУправляемоеПриложение Тогда
		Заголовок = Заголовок + " (толстый клиент)";
	#КонецЕсли
	
	Если _ПоказыватьФайлЗапросовВЗаголовке и не ПустаяСтрока(_ПутьКФайлуЗапросов) Тогда
		Заголовок = Заголовок + " (" + _ПутьКФайлуЗапросов + ")";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	пОбработка = РеквизитФормыВЗначение("Объект");
	пОбработка.вПодготовитьОбработку();
	ЗначениеВРеквизитФормы(пОбработка, "Объект");
	
	
	вСформироватьОписаниеРазработки();
	вСформироватьЗаголовок();
	
	_ПутьКФормам = вПолучитьОбработку().Метаданные().ПолноеИмя() + ".Форма.";
	_ПроцедураСохраненияЗапроса = вПолучитьОбработку().ПолучитьМакет("МакетОбщегоМодуля").ПолучитьТекст();
	_СправочнаяИнформация = вПолучитьОбработку().ПолучитьМакет("МакетСправочнаяИнформация").ПолучитьТекст();
	_СправкаПоПерехватуЗапросов = вПолучитьОбработку().ПолучитьМакет("МакетСправкаПоПерехватуЗапросов").ПолучитьТекст();
	_ЗадаватьВопросПриЗакрытии = истина;
	_ПоказыватьИтогиПоЧисловымКолонкам = истина;
	_ПоказыватьИтогиПоЧисловымКолонкамДляВТ = истина;
	_ИспользоватьЖирныйШрифтДляИтогов = истина;
	
	_АдресаХранилищ = новый Структура("ОбщиеРеквизиты");
	_АдресаХранилищ.ОбщиеРеквизиты = ПоместитьВоВременноеХранилище(-1, УникальныйИдентификатор);
	
	_ОписаниеВременнойТаблицы = новый Структура;
	_ОписаниеТаблицыРезультата = новый Структура;
	
	Попытка
		Если Метаданные.РежимИспользованияМодальности = Метаданные.СвойстваОбъектов.РежимИспользованияМодальности.НеИспользовать Тогда
			_ДиалогиЗапрещены = истина;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Попытка
		Если Метаданные.РежимИспользованияСинхронныхВызововРасширенийПлатформыИВнешнихКомпонент = Метаданные.СвойстваОбъектов.РежимИспользованияСинхронныхВызововРасширенийПлатформыИВнешнихКомпонент.НеИспользовать
			или Метаданные.РежимИспользованияСинхронныхВызововРасширенийПлатформыИВнешнихКомпонент = Метаданные.СвойстваОбъектов.РежимИспользованияСинхронныхВызововРасширенийПлатформыИВнешнихКомпонент.ИспользоватьСПредупреждениями Тогда
			_СинхронныеВызовыЗапрещены = истина;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	вПодключитьНестандартнуюФормуВыбораТипа();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	мЗакрытьФормуБезВопросов = ложь;
	вСброситьФлагИзмененияДанных();
	
	#Если ТонкийКлиент Тогда
		Заголовок = Заголовок + " (тонкий клиент)";
	#ИначеЕсли ВебКлиент Тогда
		Заголовок = Заголовок + " (web клиент)";
	#ИначеЕсли ТолстыйКлиентОбычноеПриложение Тогда
		Заголовок = Заголовок + " (обычное приложение)";
		_ЭтоТолстыйКлиент = истина;
	#ИначеЕсли ТолстыйКлиентУправляемоеПриложение Тогда
		Заголовок = Заголовок + " (толстый клиент)";
		_ЭтоТолстыйКлиент = истина;
	#Иначе
		Отказ = истина;
		Возврат;
	#КонецЕсли
	
	Если _ПоказыватьФайлЗапросовВЗаголовке и не ПустаяСтрока(_ПутьКФайлуЗапросов) Тогда
		Заголовок = Заголовок + " (" + _ПутьКФайлуЗапросов + ")";
	КонецЕсли;
	
	мИмяОбработки = вПолучитьИмяОбработки();
	мИсточникКопирования = -1;
	мТекСтрокаДереваЗапросов = -1;
	мТекСтрокаДереваАлгоритмов = -1;
	мТекСтрокаСпискаВТ = -1;
	
	мТипХЗ = Тип("ХранилищеЗначения");
	
	_ВыполнятьАлгоритмНаСервере = истина;
	_ИспользоватьПопыткуДляАлгоритма = истина;
	
	вОчиститьДеревоЗапросов();
	вОчиститьДеревоАлгоритмов();
	
	вЗагрузитьНастройкиОбработки();
	
	вУстановитьВидимостьРаздела_ВременныеТаблицы();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если мЗакрытьФормуБезВопросов = истина или _ЗадаватьВопросПриЗакрытии = ложь Тогда
		Возврат;
	КонецЕсли;
	
	Если вДанныеИзменены() Тогда
		Если ЗавершениеРаботы = Неопределено Тогда
			// для старых версии платформы
			Отказ = истина;
			вПоказатьВопрос("вЗакрытьФорму_Ответ", "Консоль запросов будет закрыта. Продолжить?");
			Возврат;
		КонецЕсли;
		
		Если ЗавершениеРаботы = истина Тогда
			Отказ = истина;
			ТекстПредупреждения = "Есть не сохраненные данные в консоли запросов";
		Иначе
			Отказ = истина;
			вПоказатьВопрос("вЗакрытьФорму_Ответ", "Консоль запросов будет закрыта. Продолжить?");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вЗакрытьФорму_Ответ(пОтвет, ДопПараметры = Неопределено) Экспорт
	Если пОтвет = КодВозвратаДиалога.Да Тогда
		мЗакрытьФормуБезВопросов = истина;
		ЭтаФорма.Закрыть();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область КомандыФормы

&НаКлиенте
Процедура _ПоказатьСведения(Команда)
	СтрукПарам = новый Структура("ОписаниеРазработки", _ОписаниеРазработки);
	ОткрытьФорму(_ПутьКФормам + "ФормаОРазработке", СтрукПарам);
КонецПроцедуры

&НаКлиенте
Процедура _СкрытьДеревоЗапросов(Команда)
	Если вСЗапросомРаботатьНельзя() Тогда
		Возврат;
	КонецЕсли;
	
	ЭФ = Элементы.Форма_СкрытьДеревоЗапросов;
	ЭФ.Пометка = не ЭФ.Пометка;
	Элементы.ГруппаДеревоЗапросов.Видимость = ЭФ.Пометка;
	Элементы.Форма_ЗагрузитьФайлЗапросов.Доступность = ЭФ.Пометка;
	Элементы.Форма_ОчиститьДеревоЗапросов.Доступность = ЭФ.Пометка;
	Элементы._ПутьКФайлуЗапросов.ТолькоПросмотр = не ЭФ.Пометка;
	Элементы._ПеречитатьФайлЗапросов.Доступность = ЭФ.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура _СкрытьПанельРезультатов(Команда)
	ЭФ = Элементы.Форма_СкрытьПанельРезультатов;
	ЭФ.Пометка = не ЭФ.Пометка;
	Элементы.ГруппаРезультаты.Видимость = ЭФ.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура _ОткрытьВНовомОкне(Команда)
	Форма = ПолучитьФорму(_ПутьКФормам,,ТекущаяДата());
	Форма.Открыть();
КонецПроцедуры

#КонецОбласти


#Область КонтрольИзмененияДанных

&НаКлиенте
Функция вСброситьФлагИзмененияДанных()
	мИзмененныеДанные = новый Структура("Запросы, Алгоритмы", ложь, ложь);
	Возврат истина;
КонецФункции

&НаКлиенте
Функция вДанныеИзменены()
	Возврат (мИзмененныеДанные.Запросы или мИзмененныеДанные.Алгоритмы);
КонецФункции

&НаКлиенте
Функция вЗапросыИзменены(Значение = Неопределено)
	Если Значение = Неопределено Тогда
		Возврат мИзмененныеДанные.Запросы;
	КонецЕсли;
	
	мИзмененныеДанные.Запросы = Значение;
	Модифицированность = вДанныеИзменены();
	Возврат Значение;
КонецФункции

&НаКлиенте
Функция вАлгоритмыИзменены(Значение = Неопределено)
	Если Значение = Неопределено Тогда
		Возврат мИзмененныеДанные.Алгоритмы;
	КонецЕсли;
	
	мИзмененныеДанные.Алгоритмы = Значение;
	Модифицированность = вДанныеИзменены();
	Возврат Значение;
КонецФункции

#КонецОбласти


#Область НастройкиОбработки

&НаКлиентеНаСервереБезКонтекста
Функция вПолучитьИмяОбработки()
	Возврат "СДРКонсольЗапросовХ";
КонецФункции

&НаКлиенте
Процедура вЗагрузитьНастройкиОбработки()
	
	Если ПустаяСтрока(_ПутьКФайлуЗапросов) Тогда
		вЗагрузитьНастройкиПоСтарому();
	КонецЕсли;
	
	Попытка
		Если не ПустаяСтрока(_ПутьКФайлуЗапросов) и вФайлСуществует(_ПутьКФайлуЗапросов) Тогда
			вЗагрузитьЗапросыИзФайла(вСоздатьМассив(_ПутьКФайлуЗапросов));
		КонецЕсли;
		
		Если не ПустаяСтрока(_ПутьКФайлуАлгоритмов) и вФайлСуществует(_ПутьКФайлуАлгоритмов) Тогда
			вЗагрузитьАлгоритмыИзФайла(вСоздатьМассив(_ПутьКФайлуАлгоритмов));
		КонецЕсли;
		
		вСформироватьЗаголовокКлиент();
	Исключение
		вСообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура _ПоказыватьФайлЗапросовВЗаголовкеПриИзменении(Элемент)
	вСформироватьЗаголовокКлиент();
КонецПроцедуры

&НаКлиенте
Процедура _ПутьКФайлуЗапросовПриИзменении(Элемент)
	_ПеречитатьФайлЗапросов(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура _ПутьКФайлуЗапросовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = ложь;
	_ЗагрузитьФайлЗапросов(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура _ПутьКФайлуАлгоритмовПриИзменении(Элемент)
	_ПеречитатьФайлАлгоритмов(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура _ПутьКФайлуАлгоритмовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = ложь;
	_ЗагрузитьФайлАлгоритмов(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура _ПеречитатьФайлЗапросов(Команда)
	Если ПустаяСтрока(_ПутьКФайлуЗапросов) Тогда
		Возврат;
	КонецЕсли;
	
	вОчиститьДеревоЗапросов();
	Если вФайлСуществует(_ПутьКФайлуЗапросов) Тогда
		вЗагрузитьЗапросыИзФайла(вСоздатьМассив(_ПутьКФайлуЗапросов));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ПеречитатьФайлАлгоритмов(Команда)
	Если ПустаяСтрока(_ПутьКФайлуАлгоритмов) Тогда
		Возврат;
	КонецЕсли;
	
	вОчиститьДеревоАлгоритмов();
	Если вФайлСуществует(_ПутьКФайлуАлгоритмов) Тогда
		вЗагрузитьАлгоритмыИзФайла(вСоздатьМассив(_ПутьКФайлуАлгоритмов));
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура вЗагрузитьНастройкиПоСтарому()
	СтрукНастройкиПоУмолчанию = новый Структура;
	СтрукНастройкиПоУмолчанию.Вставить("_ПутьКФайлуЗапросов", "");
	СтрукНастройкиПоУмолчанию.Вставить("_ПутьКФайлуАлгоритмов", "");
	
	СтрукНастройки = ХранилищеОбщихНастроек.Загрузить(вПолучитьИмяОбработки());
	Если ТипЗнч(СтрукНастройки) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(СтрукНастройкиПоУмолчанию, СтрукНастройки);
		Попытка
			ЗаполнитьЗначенияСвойств(ЭтаФорма, СтрукНастройкиПоУмолчанию);
		Исключение
			Возврат;
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область РаботаСЗапросами

&НаКлиенте
Функция вКореньДереваЗапросов()
	Возврат _ДеревоЗапросов.ПолучитьЭлементы()[0];
КонецФункции

&НаКлиенте
Функция вСЗапросомРаботатьНельзя(пПоказатьПредупреждение = истина)
	пРезультат = Элементы._ТекстЗапроса.ТолькоПросмотр;
	
	Если пРезультат и пПоказатьПредупреждение Тогда
		пТекст = "Корень дерева запросов редактировать нельзя!
		|Перейдите на другой узел в дереве или добавьте новый.
		|(используйте контекстное меню)";
		
		вПоказатьПредупреждение(пТекст);
	КонецЕсли;
	
	Возврат пРезультат;
КонецФункции


#Область СохранениеЗагрузка

&НаКлиенте
Функция вПроверитьДанныеПередЗагрузкойЗапросов(Струк)
	Текст = "Неверный формат файла запросов!";
	СтрукЗаголовок = новый Структура("Формат, Версия, Назначение, Элементы");
	
	Если ТипЗнч(Струк) <> Тип("Структура") Тогда
		Возврат вСообщитьОбОшибке(Текст);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрукЗаголовок, Струк);
	
	Если СтрукЗаголовок.Формат <> мИмяОбработки или СтрукЗаголовок.Элементы = Неопределено Тогда
		Возврат вСообщитьОбОшибке(Текст);
	КонецЕсли;
	
	Если СтрукЗаголовок.Назначение <> "Запросы" Тогда
		Возврат вСообщитьОбОшибке("Файл не предназначен для загрузки запросов!");
	КонецЕсли;
	
	Возврат истина;
КонецФункции

&НаКлиенте
Процедура вПреобразоватьЦепочкуЗапросовВСтруктуру(ЭтоПервыйВызов = истина, Результат, Знач СтрокиДЗ, Массив = Неопределено)
	Если ЭтоПервыйВызов Тогда
		Результат = новый Структура;
		Результат.Вставить("Формат", "СДРКонсольЗапросовХ");
		Результат.Вставить("Версия", 1);
		Результат.Вставить("Назначение", "Запросы");
		Результат.Вставить("Элементы", новый Массив);
	КонецЕсли;
	
	Для каждого СтрДЗ из СтрокиДЗ Цикл
		Струк = новый Структура("Имя, Текст, Параметры, МВТ, СпособВыгрузки, Комментарий");
		ЗаполнитьЗначенияСвойств(Струк, СтрДЗ);
		
		Струк.Параметры = новый Массив;
		Для каждого Стр из СтрДЗ.Параметры Цикл
			пСтрук = новый Структура("Имя, Значение, ЭтоСпецЗначение, СпецЗначение, ТипЗначения");
			ЗаполнитьЗначенияСвойств(пСтрук, Стр);
			Струк.Параметры.Добавить(пСтрук);
		КонецЦикла;
		
		Струк.МВТ = новый Массив;
		Для каждого Стр из СтрДЗ.МВТ Цикл
			пСтрук = новый Структура("Имя, СпецЗначение, Описание");
			ЗаполнитьЗначенияСвойств(пСтрук, Стр);
			Струк.МВТ.Добавить(пСтрук);
		КонецЦикла;
		
		Струк.Вставить("Дети", новый Массив);
		вПреобразоватьЦепочкуЗапросовВСтруктуру(ложь, Результат, СтрДЗ.ПолучитьЭлементы(), Струк.Дети);
		
		Если ЭтоПервыйВызов Тогда
			Результат.Элементы.Добавить(Струк);
		Иначе
			Массив.Добавить(Струк);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура вЗагрузитьЦепочкуЗапросовИзМассива(Знач УзелДЗ, Массив)
	Для каждого Струк из Массив Цикл
		Если не Струк.Свойство("МВТ") Тогда
			// старая версия консоли
			Струк.Вставить("МВТ", новый Массив);
		КонецЕсли;
		
		СтрДЗ = УзелДЗ.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрДЗ, Струк,, "Параметры, МВТ");
		
		Для каждого Стр из Струк.Параметры Цикл
			ЗаполнитьЗначенияСвойств(СтрДЗ.Параметры.Добавить(), Стр);
		КонецЦикла;
		
		Для каждого Стр из Струк.МВТ Цикл
			ЗаполнитьЗначенияСвойств(СтрДЗ.МВТ.Добавить(), Стр);
		КонецЦикла;
		
		Если Струк.Дети.Количество() > 0 Тогда
			вЗагрузитьЦепочкуЗапросовИзМассива(СтрДЗ, Струк.Дети);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура вОчиститьДеревоЗапросов()
	_ДеревоЗапросов.ПолучитьЭлементы().Очистить();
	
	НС = _ДеревоЗапросов.ПолучитьЭлементы().Добавить();
	НС.Имя = "Запросы";
	НС.Текст = "// КОРНЕВОЙ ЗАПРОС НЕ ИСПОЛЬЗУЕТСЯ //";
	
	вЗапросыИзменены(ложь);
КонецПроцедуры

&НаКлиенте
Функция вПолучитьДиалогВыбораФайлаЗапросов(Открытие = истина, ПутьКФайлу = "")
	пСтрук = вРазобратьПутьКФайлу(ПутьКФайлу);
	
	Диалог = Новый ДиалогВыбораФайла(?(Открытие, РежимДиалогаВыбораФайла.Открытие, РежимДиалогаВыбораФайла.Сохранение));
	Диалог.Каталог = пСтрук.Каталог;
	Диалог.ПолноеИмяФайла = пСтрук.Имя;
	Диалог.Заголовок  = "Файл запросов";
	Диалог.Фильтр     = "Файлы запросов (*.dat)|*.dat|Все файлы (*.*)|*.*";
	Диалог.Расширение = "dat";
	
	Возврат Диалог;
КонецФункции

&НаКлиенте
Процедура вСохранитьЗапросыВФайл(ВыбранныеФайлы, ДопПараметры = Неопределено) Экспорт
	Если ВыбранныеФайлы <> Неопределено Тогда
		
		Если ДопПараметры = Неопределено Тогда
			_ПутьКФайлуЗапросов = ВыбранныеФайлы[0];
			вСформироватьЗаголовокКлиент();
			СтрокиДЗ = вКореньДереваЗапросов().ПолучитьЭлементы();
		Иначе
			СтрокиДЗ = вСоздатьМассив(ДопПараметры);
		КонецЕсли;
		
		Попытка
			Струк = новый Структура;
			вПреобразоватьЦепочкуЗапросовВСтруктуру(истина, Струк, СтрокиДЗ);
			СтрокаДанных = вЗначениеВСтрокуВнутр(Струк);
			
			ТДок = новый ТекстовыйДокумент;
			ТДок.УстановитьТекст(СтрокаДанных);
			
			Если _СинхронныеВызовыЗапрещены Тогда
				ТДок.НачатьЗапись(новый ОписаниеОповещения("вСохранитьЗапросыВФайлДалее", ЭтаФорма), ВыбранныеФайлы[0]);
				Возврат;
			Иначе
				ТДок.Записать(ВыбранныеФайлы[0]);
			КонецЕсли;
			
			вЗапросыИзменены(ложь);
		Исключение
			вСообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вСохранитьЗапросыВФайлДалее(Результат, ДопПараметры = Неопределено) Экспорт
	Если Результат = истина Тогда
		вЗапросыИзменены(ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вЗагрузитьЗапросыИзФайла(ВыбранныеФайлы, ДопПараметры = Неопределено) Экспорт
	Если ВыбранныеФайлы <> Неопределено Тогда
		СтрукДалее = новый Структура("ТДок, УзелДЗ, ПутьКФайлуЗапросов");
		
		Если ДопПараметры = Неопределено Тогда
			_ПутьКФайлуЗапросов = "";
			вСформироватьЗаголовокКлиент();
			вОчиститьДеревоЗапросов();
			УзелДЗ = вКореньДереваЗапросов();
			
			СтрукДалее.ПутьКФайлуЗапросов = ВыбранныеФайлы[0];
		Иначе
			УзелДЗ = ДопПараметры;
		КонецЕсли;
		
		СтрукДалее.УзелДЗ = УзелДЗ;
		
		Попытка
			ТДок = новый ТекстовыйДокумент;
			
			СтрукДалее.ТДок = ТДок;
			
			Если _СинхронныеВызовыЗапрещены Тогда
				ТДок.НачатьЧтение(новый ОписаниеОповещения("вЗагрузитьЗапросыИзФайлаДалее", ЭтаФорма, СтрукДалее), ВыбранныеФайлы[0]);
			Иначе
				ТДок.Прочитать(ВыбранныеФайлы[0]);
				вЗагрузитьЗапросыИзФайлаДалее(СтрукДалее);
			КонецЕсли;
		Исключение
			вСообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вЗагрузитьЗапросыИзФайлаДалее(ДопПараметры) Экспорт
	ТДок = ДопПараметры.ТДок;
	УзелДЗ = ДопПараметры.УзелДЗ;
	
	Попытка
		СтрокаДанных = ТДок.ПолучитьТекст();
		
		Попытка
			Струк = вЗначениеИзСтрокиВнутр(СтрокаДанных);
		Исключение
			вСообщитьОбОшибке("Неверный формат файла запросов!");
			Возврат;
		КонецПопытки;
		
		Если не вПроверитьДанныеПередЗагрузкойЗапросов(Струк) Тогда
			Возврат;
		КонецЕсли;
		
		вЗагрузитьЦепочкуЗапросовИзМассива(УзелДЗ, Струк.Элементы);
		Элементы._ДеревоЗапросов.Развернуть(УзелДЗ.ПолучитьИдентификатор(), ложь);
	Исключение
		вСообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Если ДопПараметры.ПутьКФайлуЗапросов <> Неопределено Тогда
		_ПутьКФайлуЗапросов = ДопПараметры.ПутьКФайлуЗапросов;
		вСформироватьЗаголовокКлиент();
	Иначе
		вЗапросыИзменены(истина);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура _ЗагрузитьФайлЗапросов(Команда)
	Диалог = вПолучитьДиалогВыбораФайлаЗапросов(истина, _ПутьКФайлуЗапросов);
	Диалог.Показать(новый ОписаниеОповещения("вЗагрузитьЗапросыИзФайла", ЭтаФорма));
КонецПроцедуры

&НаКлиенте
Процедура _ОчиститьДеревоЗапросов(Команда)
	Если вЗапросыИзменены() Тогда
		вПоказатьВопрос("вОчиститьДеревоЗапросовОтвет", "Дерево запросов будет очищено! Продолжить?");
	Иначе
		вОчиститьДеревоЗапросовОтвет(КодВозвратаДиалога.Да);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вОчиститьДеревоЗапросовОтвет(пОтвет, пДопПарам = Неопределено) Экспорт
	Если пОтвет = КодВозвратаДиалога.Да Тогда
		_ПутьКФайлуЗапросов = "";
		вСформироватьЗаголовокКлиент();
		вОчиститьДеревоЗапросов();
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура _СохранитьФайлЗапросов(Команда)
	Если не ЗначениеЗаполнено(_ПутьКФайлуЗапросов) Тогда
		Диалог = вПолучитьДиалогВыбораФайлаЗапросов(ложь);
		Диалог.Показать(новый ОписаниеОповещения("вСохранитьЗапросыВФайл", ЭтаФорма));
	Иначе
		Массив = новый Массив;
		Массив.Добавить(_ПутьКФайлуЗапросов);
		вСохранитьЗапросыВФайл(Массив, Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _СохранитьФайлЗапросовКак(Команда)
		Диалог = вПолучитьДиалогВыбораФайлаЗапросов(ложь, _ПутьКФайлуЗапросов);
		Диалог.Показать(новый ОписаниеОповещения("вСохранитьЗапросыВФайл", ЭтаФорма));
КонецПроцедуры

&НаКлиенте
Процедура _СохранитьЗапросВФайл(Команда)
	ТекДанные = Элементы._ДеревоЗапросов.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Диалог = вПолучитьДиалогВыбораФайлаЗапросов(ложь);
		Диалог.Показать(новый ОписаниеОповещения("вСохранитьЗапросыВФайл", ЭтаФорма, ТекДанные));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ПодгрузитьЗапросИзФайла(Команда)
	ТекДанные = Элементы._ДеревоЗапросов.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Диалог = вПолучитьДиалогВыбораФайлаЗапросов(истина);
		Диалог.Показать(новый ОписаниеОповещения("вЗагрузитьЗапросыИзФайла", ЭтаФорма, ТекДанные));
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытий

&НаКлиенте
Процедура вУстановитьДоступностьРедактированияЗапроса(ТолькоПросмотр)
	Элементы._ДеревоЗапросовИмя.ТолькоПросмотр = ТолькоПросмотр;
	Элементы._ТекстЗапроса.ТолькоПросмотр = ТолькоПросмотр;
	Элементы._ОписаниеЗапроса.ТолькоПросмотр = ТолькоПросмотр;
	
	//Элементы._СпособВыгрузки.ТолькоПросмотр = истина; //!!! пока не реализовано
	
//	ВАЖНО: если изменить свойство, то форма дергается
//	Элементы._ПараметрыЗапроса.ТолькоПросмотр = ТолькоПросмотр;
КонецПроцедуры

&НаКлиенте
Процедура вСкопироватьСтрокуДереваЗапросов(Приемник, Источник)
	ЗаполнитьЗначенияСвойств(Приемник, Источник,, "Параметры, МВТ");
	
	Приемник.Параметры.Очистить();
	Для каждого Стр из Источник.Параметры Цикл
		НС = Приемник.Параметры.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Стр);
		Если ТипЗнч(НС.Значение) = Тип("СписокЗначений") Тогда
			НС.Значение = НС.Значение.Скопировать();
		КонецЕсли;
	КонецЦикла;
	
	Приемник.МВТ.Очистить();
	Для каждого Стр из Источник.МВТ Цикл
		НС = Приемник.Параметры.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Стр);
	КонецЦикла;
	
	ДочерниеЭлементыИсточника = Источник.ПолучитьЭлементы();
	ДочерниеЭлементыПриемника = Приемник.ПолучитьЭлементы();
	Для каждого СтрДЗ из ДочерниеЭлементыИсточника Цикл;
		НС = ДочерниеЭлементыПриемника.Добавить();
		вСкопироватьСтрокуДереваЗапросов(НС, СтрДЗ);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура вПереподчинитьЗапрос(СтрДЗ, НоваяСемья)
	вСкопироватьСтрокуДереваЗапросов(НоваяСемья.Добавить(), СтрДЗ);
КонецПроцедуры

&НаКлиенте
Процедура вВосстановитьДанныеЗапроса()
	Если мТекСтрокаДереваЗапросов <> -1 Тогда
		ТекДанные = _ДеревоЗапросов.НайтиПоИдентификатору(мТекСтрокаДереваЗапросов);
		Если ТекДанные <> Неопределено Тогда
			_ТекстЗапроса.УстановитьТекст(ТекДанные.Текст);
			_ОписаниеЗапроса.УстановитьТекст(ТекДанные.Комментарий);
			_СпособВыгрузки = ТекДанные.СпособВыгрузки;
			
			_ПараметрыЗапроса.Очистить();
			Для каждого Стр из ТекДанные.Параметры Цикл
				ЗаполнитьЗначенияСвойств(_ПараметрыЗапроса.Добавить(), Стр);
			КонецЦикла;
			
			_МВТ.Очистить();
			Для каждого Стр из ТекДанные.МВТ Цикл
				ЗаполнитьЗначенияСвойств(_МВТ.Добавить(), Стр);
			КонецЦикла;
		Иначе
			мТекСтрокаДереваЗапросов = -1;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вСохранитьДанныеЗапроса(Имя)
	Если мТекСтрокаДереваЗапросов <> -1 Тогда
		ТекДанные = _ДеревоЗапросов.НайтиПоИдентификатору(мТекСтрокаДереваЗапросов);
		Если ТекДанные <> Неопределено Тогда
			Если Имя = "Текст" Тогда
				ТекДанные.Текст = _ТекстЗапроса.ПолучитьТекст();
			ИначеЕсли Имя = "Комментарий" Тогда
				ТекДанные.Комментарий = _ОписаниеЗапроса.ПолучитьТекст();
			ИначеЕсли Имя = "Параметры" Тогда
				ТекДанные.Параметры.Очистить();
				Для каждого Стр из _ПараметрыЗапроса Цикл
					ЗаполнитьЗначенияСвойств(ТекДанные.Параметры.Добавить(), Стр);
				КонецЦикла;
			ИначеЕсли Имя = "МВТ" Тогда
				ТекДанные.МВТ.Очистить();
				Для каждого Стр из _МВТ Цикл
					ЗаполнитьЗначенияСвойств(ТекДанные.МВТ.Добавить(), Стр);
				КонецЦикла;
			ИначеЕсли Имя = "СпособВыгрузки" Тогда
				ТекДанные.СпособВыгрузки = _СпособВыгрузки;
			КонецЕсли;
		Иначе
			мТекСтрокаДереваЗапросов = -1;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ТекстЗапросаПриИзменении(Элемент)
	вСохранитьДанныеЗапроса("Текст");
	вЗапросыИзменены(истина);
КонецПроцедуры

&НаКлиенте
Процедура _ОписаниеЗапросаПриИзменении(Элемент)
	вСохранитьДанныеЗапроса("Комментарий");
	вЗапросыИзменены(истина);
КонецПроцедуры

&НаКлиенте
Процедура _СпособВыгрузкиПриИзменении(Элемент)
	вСохранитьДанныеЗапроса("СпособВыгрузки");
	вЗапросыИзменены(истина);
КонецПроцедуры

&НаКлиенте
Процедура _ПараметрыЗапросаПриИзменении(Элемент)
	Если вСЗапросомРаботатьНельзя() Тогда
		Возврат;
	КонецЕсли;
	
	вСохранитьДанныеЗапроса("Параметры");
	вЗапросыИзменены(истина);
КонецПроцедуры

&НаКлиенте
Процедура _ПараметрыЗапросаЗначениеОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = ложь;
	
	ТекДанные = Элементы._ПараметрыЗапроса.ТекущиеДанные;
	
	Если ТекДанные <> Неопределено Тогда
		ТекДанные.ЭтоСпецЗначение = ложь;
		ТекДанные.СпецЗначение = "";
		ТекДанные.ТипЗначения = "";
		ТекДанные.Значение = Неопределено;
	КонецЕсли;
	
	Элемент.ВыбиратьТип  = истина;
	Элемент.КнопкаВыбора = истина;
	Элемент.ОграничениеТипа = новый ОписаниеТипов();
КонецПроцедуры

&НаКлиенте
Процедура _ПараметрыЗапросаЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	пЗначение = Элементы._ПараметрыЗапроса.ТекущиеДанные.Значение;
	
	Если пЗначение = Неопределено Тогда
		Если не _ИспользоватьСтандартныйСпособВыбораТипаПараметра Тогда
			СтандартнаяОбработка = ложь;
			СтрукПарам = новый Структура("ЗакрыватьПриЗакрытииВладельца, ТипыДляКонсолиЗапросов", истина, истина);
			ОткрытьФорму(_ПутьКФормам + "ФормаВыбораОбъекта", СтрукПарам, Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	Иначе
		вУстановитьОграничениеТипаНаПараметрЗапроса(пЗначение);
		
		Если ТипЗнч(пЗначение) = Тип("СписокЗначений") Тогда
			Возврат;
		КонецЕсли;
		
		Если _ИспользоватьНеСтандартнуюФормуДляВыбора Тогда
			пПолноеИмя = вПолучитьПолноеИмяМД(пЗначение);
			Если пПолноеИмя <> Неопределено Тогда
				СтандартнаяОбработка = ложь;
				СтрукПараметры = новый Структура("ПутьКФормам, ПолноеИмя", _ПутьКФормам, пПолноеИмя);
				СтрукПараметры.Вставить("РежимВыбора", истина);
				Попытка
					ОткрытьФорму(_ПутьКФормам + "ФормаСпискаОбъектов", СтрукПараметры, Элемент,истина,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				Исключение
					СтандартнаяОбработка = истина;
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ПараметрыЗапросаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если вСЗапросомРаботатьНельзя() Тогда
		Отказ = истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ПараметрыЗапросаПередНачаломИзменения(Элемент, Отказ)
	ТекДанные = Элемент.ТекущиеДанные;
	
	Если Элемент.ТекущийЭлемент = Элементы._ПараметрыЗапросаЗначение Тогда
		Если ТекДанные.ЭтоСпецЗначение Тогда
			Если ТекДанные.ТипЗначения = "УникальныйИдентификатор" Тогда
				// можно редактировать
			ИначеЕсли ТекДанные.ТипЗначения = "Выражение" Тогда
				// можно редактировать
			Иначе
				Отказ = истина;
				_ОткрытьСпецЗначениеПараметра(Неопределено);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		вУстановитьОграничениеТипаНаПараметрЗапроса(ТекДанные.Значение);
		
		Если ТекДанные.Значение = Неопределено Тогда
			Элемент.ТекущийЭлемент.ВыбиратьТип = истина;
		Иначе
			Элемент.ТекущийЭлемент.ВыбиратьТип = ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ДеревоЗапросовИмяПриИзменении(Элемент)
	вЗапросыИзменены(истина);
КонецПроцедуры

&НаКлиенте
Процедура _ДеревоЗапросовПриИзменении(Элемент)
	вЗапросыИзменены(истина);
КонецПроцедуры

&НаКлиенте
Процедура _ДеревоЗапросовПередУдалением(Элемент, Отказ)
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено и ТекДанные.ПолучитьРодителя() = Неопределено Тогда
		вПоказатьПредупреждение("Нельзя удалить корневой элемент дерева!");
		Отказ = истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ДеревоЗапросовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда
		мИсточникКопирования = -1;
		ТекДанные = Элемент.ТекущиеДанные;
		Если ТекДанные <> Неопределено и ТекДанные.ПолучитьРодителя() = Неопределено Тогда
			вПоказатьПредупреждение("Нельзя скопировать корневой элемент дерева!");
			Отказ = истина;
		Иначе
			мИсточникКопирования = ТекДанные.ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ДеревоЗапросовПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("вПриАктивизацииСтрокиДереваЗапросов", 0.1, истина);
КонецПроцедуры

&НаКлиенте
Процедура вПриАктивизацииСтрокиДереваЗапросов() Экспорт
	Элемент = Элементы._ДеревоЗапросов;
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Инд = ТекДанные.ПолучитьИдентификатор();
		Если Инд <> мТекСтрокаДереваЗапросов Тогда
			мТекСтрокаДереваЗапросов = Инд;
			вВосстановитьДанныеЗапроса();
			вУстановитьДоступностьРедактированияЗапроса(ТекДанные = вКореньДереваЗапросов());
		КонецЕсли;
	Иначе
		мТекСтрокаДереваЗапросов = -1;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура _ДеревоЗапросовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Копирование Тогда
		Если мИсточникКопирования <> -1 Тогда
			ДанныеИсточник = _ДеревоЗапросов.НайтиПоИдентификатору(мИсточникКопирования);
			Если ДанныеИсточник <> Неопределено Тогда
				вСкопироватьСтрокуДереваЗапросов(ТекДанные, ДанныеИсточник);
				вВосстановитьДанныеЗапроса();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ДеревоЗапросовНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	мИсточникПеретаскивания = "Запросы";
	мСтрокаПеретаскивания = Элемент.ТекущиеДанные;
	ПараметрыПеретаскивания.Значение = "";
КонецПроцедуры

&НаКлиенте
Процедура _ДеревоЗапросовПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = ложь;
	Если мИсточникПеретаскивания <> "Запросы" Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ДеревоЗапросовПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = ложь;
	
	Если мИсточникПеретаскивания = "Запросы" и Строка <> Неопределено и мСтрокаПеретаскивания <> Неопределено Тогда
		НовыйРодитель = _ДеревоЗапросов.НайтиПоИдентификатору(Строка);
		Если НовыйРодитель = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Потомок = мСтрокаПеретаскивания;
		ПрежнийРодитель = Потомок.ПолучитьРодителя();
		Если ПрежнийРодитель <> Неопределено и Строка <> ПрежнийРодитель.ПолучитьИдентификатор() Тогда
			Если не вПотомокПроисходитОтПредка(Потомок, НовыйРодитель) Тогда
				вПереподчинитьЗапрос(Потомок, НовыйРодитель.ПолучитьЭлементы());
				ПрежняяСемья = ПрежнийРодитель.ПолучитьЭлементы();
				ПрежняяСемья.Удалить(ПрежняяСемья.Индекс(Потомок));
				вЗапросыИзменены(истина);
			Иначе
				вПоказатьПредупреждение("Зацикливание подчиненности - переподчинение невозможно!");
			КонецЕсли;
		КонецЕсли;
		мСтрокаПеретаскивания = Неопределено;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОсновнаяРабота

&НаКлиенте
Процедура _СохранитьПараметрыЗапроса(Команда)
	_БуферПараметровЗапроса.Очистить();
	
	Для каждого Стр из Элементы._ПараметрыЗапроса.ВыделенныеСтроки Цикл
		ТекДанные = _ПараметрыЗапроса.НайтиПоИдентификатору(Стр);
		Если ТекДанные <> Неопределено Тогда
			НС = _БуферПараметровЗапроса.Добавить();
			ЗаполнитьЗначенияСвойств(НС, ТекДанные);
			Если ТипЗнч(ТекДанные.Значение) = Тип("СписокЗначений") Тогда
				НС.Значение = ТекДанные.Значение.Скопировать();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура _ВосстановитьПараметрыЗапроса(Команда)
	Если вСЗапросомРаботатьНельзя() Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Стр из _БуферПараметровЗапроса Цикл
		НС = _ПараметрыЗапроса.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Стр);
	КонецЦикла;
	вСохранитьДанныеЗапроса("Параметры");
	вЗапросыИзменены(истина);
КонецПроцедуры

&НаКлиенте
Процедура _ОткрытьСпецЗначениеПараметра(Команда)
	ТекДанные = Элементы._ПараметрыЗапроса.ТекущиеДанные;
	Если ТекДанные <> Неопределено и ТекДанные.ЭтоСпецЗначение Тогда
		Если ТекДанные.ТипЗначения = "ТаблицаЗначений" Тогда
			СтрукПарам = новый Структура("ЗначениеВнутр, Заголовок", ТекДанные.СпецЗначение, "Параметр запроса: " + ТекДанные.Имя);
			ОткрытьФорму(_ПутьКФормам + "ФормаТаблицыЗначений", СтрукПарам, ЭтаФорма,,,,новый ОписаниеОповещения("вПослеЗакрытияФормыРедактированияСпецПараметра", ЭтаФорма),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			СтрукПарам = новый Структура("ЗначениеВнутр, Заголовок", ТекДанные.СпецЗначение, "Параметр запроса: " + ТекДанные.Имя);
			ОткрытьФорму(_ПутьКФормам + "ФормаСпецЗначения", СтрукПарам, ЭтаФорма,,,,новый ОписаниеОповещения("вПослеЗакрытияФормыРедактированияСпецПараметра", ЭтаФорма),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вПараметрЗапросаВНовыйТип(пОперация)
	ТекДанные = Элементы._ПараметрыЗапроса.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если ТекДанные.ЭтоСпецЗначение и ТекДанные.ТипЗначения = "ТаблицаЗначений" Тогда
			Возврат;
		КонецЕсли;
		
		пСтрук = новый Структура("ЭтоСпецЗначение,Значение, ТипЗначения, СпецЗначение");
		ЗаполнитьЗначенияСвойств(пСтрук, ТекДанные);
		
		пРезультат = вПреобразоватьЗначениеПараметраЗапроса(пОперация, пСтрук);
		Если не пРезультат.Отказ Тогда
			ЗаполнитьЗначенияСвойств(ТекДанные, пРезультат.Данные);
		КонецЕсли;
		
		вСохранитьДанныеЗапроса("Параметры");
		вЗапросыИзменены(истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ПараметрЗапросаВГраницу(Команда)
	вПараметрЗапросаВНовыйТип("Граница");
КонецПроцедуры

&НаКлиенте
Процедура _ПараметрЗапросаВМоментВремени(Команда)
	вПараметрЗапросаВНовыйТип("МоментВремени");
КонецПроцедуры

&НаКлиенте
Процедура _ПараметрЗапросаВУникальныйИдентификатор(Команда)
	вПараметрЗапросаВНовыйТип("УникальныйИдентификатор");
КонецПроцедуры

&НаКлиенте
Процедура _ПараметрЗапросаВВыражение(Команда)
	вПараметрЗапросаВНовыйТип("Выражение");
КонецПроцедуры

&НаКлиенте
Процедура _ПараметрЗапросаВБитуюСсылку(Команда)
	Элементы._ПараметрыЗапроса.ДобавитьСтроку();
	ТекДанные = Элементы._ПараметрыЗапроса.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ПоказатьВводСтроки(новый ОписаниеОповещения("вОбработатьВводСтроки_ОбъектНеНайден", ЭтаФорма),,"Введите битую ссылку: <Объект не найден> ... ",,ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вОбработатьВводСтроки_ОбъектНеНайден(Строка, ДопПарам = Неопределено) Экспорт
	пУдалитьСтроку = истина;
	
	Если Строка <> Неопределено и не ПустаяСтрока(Строка) Тогда
		пСтрук = вПолучитьСсылкуНаУдаленныйОбъект(Строка);
		Если не пСтрук.Отказ Тогда
			ТекДанные = Элементы._ПараметрыЗапроса.ТекущиеДанные;
			Если ТекДанные <> Неопределено Тогда
				ТекДанные.Значение = пСтрук.Ссылка;
				пУдалитьСтроку = ложь;
			КонецЕсли;
		ИначеЕсли не ПустаяСтрока(пСтрук.ПричинаОтказа) Тогда
			Сообщить(пСтрук.ПричинаОтказа);
		КонецЕсли;
	КонецЕсли;
	
	Если пУдалитьСтроку Тогда
		ТекДанные = Элементы._ПараметрыЗапроса.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			_ПараметрыЗапроса.Удалить(ТекДанные);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция вПолучитьСсылкуНаУдаленныйОбъект(Знач пСтрокаОбъектНеНайден)
	пРезультат = новый Структура("Отказ, ПричинаОтказа, Ссылка", истина, "");
	пРезультат.ПричинаОтказа = "Неправильный формат строки!";
	
	Если ПустаяСтрока(пСтрокаОбъектНеНайден) Тогда
		пСтрокаОбъектНеНайден = "<Объект не найден> (769:b1390050568b35ac11e6e46fdd2c3861)";
	КонецЕсли;
	
	пСтрокаОбъектНеНайден = Сред(пСтрокаОбъектНеНайден, СтрНайти(пСтрокаОбъектНеНайден, "(") + 1);
	пСтрокаОбъектНеНайден = СтрЗаменить(пСтрокаОбъектНеНайден, ")", "");
	пСтрокаОбъектНеНайден = СокрЛП(пСтрокаОбъектНеНайден);
	
	Поз = СтрНайти(пСтрокаОбъектНеНайден, ":");
	
	пТип = Лев(пСтрокаОбъектНеНайден, Поз-1);
	пСтрока = Сред(пСтрокаОбъектНеНайден, Поз+1);
	
	Попытка
		пUUID = Сред(пСтрока,25,8)+"-"+Сред(пСтрока,21,4)+"-"+Сред(пСтрока,17,4)+"-"+Сред(пСтрока,1,4)+"-"+Сред(пСтрока,5,12);
		пUUID = новый УникальныйИдентификатор(пUUID);
		
		пСтрукОбъектыМД = новый Структура("ПланыОбмена, Справочники, Документы, ПланыВидовРасчета, ПланыВидовХарактеристик, ПланыСчетов, БизнесПроцессы, Задачи");
		
		Для каждого пРаздел из пСтрукОбъектыМД Цикл
			Для каждого Элем из Метаданные[пРаздел.Ключ] Цикл
				пМенеджер = Вычислить(пРаздел.Ключ + "[Элем.Имя]");
				пСтрока = ЗначениеВСтрокуВнутр(пМенеджер.ПустаяСсылка());
				Поз1 = СтрНайти(пСтрока, ",", НаправлениеПоиска.СКонца);
				Поз2 = СтрНайти(пСтрока, ":");
				
				Если Сред(пСтрока, Поз1+1, Поз2-Поз1-1) = пТип Тогда
					пРезультат.Ссылка = пМенеджер.ПолучитьСсылку(пUUID);
					пРезультат.Отказ = ложь;
					
					Возврат пРезультат;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Исключение
		пРезультат.ПричинаОтказа = пРезультат.ПричинаОтказа + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат пРезультат;
	КонецПопытки;
	
	Возврат пРезультат;
КонецФункции

&НаСервереБезКонтекста
Функция вПреобразоватьЗначениеПараметраЗапроса(Знач пОперация, Знач пСтрукДанные)
	пРезультат = новый Структура("Отказ, Данные", ложь, пСтрукДанные);
	
	Если пСтрукДанные.ЭтоСпецЗначение и пСтрукДанные.ТипЗначения <> пОперация Тогда
		пРезультат.Отказ = истина;
		Возврат пРезультат
	КонецЕсли;
	
	Попытка
		Если пОперация = "Граница" Тогда
			Если пСтрукДанные.ЭтоСпецЗначение Тогда
				пЗначение = ЗначениеИзСтрокиВнутр(пСтрукДанные.СпецЗначение);
				пСтрукДанные.ЭтоСпецЗначение = ложь;
				пСтрукДанные.СпецЗначение = "";
				пСтрукДанные.ТипЗначения = "";
				пСтрукДанные.Значение = пЗначение.Значение;
			Иначе
				пЗначение = новый Граница(пСтрукДанные.Значение);
				пСтрукДанные.ЭтоСпецЗначение = истина;
				пСтрукДанные.СпецЗначение = ЗначениеВСтрокуВнутр(пЗначение);
				пСтрукДанные.ТипЗначения = "Граница";
				пСтрукДанные.Значение = Строка(пЗначение.Значение) + ";" + Строка(пЗначение.ВидГраницы);
			КонецЕсли;
			
		ИначеЕсли пОперация = "МоментВремени" Тогда
			Если пСтрукДанные.ЭтоСпецЗначение Тогда
				пЗначение = ЗначениеИзСтрокиВнутр(пСтрукДанные.СпецЗначение);
				пСтрукДанные.ЭтоСпецЗначение = ложь;
				пСтрукДанные.СпецЗначение = "";
				пСтрукДанные.ТипЗначения = "";
				пСтрукДанные.Значение = ?(пЗначение.Ссылка <> Неопределено, пЗначение.Ссылка, пЗначение.Дата);
			Иначе
				Если ТипЗнч(пСтрукДанные.Значение) = Тип("Дата") Тогда
					пЗначение = новый МоментВремени(пСтрукДанные.Значение);
				Иначе
					пЗначение = новый МоментВремени(ТекущаяДата(), пСтрукДанные.Значение);
				КонецЕсли;
				пСтрукДанные.ЭтоСпецЗначение = истина;
				пСтрукДанные.СпецЗначение = ЗначениеВСтрокуВнутр(пЗначение);
				пСтрукДанные.ТипЗначения = "МоментВремени";
				пСтрукДанные.Значение = Строка(пЗначение);
			КонецЕсли;
			
		ИначеЕсли пОперация = "Выражение" Тогда
			Если пСтрукДанные.ЭтоСпецЗначение Тогда
				пСтрукДанные.ЭтоСпецЗначение = ложь;
				пСтрукДанные.СпецЗначение = "";
				пСтрукДанные.ТипЗначения = "";
				пСтрукДанные.Значение = "";
			Иначе
				пСтрукДанные.ЭтоСпецЗначение = истина;
				пСтрукДанные.СпецЗначение = "";
				пСтрукДанные.ТипЗначения = "Выражение";
				пСтрукДанные.Значение = "";
			КонецЕсли;
			
		ИначеЕсли пОперация = "УникальныйИдентификатор" Тогда
			Если пСтрукДанные.ЭтоСпецЗначение Тогда
				пРезультат.Отказ = истина;
			Иначе
				Попытка
					пЗначение = пСтрукДанные.Значение.УникальныйИдентификатор();
				Исключение
					пЗначение = вПолучитьПустойУникальныйИдентификатор();
				КонецПопытки;
				
				пСтрукДанные.ЭтоСпецЗначение = истина;
				пСтрукДанные.СпецЗначение = ЗначениеВСтрокуВнутр(пЗначение);
				пСтрукДанные.ТипЗначения = "УникальныйИдентификатор";
				пСтрукДанные.Значение = Строка(пЗначение);
			КонецЕсли;
			
		Иначе
			пРезультат.Отказ = истина;
		КонецЕсли;
		
	Исключение
		пРезультат.Отказ = истина;
	КонецПопытки;
	
	Возврат пРезультат;
КонецФункции

&НаКлиенте
Процедура _ПараметрЗапросаВСписокЗначений(Команда)
	ТекДанные = Элементы._ПараметрыЗапроса.ТекущиеДанные;
	Если ТекДанные <> Неопределено и не ТекДанные.ЭтоСпецЗначение Тогда
		
		Если ТипЗнч(ТекДанные.Значение) = Тип("СписокЗначений") Тогда
			Если ТекДанные.Значение.Количество() <> 0 Тогда
				вПоказатьВопрос("вПараметрЗапросаИзСпискаЗначений", "В параметр будет помещено первое значение из списка значений. Продолжить?");
				Возврат;
			Иначе
				ТекДанные.Значение = Неопределено;
				вУстановитьОграничениеТипаНаПараметрЗапроса(Неопределено);
				вСохранитьДанныеЗапроса("Параметры");
				вЗапросыИзменены(истина);
				Возврат;
			КонецЕсли;
		Иначе
			Значение = ТекДанные.Значение;
			пСписок = новый СписокЗначений;
			пСписок.Добавить(Значение);
			ТекДанные.Значение = пСписок;
			вУстановитьОграничениеТипаНаПараметрЗапроса(пСписок);
			
			вСохранитьДанныеЗапроса("Параметры");
			вЗапросыИзменены(истина);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вПараметрЗапросаИзСпискаЗначений(РезультатВопроса, пДопПарам = Неопределено) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ТекДанные = Элементы._ПараметрыЗапроса.ТекущиеДанные;
		Если ТекДанные <> Неопределено и не ТекДанные.ЭтоСпецЗначение Тогда
			Если ТипЗнч(ТекДанные.Значение) = Тип("СписокЗначений") и ТекДанные.Значение.Количество() <> 0 Тогда
				ТекДанные.Значение = ТекДанные.Значение[0].Значение;
				вУстановитьОграничениеТипаНаПараметрЗапроса(ТекДанные.Значение);
				
				вСохранитьДанныеЗапроса("Параметры");
				вЗапросыИзменены(истина);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вУстановитьОграничениеТипаНаПараметрЗапроса(Знач Значение)
	ЭФ = Элементы._ПараметрыЗапросаЗначение;
	Если Значение = Неопределено Тогда
		ЭФ.ОграничениеТипа = новый ОписаниеТипов();
	Иначе
		Массив = новый Массив;
		Массив.Добавить(ТипЗнч(Значение));
		ЭФ.ОграничениеТипа = новый ОписаниеТипов(Массив);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура вПослеЗакрытияФормыРедактированияСпецПараметра(РезультатЗакрытия, ДопПараметры) Экспорт
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		ТекДанные = Элементы._ПараметрыЗапроса.ТекущиеДанные;
		Если ТекДанные <> Неопределено и ТекДанные.ЭтоСпецЗначение Тогда
			пПредставление = Неопределено;
			
			ТекДанные.СпецЗначение = РезультатЗакрытия.СтрокаВнутр;
			
			Если РезультатЗакрытия.Свойство("Представление", пПредставление) Тогда
				ТекДанные.Значение = пПредставление;
			КонецЕсли;
			
			вСохранитьДанныеЗапроса("Параметры");
			вЗапросыИзменены(истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция вПолучитьТекстЗапроса(ДляВыполнения = ложь)
	ПризнакОстанова = "1001 КАК __ВОЗВРАТ__";
	
	Результат = Элементы._ТекстЗапроса.ВыделенныйТекст;
	Если ПустаяСтрока(Результат) Тогда
		Результат = _ТекстЗапроса.ПолучитьТекст();
	КонецЕсли;
	
	Если ДляВыполнения и не ПустаяСтрока(Результат) и СтрНайти(Результат, ПризнакОстанова) <> 0 Тогда
		Текст = новый ТекстовыйДокумент;
		Текст.УстановитьТекст(Результат);
		
		ЧислоСимволов = 0;
		Результат = "";
		
		Для Сч = 1 по Текст.КоличествоСтрок() Цикл
			Стр = Текст.ПолучитьСтроку(Сч);
			Если СтрНайти(Стр, ПризнакОстанова) <> 0 Тогда
				Если СтрНайти(Стр, "ВЫБРАТЬ") = 0 Тогда
					Результат = Лев(Результат, СтрДлина(Результат) - ЧислоСимволов);
				КонецЕсли;
				Прервать;
			КонецЕсли;
			
			ЧислоСимволов = СтрДлина(Стр);
			
			Если Сч = 1 Тогда
				Результат = Стр;
			Иначе
				Результат = Результат + Символы.ПС + Стр;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СокрЛП(Результат);
КонецФункции

&НаКлиенте
Процедура вОбработатьЗакрытиеКонструктораЗапроса(ТекстЗапроса, ДопПараметры = Неопределено) Экспорт
	Если ТекстЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	_ТекстЗапроса.УстановитьТекст(ТекстЗапроса);
	вСохранитьДанныеЗапроса("Текст");
	вЗапросыИзменены(истина);
КонецПроцедуры

&НаКлиенте
Процедура _ОткрытьКонструкторЗапроса(Команда)
	Если вСЗапросомРаботатьНельзя() Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = _ТекстЗапроса.ПолучитьТекст();
	Если не ПустаяСтрока(ТекстЗапроса) Тогда
		Конструктор = Новый КонструкторЗапроса(ТекстЗапроса);
	Иначе
		Конструктор = Новый КонструкторЗапроса();
	КонецЕсли;
	
	#Если ТолстыйКлиентУправляемоеПриложение или ВнешнееСоединение Тогда
		Если не _ДиалогиЗапрещены Тогда
			Попытка
				вОбработатьЗакрытиеКонструктораЗапроса(?(Конструктор.ОткрытьМодально(), Конструктор.Текст, Неопределено));
				Возврат;
			Исключение
			КонецПопытки;
		КонецЕсли;
	#КонецЕсли
	
	Конструктор.Показать(новый ОписаниеОповещения("вОбработатьЗакрытиеКонструктораЗапроса", ЭтаФорма));
КонецПроцедуры

&НаКлиенте
Процедура _ЗаполнитьПараметрыЗапроса(Команда)
	Если вСЗапросомРаботатьНельзя() Тогда
		Возврат;
	КонецЕсли;
	
	Если мТекСтрокаДереваЗапросов <> -1 Тогда
		ТекДанные = _ДеревоЗапросов.НайтиПоИдентификатору(мТекСтрокаДереваЗапросов);
		Если ТекДанные <> Неопределено Тогда
			ТекстЗапроса = вПолучитьТекстЗапроса(истина);
			
			Попытка
				Коллекция = вПолучитьПараметрыПоТекстуЗапроса(ТекстЗапроса);
			Исключение
				вСообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				Возврат;
			КонецПопытки;
			
			Если ТипЗнч(Коллекция) = Тип("Массив") Тогда
				Для каждого ПараметрЗапроса из Коллекция Цикл
					МассивСтрок = _ПараметрыЗапроса.НайтиСтроки(новый Структура("Имя", ПараметрЗапроса.Имя));
					
					Если МассивСтрок.Количество() = 0 Тогда
						НС = _ПараметрыЗапроса.Добавить();
						ЗаполнитьЗначенияСвойств(НС, ПараметрЗапроса);
						Если не ПараметрЗапроса.ЭтоСпецЗначение Тогда
							НС.Значение = ПараметрЗапроса._ТипЗначения.ПривестиЗначение(НС.Значение);
						КонецЕсли;
						
					ИначеЕсли не ПараметрЗапроса.ЭтоСпецЗначение Тогда
						Для каждого Стр из МассивСтрок Цикл
							Если не Стр.ЭтоСпецЗначение и ТипЗнч(Стр.Значение) <> Тип("СписокЗначений") Тогда
								Стр.Значение = ПараметрЗапроса._ТипЗначения.ПривестиЗначение(Стр.Значение);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				
				вСохранитьДанныеЗапроса("Параметры");
				вЗапросыИзменены(истина);
			Иначе
				вСообщитьОбОшибке(Коллекция);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция вПолучитьПараметрыПоТекстуЗапроса(Знач ТекстЗапроса)
	Коллекция = новый Массив;
	
	Если  не ПустаяСтрока(ТекстЗапроса) Тогда
		Запрос = Новый Запрос(ТекстЗапроса);
		Попытка
			НайденныеПараметры = Запрос.НайтиПараметры();
		Исключение
			Возврат КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
		
		Для каждого ПараметрЗапроса из НайденныеПараметры Цикл
			Струк = новый Структура("Имя, Значение, ЭтоСпецЗначение, СпецЗначение, ТипЗначения, _ТипЗначения");
			
			Струк.Имя = ПараметрЗапроса.Имя;
			Струк.ЭтоСпецЗначение = ложь;
			Струк.СпецЗначение = "";
			Струк.ТипЗначения = "";
			
			Если ПараметрЗапроса.ТипЗначения.СодержитТип(Тип("ТаблицаЗначений")) Тогда
				Струк.ЭтоСпецЗначение = истина;
				Струк.Значение = "ТаблицаЗначений";
				Струк.ТипЗначения = "ТаблицаЗначений";
				Струк.СпецЗначение = ЗначениеВСтрокуВнутр(новый ТаблицаЗначений);
			ИначеЕсли ПараметрЗапроса.ТипЗначения.СодержитТип(Тип("УникальныйИдентификатор")) Тогда
				Струк.ЭтоСпецЗначение = истина;
				Струк.Значение = Строка(вПолучитьПустойУникальныйИдентификатор());
				Струк.ТипЗначения = "УникальныйИдентификатор";
				Струк.СпецЗначение = ЗначениеВСтрокуВнутр(вПолучитьПустойУникальныйИдентификатор());
			Иначе
				Струк.ЭтоСпецЗначение = ложь;
				Струк.Значение = Неопределено;
				Струк.СпецЗначение = "";
				Струк._ТипЗначения = ПараметрЗапроса.ТипЗначения;
			КонецЕсли;
			
			Коллекция.Добавить(Струк);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Коллекция;
КонецФункции

&НаКлиенте
Процедура _ПреобразоватьТекстВСтроку1С(Команда)
	Если вСЗапросомРаботатьНельзя() Тогда
		Возврат;
	КонецЕсли;
	
	Строка = вПолучитьТекстЗапроса(ложь);
	Если ПустаяСтрока(Строка) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстовыйДокумент1 = новый ТекстовыйДокумент();
	ТекстовыйДокумент2 = новый ТекстовыйДокумент();
	
	ТекстовыйДокумент1.УстановитьТекст(Строка);
	
	Для Сч = 1 по ТекстовыйДокумент1.КоличествоСтрок() Цикл
		Значение = ТекстовыйДокумент1.ПолучитьСтроку(Сч);
		Значение = СтрЗаменить(Значение, """", """""");
		ТекстовыйДокумент2.ДобавитьСтроку("|" + Значение);
	КонецЦикла;
	
	ТекстовыйДокумент2.Показать("Текст запроса");
КонецПроцедуры

&НаКлиенте
Процедура _ВставитьКомандуПрерыванияЗапроса(Команда)
	Если вСЗапросомРаботатьНельзя() Тогда
		Возврат;
	КонецЕсли;
	
	Элементы._ТекстЗапроса.ВыделенныйТекст = "ВЫБРАТЬ 1001 КАК __ВОЗВРАТ__;";
	вЗапросыИзменены(истина);
КонецПроцедуры

&НаКлиенте
Процедура _ВставитьПризнакВыводаGUID(Команда)
	Если вСЗапросомРаботатьНельзя() Тогда
		Возврат;
	КонецЕсли;
	
	Элементы._ТекстЗапроса.ВыделенныйТекст = "__GUID__";
	вЗапросыИзменены(истина);
КонецПроцедуры

&НаКлиенте
Процедура _ЗакомментироватьТекстЗапроса(Команда)
	Перем Строка1, Колонка1, Строка2, Колонка2;
	
	Если вСЗапросомРаботатьНельзя() Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы._ТекстЗапроса.ВыделенныйТекст = "" Тогда
		Возврат;
	КонецЕсли;
	
	вЗапросыИзменены(истина);
	Элементы._ТекстЗапроса.ПолучитьГраницыВыделения(Строка1, Колонка1, Строка2, Колонка2);
	
	ТекстовыйДокумент = новый ТекстовыйДокумент();
	ТекстовыйДокумент.УстановитьТекст(_ТекстЗапроса.ПолучитьТекст());
	
	Для Сч = Строка1 по ?(Колонка2 = 1, Строка2-1, Строка2) Цикл
		Стр = ТекстовыйДокумент.ПолучитьСтроку(Сч);
		Стр = "//" + Стр;
		ТекстовыйДокумент.ЗаменитьСтроку(Сч, Стр);
	КонецЦикла;
	
	_ТекстЗапроса.УстановитьТекст(ТекстовыйДокумент.ПолучитьТекст());
	Элементы._ТекстЗапроса.УстановитьГраницыВыделения(Строка1,1,Строка2,1);
	
	вЗапросыИзменены(истина);
КонецПроцедуры

&НаКлиенте
Процедура _РаскомментироватьТекстЗапроса(Команда)
	Перем Строка1, Колонка1, Строка2, Колонка2;
	
	Если вСЗапросомРаботатьНельзя() Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы._ТекстЗапроса.ВыделенныйТекст = "" Тогда
		Возврат;
	КонецЕсли;
	
	вЗапросыИзменены(истина);
	Элементы._ТекстЗапроса.ПолучитьГраницыВыделения(Строка1, Колонка1, Строка2, Колонка2);
	
	ТекстовыйДокумент = новый ТекстовыйДокумент();
	ТекстовыйДокумент.УстановитьТекст(_ТекстЗапроса.ПолучитьТекст());
	
	Для Сч = Строка1 по ?(Колонка2 = 1, Строка2-1, Строка2) Цикл
		Стр = ТекстовыйДокумент.ПолучитьСтроку(Сч);
		Если Лев(Стр, 2) = "//" Тогда
			Стр = Сред(Стр, 3);
			ТекстовыйДокумент.ЗаменитьСтроку(Сч, Стр);
		КонецЕсли;
	КонецЦикла;
	
	_ТекстЗапроса.УстановитьТекст(ТекстовыйДокумент.ПолучитьТекст());
	Элементы._ТекстЗапроса.УстановитьГраницыВыделения(Строка1,1,Строка2,1);
	
	вЗапросыИзменены(истина);
КонецПроцедуры

&НаКлиенте
Процедура _ЗапросВСтрокуXML(Команда)
	Если вСЗапросомРаботатьНельзя() Тогда
		Возврат;
	КонецЕсли;
	
	мТекСтрокаСпискаВТ = -1;
	
	Если мТекСтрокаДереваЗапросов <> -1 Тогда
		ТекДанные = _ДеревоЗапросов.НайтиПоИдентификатору(мТекСтрокаДереваЗапросов);
		Если ТекДанные <> Неопределено Тогда
			ТекстЗапроса = вПолучитьТекстЗапроса(истина);
			Если не ПустаяСтрока(ТекстЗапроса) Тогда
				СтрукРезультат = вВыполнитьЗапросНаСервере(ТекстЗапроса, ТекДанные.Параметры, ТекДанные.МВТ, ТекДанные.СпособВыгрузки, истина);
				Если не СтрукРезультат.Отказ Тогда
					пТекстовыйДокумент = новый ТекстовыйДокумент;
					пТекстовыйДокумент.УстановитьТекст(СтрукРезультат.СтрокаXML);
					пТекстовыйДокумент.Показать("Запрос в виде XML");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ЗапросИзСтрокиXML(Команда)
	Если вСЗапросомРаботатьНельзя() Тогда
		Возврат;
	КонецЕсли;
	
	Если мТекСтрокаДереваЗапросов <> -1 Тогда
		ТекДанные = _ДеревоЗапросов.НайтиПоИдентификатору(мТекСтрокаДереваЗапросов);
		Если ТекДанные <> Неопределено Тогда
			СтрукПарам = новый Структура("Заголовок", "Введите XML-представление запроса");
			СтрукДоп = новый Структура("ИдентификаторЗапроса", мТекСтрокаДереваЗапросов);
			ОткрытьФорму(_ПутьКФормам + "ФормаВводаТекста", СтрукПарам,,,,,новый ОписаниеОповещения("вОбработатьВводТекста", ЭтаФорма, СтрукДоп), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вОбработатьВводТекста(РезультатЗакрытия = Неопределено, ДопПарам = Неопределено) Экспорт
	Если ТипЗнч(РезультатЗакрытия) = Тип("Строка") и не ПустаяСтрока(РезультатЗакрытия) Тогда
		вЗапросыИзменены(истина);
		вСформироватьЗапросИзСтрокиXML(РезультатЗакрытия, ДопПарам.ИдентификаторЗапроса);
		вВосстановитьДанныеЗапроса();
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура _ВыполнитьЗапрос(Команда)
	Если вСЗапросомРаботатьНельзя() Тогда
		Возврат;
	КонецЕсли;
	
	мТекСтрокаСпискаВТ = -1;
	
	Если мТекСтрокаДереваЗапросов <> -1 Тогда
		ТекДанные = _ДеревоЗапросов.НайтиПоИдентификатору(мТекСтрокаДереваЗапросов);
		Если ТекДанные <> Неопределено Тогда
			ТекстЗапроса = вПолучитьТекстЗапроса(истина);
			Если не ПустаяСтрока(ТекстЗапроса) Тогда
				Если не Элементы.ГруппаРезультаты.Видимость Тогда
					_СкрытьПанельРезультатов(Неопределено);
				КонецЕсли;
				Если Элементы.ГруппаРезультаты.ТекущаяСтраница <> Элементы.СтрРезультатЗапроса Тогда
					Элементы.ГруппаРезультаты.ТекущаяСтраница = Элементы.СтрРезультатЗапроса;
				КонецЕсли;
				
				// почистим, чтобы не передавать на сервер
				_ТабРезультатыЗапроса.Очистить();
				_ТабВременныеТаблицы.Очистить();
				_ВременнаяТаблицаДанные.Очистить();
				
				Элементы.ДекорацияРезультатЗапроса.Заголовок = "";
				СтрукРезультат = вВыполнитьЗапросНаСервере(ТекстЗапроса, ТекДанные.Параметры, ТекДанные.МВТ, ТекДанные.СпособВыгрузки);
				Элементы.ДекорацияРезультатЗапроса.Заголовок = "Время выполнения: " + вДлительностьИнтервала(СтрукРезультат.ВремяВыполнения)
				+ ", время загрузки: " + вДлительностьИнтервала(СтрукРезультат.ВремяЗагрузки)
				+ ", время загрузки ВТ: " + вДлительностьИнтервала(СтрукРезультат.ВремяЗагрузкиВТ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция вСформироватьИмяНовойКолонкиТаблицы(Знач ТабРезультат, Номер)
	Для Сч = Номер по 1000 Цикл
		НовоеИмя = "__" + Формат(Сч, "ЧГ=0") + "__";
		Если ТабРезультат.Колонки.Найти(НовоеИмя) = Неопределено Тогда
			Номер = Сч + 1;
			Возврат НовоеИмя;
		КонецЕсли;
	КонецЦикла;
	
	Возврат "ХХХ";
КонецФункции

&НаСервереБезКонтекста
Функция вПолучитьВсеСсылочныеТипы()
	Струк = новый Структура(
		"Справочники,
		|Документы,
		|Перечисления,
		|ПланыВидовХарактеристик,
		|ПланыСчетов,
		|ПланыВидовРасчета,
		|ПланыОбмена,
		|БизнесПроцессы,
		|Задачи"
	);
	
	ВсеСсылки = новый ОписаниеТипов(БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().Типы());
	
	Для каждого Элем из Струк Цикл
		ВсеСсылки = новый ОписаниеТипов(ВсеСсылки, Вычислить(Элем.Ключ).ТипВсеСсылки().Типы());
	КонецЦикла;
	
	Возврат ВсеСсылки;
КонецФункции

&НаСервереБезКонтекста
Процедура вСформироватьДляЗаданныхКолонокGUID(Знач ТабРезультат, Знач ВсеСсылки, Знач ИспользоватьВерхнийРегистр = ложь)
	КоллекцияКолонок = ТабРезультат.Колонки;
	СтрукКолонки = новый Структура;
	
	СтартовыйНомер = 1;
	Для каждого Колонка из КоллекцияКолонок Цикл
		Если СтрНайти(Колонка.Имя, "__GUID__") <> 0 Тогда
			НовоеИмя = вСформироватьИмяНовойКолонкиТаблицы(ТабРезультат, СтартовыйНомер);
			СтрукКолонки.Вставить(Колонка.Имя, НовоеИмя);
		КонецЕсли;
	КонецЦикла;
	
	Если СтрукКолонки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТипКолонки = новый ОписаниеТипов("Строка",,новый КвалификаторыСтроки(36));
	Для каждого Элем из СтрукКолонки Цикл
		Инд = КоллекцияКолонок.Индекс(КоллекцияКолонок[Элем.Ключ]);
		КоллекцияКолонок.Вставить(Инд, Элем.Значение, ТипКолонки);
	КонецЦикла;
	
	Для каждого Стр из ТабРезультат Цикл
		Для каждого Элем из СтрукКолонки Цикл
			Значение = Стр[Элем.Ключ];
			Если ЗначениеЗаполнено(Значение) и ВсеСсылки.СодержитТип(ТипЗнч(Значение)) Тогда
				Стр[Элем.Значение] = Значение.УникальныйИдентификатор();
				Если ИспользоватьВерхнийРегистр Тогда
					Стр[Элем.Значение] = ВРег(Стр[Элем.Значение]);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для каждого Элем из СтрукКолонки Цикл
		КоллекцияКолонок.Удалить(Элем.Ключ);
		КоллекцияКолонок[Элем.Значение].Имя = Элем.Ключ;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура вУдалитьКолонкиСНеподдерживаемымиТипам(Знач ТабРезультат, Знач ЭтоВременнаяТаблица = ложь, Знач ЭтоТолстыйКлиент = ложь)
	ТипТЗ = Тип("ТаблицаЗначений");
	ТипХЗ = Тип("ХранилищеЗначения");
	
	КоллекцияКолонок = ТабРезультат.Колонки;
	СтрукКолонки = новый Структура;
	СтрукЗначения = новый Структура;
	
	СтартовыйНомер = 1;
	Для каждого Колонка из КоллекцияКолонок Цикл
		Если Колонка.ТипЗначения.СодержитТип(ТипТЗ) Тогда
			Если ЭтоВременнаяТаблица или не ЭтоТолстыйКлиент Тогда
				СтрукЗначения.Вставить(Колонка.Имя, "ТаблицаЗначений");
			Иначе
				Продолжить;
			КонецЕсли;
		ИначеЕсли Колонка.ТипЗначения.СодержитТип(ТипХЗ) Тогда
			Если ЭтоВременнаяТаблица Тогда
				СтрукЗначения.Вставить(Колонка.Имя, "ХранилищеЗначения");
			Иначе
				Продолжить;
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
		
		НовоеИмя = вСформироватьИмяНовойКолонкиТаблицы(ТабРезультат, СтартовыйНомер);
		СтрукКолонки.Вставить(Колонка.Имя, НовоеИмя);
	КонецЦикла;
	
	Если СтрукКолонки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТабРезультат) = Тип("ДеревоЗначений") Тогда
		Для каждого Элем из СтрукКолонки Цикл
			КоллекцияКолонок.Удалить(КоллекцияКолонок[Элем.Ключ]);
		КонецЦикла;
		
		Возврат;
	КонецЕсли;
	
	ТипКолонки = новый ОписаниеТипов("Строка",,новый КвалификаторыСтроки(36));
	Для каждого Элем из СтрукКолонки Цикл
		Инд = КоллекцияКолонок.Индекс(КоллекцияКолонок[Элем.Ключ]);
		КоллекцияКолонок.Вставить(Инд, Элем.Значение, ТипКолонки);
		ТабРезультат.ЗаполнитьЗначения(СтрукЗначения[Элем.Ключ], Элем.Значение);
	КонецЦикла;
	
	Для каждого Элем из СтрукКолонки Цикл
		КоллекцияКолонок.Удалить(Элем.Ключ);
		КоллекцияКолонок[Элем.Значение].Имя = Элем.Ключ;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция вРассчитатьЗначениеПараметраЗапроса(Знач Параметры, Знач пВыражение)
	Если ПустаяСтрока(пВыражение) Тогда
		Возврат "";
	КонецЕсли;
	
	Попытка
		пЗначение = Вычислить(пВыражение);
	Исключение
		ВызватьИсключение "Ошибка в выражении: " + пВыражение;
	КонецПопытки;
	
	Возврат пЗначение;
КонецФункции

&НаСервере
Функция вВыполнитьЗапросНаСервере(Знач ТекстЗапрос, Знач ПараметрыЗапроса, Знач МВТ, Знач СпособВыгрузки, Знач пПолучитьПредставлениеXML = ложь)
	СтрукРезультат = новый Структура("Отказ, ВремяВыполнения, ВремяЗагрузки, ВремяЗагрузкиВТ, СтрокаXML", ложь, 0, 0, 0, "");
	
	Если не пПолучитьПредставлениеXML Тогда
		Если не ПустаяСтрока(_АдресХранилищаВременныхТаблиц) Тогда
			Попытка
				УдалитьИзВременногоХранилища(_АдресХранилищаВременныхТаблиц);
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		// чистка временных таблиц предыдущего запроса
		_ТабВременныеТаблицы.Очистить();
		_ВременнаяТаблицаДанные.Очистить();
		
		РеквизитыКУдалению = новый Массив;
		
		ТабРезультат = РеквизитФормыВЗначение("_ВременнаяТаблицаДанные");
		ТабРезультат.Очистить();
		
		Если ТабРезультат.Колонки.Количество() <> 0 Тогда
			Для каждого Колонка из ТабРезультат.Колонки Цикл
				РеквизитыКУдалению.Добавить("_ВременнаяТаблицаДанные." + Колонка.Имя);
				Элем = Элементы.Найти("_ВременнаяТаблицаДанные_" + Колонка.Имя);
				Если Элем <> Неопределено Тогда
					Элементы.Удалить(Элем);
				КонецЕсли;
			КонецЦикла;
			
			ИзменитьРеквизиты(, РеквизитыКУдалению);
		КонецЕсли;
		
		
		// формирование основной таблицы результатов
		РеквизитыКДобавлению = новый Массив;
		РеквизитыКУдалению = новый Массив;
		
		ЭтоВыгрузкаДЗ = (_СпособВыгрузки = 1);
		Элементы._ТабРезультатыЗапроса.Видимость = не ЭтоВыгрузкаДЗ;
		Элементы._ДеревоРезультатыЗапроса.Видимость = ЭтоВыгрузкаДЗ;
		
		ТабРезультат = РеквизитФормыВЗначение("_ТабРезультатыЗапроса");
		ТабРезультат.Очистить();
		Для каждого Колонка из ТабРезультат.Колонки Цикл
			РеквизитыКУдалению.Добавить("_ТабРезультатыЗапроса." + Колонка.Имя);
			Элем = Элементы.Найти("_ТабРезультатыЗапроса_" + Колонка.Имя);
			Если Элем <> Неопределено Тогда
				Элементы.Удалить(Элем);
			КонецЕсли;
		КонецЦикла;
		
		ТабРезультат = РеквизитФормыВЗначение("_ДеревоРезультатыЗапроса");
		ТабРезультат.Строки.Очистить();
		Для каждого Колонка из ТабРезультат.Колонки Цикл
			РеквизитыКУдалению.Добавить("_ДеревоРезультатыЗапроса." + Колонка.Имя);
			Элем = Элементы.Найти("_ДеревоРезультатыЗапроса_" + Колонка.Имя);
			Если Элем <> Неопределено Тогда
				Элементы.Удалить(Элем);
			КонецЕсли;
		КонецЦикла;
		
		Если не _ВсеСсылочныеТипыСформированы Тогда
			_ВсеСсылочныеТипыСформированы = истина;
			_ВсеСсылочныеТипы = вПолучитьВсеСсылочныеТипы();
		КонецЕсли;
		
		Элементы.СтрРезультатЗапроса.Заголовок = "Результат запроса";
	КонецЕсли;
	
	Попытка
		пСтрукМВТ = новый Структура;
		Для каждого Стр из МВТ Цикл
			пСтрукМВТ.Вставить(Стр.Имя, ЗначениеИзСтрокиВнутр(Стр.СпецЗначение));
		КонецЦикла;
	Исключение
		вСообщитьОбОшибке("Ошибка при обработке таблиц МВТ");
		вСообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		СтрукРезультат.Отказ = истина;
		
		Возврат СтрукРезультат;
	КонецПопытки;
	
	Если пПолучитьПредставлениеXML Тогда
		пМенеджерВТ = новый МенеджерВременныхТаблиц;
	Иначе
		Попытка
			пМенеджерВТ = вСформироватьМенеджерВТ(пСтрукМВТ);
		Исключение
			вСообщитьОбОшибке("Ошибка при создании менеджера временных таблиц");
			вСообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			СтрукРезультат.Отказ = истина;
			
			Возврат СтрукРезультат;
		КонецПопытки;
	КонецЕсли;
	
	Запрос = новый Запрос;
	Запрос.МенеджерВременныхТаблиц = пМенеджерВТ;
	Запрос.Текст = ТекстЗапрос;
	
	пТипОписаниеТипов = Тип("ОписаниеТипов");
	
	Попытка
		пИмяПараметра = "";
		
		пЕстьВыражения = ложь;
		Если ПараметрыЗапроса.НайтиСтроки(новый Структура("ТипЗначения", "Выражение")).Количество() <> 0 Тогда
			пЕстьВыражения = истина;
			пСтрукПараметры = новый Структура;
		КонецЕсли;
		
		Для каждого Стр из ПараметрыЗапроса Цикл
			пИмяПараметра = Стр.Имя;
			Значение = Стр.Значение;
			
			Если Стр.ЭтоСпецЗначение Тогда
				Если Стр.ТипЗначения = "УникальныйИдентификатор" Тогда
					Значение = новый УникальныйИдентификатор(Стр.Значение);
				ИначеЕсли Стр.ТипЗначения = "Выражение" Тогда
					Значение = вРассчитатьЗначениеПараметраЗапроса(пСтрукПараметры, Стр.Значение);
				Иначе
					Значение = ЗначениеИзСтрокиВнутр(Стр.СпецЗначение);
				КонецЕсли;
			КонецЕсли;
			
			Если ТипЗнч(Значение) = пТипОписаниеТипов Тогда
				ЗаданныеТипы = Значение.Типы();
				Если ЗаданныеТипы.Количество() > 0 Тогда
					Запрос.УстановитьПараметр(Стр.Имя, ЗаданныеТипы[0]);
					Если пЕстьВыражения Тогда
						пСтрукПараметры.Вставить(Стр.Имя, ЗаданныеТипы[0]);
					КонецЕсли;
				КонецЕсли;
			Иначе
				Запрос.УстановитьПараметр(Стр.Имя, Значение);
				Если пЕстьВыражения Тогда
					пСтрукПараметры.Вставить(Стр.Имя, Значение);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Исключение
		вСообщитьОбОшибке("Ошибка при обработке параметра запроса: " + пИмяПараметра);
		вСообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Запрос.МенеджерВременныхТаблиц.Закрыть();
		СтрукРезультат.Отказ = истина;
		
		Возврат СтрукРезультат;
	КонецПопытки;
	
	Если пПолучитьПредставлениеXML Тогда
		Попытка
			СтрукРезультат.СтрокаXML = вЗапросВСтрокуXML(Запрос, пСтрукМВТ);
		Исключение
			вСообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			Запрос.МенеджерВременныхТаблиц.Закрыть();
			СтрукРезультат.Отказ = истина;
		КонецПопытки;
		
		Возврат СтрукРезультат;
	КонецЕсли;
	
	Попытка
		ДатаНач = ТекущаяДата();
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		Если ложь Тогда
			// отладка процедуры сохранения запроса
			// Сообщить( СохранитьЗапросДляСДРКонсолиХ(Запрос, "D:\ROL32\1CV83\ERP(МОГ)\Обработки\(Отладка)\777") );
		КонецЕсли;
		
		СтрукРезультат.ВремяВыполнения = ТекущаяДата() - ДатаНач;
		
		ДатаНач = ТекущаяДата();
		
		ПоследнийРезультат = МассивРезультатов[МассивРезультатов.Количество()-1];
		
		Если ПоследнийРезультат = Неопределено Тогда
			ТабРезультат = новый ТаблицаЗначений;
		ИначеЕсли ЭтоВыгрузкаДЗ Тогда
			ТабРезультат = ПоследнийРезультат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		Иначе
			ТабРезультат = ПоследнийРезультат.Выгрузить();
		КонецЕсли;
		
		СтрукРезультат.ВремяЗагрузки = ТекущаяДата() - ДатаНач;
		
		Если _СоставРезультатов = 1 или _СоставРезультатов = 2 Тогда
			ДатаНач = ТекущаяДата();
			
			СтрукВременныеТаблицы = новый Структура;
			
			СтрукПакет = вРазобратьПакетЗапросов(Запрос);
			
			пЧислоЗаписейДляВТ = ?(_СоставРезультатов = 1, ?(_ОграничениеНаЧислоЗаписейДляВременныхТаблиц = 0, -1, _ОграничениеНаЧислоЗаписейДляВременныхТаблиц), 1);
			пСтрукДанныеВТ = новый Структура("ЧислоЗаписей, Таблица", 0);
			
			Для каждого Элем из СтрукПакет.Запросы Цикл
				Если Элем.Значение = -1 Тогда
					Продолжить;
				КонецЕсли;
				
				ИмяЗапроса = Элем.Ключ;
				Если СтрукПакет.Таблицы[ИмяЗапроса] <> Неопределено Тогда
					Попытка
						пСтрукДанныеВТ = вПолучитьДанныеВременнойТаблицы(Запрос.МенеджерВременныхТаблиц, ИмяЗапроса, пЧислоЗаписейДляВТ);
						ТабДанныеВТ = пСтрукДанныеВТ.Таблица;
						вУдалитьКолонкиСНеподдерживаемымиТипам(ТабДанныеВТ, истина, _ЭтоТолстыйКлиент);
					Исключение
						Продолжить;
					КонецПопытки;
				Иначе
					ТабДанныеВТ = МассивРезультатов[Элем.Значение].Выгрузить();
					пСтрукДанныеВТ.ЧислоЗаписей = ТабДанныеВТ.Количество();
					вУдалитьКолонкиСНеподдерживаемымиТипам(ТабДанныеВТ, истина, _ЭтоТолстыйКлиент);
				КонецЕсли;
				
				НС = _ТабВременныеТаблицы.Добавить();
				НС.Имя = ИмяЗапроса;
				НС.Порядок = Элем.Значение + 1;
				НС.ЧислоСтрок = пСтрукДанныеВТ.ЧислоЗаписей;
				
				СтрукВременныеТаблицы.Вставить(ИмяЗапроса, ТабДанныеВТ);
			КонецЦикла;
			
			
			_ТабВременныеТаблицы.Сортировать("Порядок");
			СтрукРезультат.ВремяЗагрузкиВТ = ТекущаяДата() - ДатаНач;
			
			Попытка
				_АдресХранилищаВременныхТаблиц = ПоместитьВоВременноеХранилище(СтрукВременныеТаблицы, "");
			Исключение
				вСообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
	Исключение
		вСообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Запрос.МенеджерВременныхТаблиц.Закрыть();
		СтрукРезультат.Отказ = истина;
		Возврат СтрукРезультат;
	КонецПопытки;
	
	Если ЭтоВыгрузкаДЗ Тогда
		Элементы.СтрРезультатЗапроса.Заголовок = "Результат запроса ( " + ТабРезультат.Строки.Количество() + " )";
	Иначе
		Элементы.СтрРезультатЗапроса.Заголовок = "Результат запроса ( " + ТабРезультат.Количество() + " )";
	КонецЕсли;
	
	Если не ЭтоВыгрузкаДЗ Тогда
		вСформироватьДляЗаданныхКолонокGUID(ТабРезультат, _ВсеСсылочныеТипы, _ИспользоватьВерхнийРегистрДляGUID);
	КонецЕсли;
	
	вУдалитьКолонкиСНеподдерживаемымиТипам(ТабРезультат, ложь, _ЭтоТолстыйКлиент);
	
	ТипХЗ = Тип("ХранилищеЗначения");
	ТипТЗ = Тип("ТаблицаЗначений");
	ТипТТ = Тип("Тип");
	ТипМВ = Тип("МоментВремени");
	
	пТипЧисло = Тип("Число");
	
	Попытка
		ИмяРеквизитаРезультатов = ?(ЭтоВыгрузкаДЗ, "_ДеревоРезультатыЗапроса", "_ТабРезультатыЗапроса");
		
		_ОписаниеВременнойТаблицы.Очистить();
		_ОписаниеТаблицыРезультата.Очистить();
		
		Для каждого Колонка из ТабРезультат.Колонки Цикл
			_ОписаниеТаблицыРезультата.Вставить(Колонка.Имя, Колонка.ТипЗначения);
			
			Если Колонка.ТипЗначения.СодержитТип(ТипХЗ) Тогда
				ТипЗначенияРеквизита = новый ОписаниеТипов;
			ИначеЕсли Колонка.ТипЗначения.СодержитТип(ТипТЗ) Тогда
				ТипЗначенияРеквизита = новый ОписаниеТипов;
			ИначеЕсли Колонка.ТипЗначения.СодержитТип(ТипТТ) Тогда
				ТипЗначенияРеквизита = новый ОписаниеТипов;
			ИначеЕсли Колонка.ТипЗначения.СодержитТип(ТипМВ) Тогда
				ТипЗначенияРеквизита = новый ОписаниеТипов;
			Иначе
				ТипЗначенияРеквизита = Колонка.ТипЗначения;
			КонецЕсли;
			РеквизитыКДобавлению.Добавить(новый РеквизитФормы(Колонка.Имя, ТипЗначенияРеквизита, ИмяРеквизитаРезультатов, Колонка.Заголовок, ложь));
		КонецЦикла;
		
		ИзменитьРеквизиты(РеквизитыКДобавлению,РеквизитыКУдалению);
		ЗначениеВРеквизитФормы(ТабРезультат, ИмяРеквизитаРезультатов);
		
		Если не ЭтоВыгрузкаДЗ Тогда
			Элементы._ТабРезультатыЗапроса.Подвал = _ПоказыватьИтогиПоЧисловымКолонкам;
		КонецЕсли;
		
		Для каждого Колонка из ТабРезультат.Колонки Цикл
			Элем = ЭтаФорма.Элементы.Добавить(ИмяРеквизитаРезультатов + "_" + Колонка.Имя,Тип("ПолеФормы"),ЭтаФорма.Элементы[ИмяРеквизитаРезультатов]);
			Элем.ПутьКДанным=ИмяРеквизитаРезультатов+"."+Колонка.Имя;
			Элем.Вид=ВидПоляФормы.ПолеВвода;
			Элем.ДоступныеТипы=Колонка.ТипЗначения;
			Если не ЭтоВыгрузкаДЗ и _ПоказыватьИтогиПоЧисловымКолонкам Тогда
				Если Колонка.ТипЗначения.СодержитТип(пТипЧисло) Тогда
					Элем.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Право;
					Элем.ЦветТекстаПодвала = ЦветаСтиля.ЦветФонаВыделенияПоля;
					Если _ИспользоватьЖирныйШрифтДляИтогов Тогда
						Элем.ШрифтПодвала = новый Шрифт(Элем.Шрифт,,,истина);
					КонецЕсли;
					Элем.ТекстПодвала = Строка(ТабРезультат.Итог(Колонка.Имя));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Исключение
		вСообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Запрос.МенеджерВременныхТаблиц.Закрыть();
		СтрукРезультат.Отказ = истина;
		Возврат СтрукРезультат;
	КонецПопытки;
	
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	Возврат СтрукРезультат;
КонецФункции

&НаСервереБезКонтекста
Функция вРазобратьПакетЗапросов(Знач Запрос)
	СтрукРезультат = новый Структура;
	СтрукРезультат.Вставить("Таблицы", новый Соответствие);
	СтрукРезультат.Вставить("Запросы", новый Соответствие);
	
	Если Запрос = Неопределено Тогда
		Запрос = новый Запрос;
	КонецЕсли;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	
	ИменаВТ = новый Соответствие;
	
	Для каждого Элем из Запрос.МенеджерВременныхТаблиц.Таблицы Цикл
		ИменаВТ.Вставить(Элем.ПолноеИмя, 1);
	КонецЦикла;
	
	
	СоотвЗапросы = новый Соответствие;
	ИндКон = СхемаЗапроса.ПакетЗапросов.Количество()-1;
	СчетчикА = 0;
	
	Для каждого Элем из СхемаЗапроса.ПакетЗапросов Цикл
		Инд = СхемаЗапроса.ПакетЗапросов.Индекс(Элем);
		
		Если ТипЗнч(Элем) = Тип("ЗапросВыбораСхемыЗапроса") Тогда
			Если Инд = ИндКон и ПустаяСтрока(Элем.ТаблицаДляПомещения) Тогда
				Прервать;
			КонецЕсли;
			
			Если ИменаВТ[Элем.ТаблицаДляПомещения] = Неопределено Тогда
				Пока истина Цикл
					СчетчикА = СчетчикА + 1;
					ИмяЗапроса = "___" + СчетчикА + "___";
					Если ИменаВТ[ИмяЗапроса] = Неопределено Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				СоотвЗапросы[ИмяЗапроса] = Инд;
			Иначе
				СоотвЗапросы[Элем.ТаблицаДляПомещения] = Инд;
			КонецЕсли;
		ИначеЕсли ТипЗнч(Элем) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
			СоотвЗапросы[Элем.ИмяТаблицы] = -1;
		КонецЕсли;
	КонецЦикла;
	
	СтрукРезультат.Таблицы = ИменаВТ;
	СтрукРезультат.Запросы = СоотвЗапросы;
	
	Возврат СтрукРезультат;
КонецФункции

&НаСервереБезКонтекста
Функция вПолучитьРазмерыВременныхТаблиц(Знач пМВТ)
	пСтрук = новый Структура;
	пРезультат = новый Структура("ВсегоЗаписей, Таблицы", 0, пСтрук);
	
	Если пМВТ = Неопределено Тогда
		Возврат пРезультат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = пМВТ;
	
	пЗапросы = новый Массив;
	
	пШаблонЗапроса =
	"ВЫБРАТЬ
	|	""%1"" КАК Имя,
	|	КОЛИЧЕСТВО(*) КАК ЧислоЗаписей
	|ИЗ
	|	%1 КАК т
	|";
	
	пТекстЗапроса = "";
	
	Для каждого пТаб из пМВТ.Таблицы Цикл
		пЗапросы.Добавить(СтрЗаменить(пШаблонЗапроса, "%1", пТаб.ПолноеИмя));
	КонецЦикла;
	
	Запрос.Текст = СтрСоединить(пЗапросы, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		пСтрук.Вставить(Выборка.Имя, Выборка.ЧислоЗаписей);
		пРезультат.ВсегоЗаписей = пРезультат.ВсегоЗаписей + Выборка.ЧислоЗаписей;
	КонецЦикла;
	
	Запрос.МенеджерВременныхТаблиц = Неопределено;
	
	Возврат пРезультат;
КонецФункции

&НаСервереБезКонтекста
Функция вПолучитьДанныеВременнойТаблицы(Знач пМВТ, Знач пИмяТаблицы, Знач пЧислоЗаписей = -1)
	пРезультат = новый Структура("ЧислоЗаписей, Таблица", 0, новый ТаблицаЗначений);
	
	Если пМВТ = Неопределено Тогда
		Возврат пРезультат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = пМВТ;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК ЧислоЗаписей
	|ИЗ
	|	" + пИмяТаблицы + " КАК т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ " + ?(пЧислоЗаписей < 0, "", " ПЕРВЫЕ " + Формат(пЧислоЗаписей, "ЧН=0; ЧГ=0")) + "
	|	т.*
	|ИЗ
	|	" + пИмяТаблицы + " КАК т";
	
	
	пМассив = Запрос.ВыполнитьПакет();
	
	пРезультат.ЧислоЗаписей = пМассив[0].Выгрузить()[0].ЧислоЗаписей;
	пРезультат.Таблица = пМассив[1].Выгрузить();
	
	Запрос.МенеджерВременныхТаблиц = Неопределено;
	
	Возврат пРезультат;
КонецФункции

&НаКлиенте
Процедура _СоставРезультатовПриИзменении(Элемент)
	вУстановитьВидимостьРаздела_ВременныеТаблицы();
КонецПроцедуры

&НаКлиенте
Процедура вУстановитьВидимостьРаздела_ВременныеТаблицы()
	Если _СоставРезультатов = 0 Тогда
		Элементы.СтрВременныеТаблицы.Видимость = ложь;
	Иначе
		Элементы.СтрВременныеТаблицы.Видимость = истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура вСформироватьЗапросИзСтрокиXML(Знач СтрокаXML, Знач ИдентификаторЗапроса)
	Перем СжиматьПараметрыXML;
	СжиматьПараметрыXML = ложь;
	
	Попытка
		ТекДанные = _ДеревоЗапросов.НайтиПоИдентификатору(ИдентификаторЗапроса);
		
		Если ТекДанные <> Неопределено Тогда
			СтрукЗапрос = вЗначениеИзСтрокиXML(СтрокаXML);
			
			СтрукЗапрос.Свойство("СжиматьПараметрыXML", СжиматьПараметрыXML);
			СжиматьПараметрыXML = (СжиматьПараметрыXML = истина);
			
			ТекДанные.Текст = "";
			ТекДанные.Параметры.Очистить();
			ТекДанные.МВТ.Очистить();
			
			ТекДанные.Текст = СтрукЗапрос.Текст;
			
			пСтрукМВТ = Неопределено;
			Если СтрукЗапрос.Свойство("МВТ", пСтрукМВТ) Тогда
				Для каждого Элем из пСтрукМВТ Цикл
					Если ТипЗнч(Элем.Значение) = Тип("ХранилищеЗначения") Тогда
						пЗначение = Элем.Значение.Получить();
					Иначе
						пЗначение = Элем.Значение;
					КонецЕсли;
					
					Если ТипЗнч(пЗначение) = Тип("ТаблицаЗначений") Тогда
						НС = ТекДанные.МВТ.Добавить();
						НС.Имя = Элем.Ключ;
						НС.СпецЗначение = ЗначениеВСтрокуВнутр(пЗначение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			// ВАЖНО: алгоритм формирования параметров должен быть идентичен (метка:001)
			ПараметрыЗапроса = СтрукЗапрос.Параметры;
			Для каждого Элем из ПараметрыЗапроса Цикл
				Если ТипЗнч(Элем.Значение) = Тип("ХранилищеЗначения") Тогда
					ЗначениеПараметра = Элем.Значение.Получить();
				Иначе
					ЗначениеПараметра = Элем.Значение;
				КонецЕсли;
				
				СтрукПараметр = новый Структура;
				СтрукПараметр.Вставить("Имя", Элем.Ключ);
				СтрукПараметр.Вставить("Значение", ЗначениеПараметра);
				СтрукПараметр.Вставить("ЭтоСпецЗначение", ложь);
				СтрукПараметр.Вставить("СпецЗначение", "");
				СтрукПараметр.Вставить("ТипЗначения", "");
				
				Если ТипЗнч(ЗначениеПараметра) = Тип("Массив") Тогда
					Список = новый СписокЗначений;
					Список.ЗагрузитьЗначения(ЗначениеПараметра);
					СтрукПараметр.Значение = Список;
					
				ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("ФиксированныйМассив") Тогда
					Список = новый СписокЗначений;
					Список.ЗагрузитьЗначения(новый Массив(ЗначениеПараметра));
					СтрукПараметр.Значение = Список;
					
				ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("Граница") Тогда
					СтрукПараметр.ЭтоСпецЗначение = истина;
					СтрукПараметр.Значение = "Граница";
					СтрукПараметр.ТипЗначения = "Граница";
					СтрукПараметр.СпецЗначение = ЗначениеВСтрокуВнутр(ЗначениеПараметра);
					СтрукПараметр.Значение = Строка(ЗначениеПараметра.Значение) + ";" + Строка(ЗначениеПараметра.ВидГраницы);
					
				ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("ТаблицаЗначений") Тогда
					СтрукПараметр.ЭтоСпецЗначение = истина;
					СтрукПараметр.Значение = "ТаблицаЗначений";
					СтрукПараметр.ТипЗначения = "ТаблицаЗначений";
					СтрукПараметр.СпецЗначение = ЗначениеВСтрокуВнутр(ЗначениеПараметра);
					
				ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("МоментВремени") Тогда
					СтрукПараметр.ЭтоСпецЗначение = истина;
					СтрукПараметр.Значение = "МоментВремени";
					СтрукПараметр.ТипЗначения = "МоментВремени";
					СтрукПараметр.СпецЗначение = ЗначениеВСтрокуВнутр(ЗначениеПараметра);
					СтрукПараметр.Значение = Строка(ЗначениеПараметра);
					
				ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("УникальныйИдентификатор") Тогда
					СтрукПараметр.ЭтоСпецЗначение = истина;
					СтрукПараметр.Значение = Строка(ЗначениеПараметра);
					СтрукПараметр.ТипЗначения = "УникальныйИдентификатор";
					СтрукПараметр.СпецЗначение = ЗначениеВСтрокуВнутр(ЗначениеПараметра);
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ТекДанные.Параметры.Добавить(), СтрукПараметр);
			КонецЦикла;
		КонецЕсли;
	Исключение
		вСообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры


#КонецОбласти


#КонецОбласти


#Область РезультатыЗапросов

&НаКлиенте
Функция вПолучитьИмяТаблицыДляОбработки()
	ИмяРеквизита = "";
	
	Если Элементы.ГруппаРезультаты.ТекущаяСтраница = Элементы.СтрРезультатЗапроса Тогда
		ИмяРеквизита = "_ТабРезультатыЗапроса";
	ИначеЕсли Элементы.ГруппаРезультаты.ТекущаяСтраница = Элементы.СтрВременныеТаблицы Тогда
		ИмяРеквизита = "_ВременнаяТаблицаДанные";
	КонецЕсли;
	
	Возврат ИмяРеквизита;
КонецФункции

&НаКлиенте
Процедура вПриАктивизацииСтрокиСпискаВТ() Экспорт
	вПоказатьВременныуюТаблицу(мТекСтрокаСпискаВТ);
КонецПроцедуры

&НаКлиенте
Процедура _ТабВременныеТаблицыПриАктивизацииСтроки(Элемент)
	ТекСтрока = Элемент.ТекущаяСтрока;
	Если ТекСтрока <> мТекСтрокаСпискаВТ Тогда
		мТекСтрокаСпискаВТ = ТекСтрока;
		ПодключитьОбработчикОжидания("вПриАктивизацииСтрокиСпискаВТ", 0.1, истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ТабРезультатыЗапросаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = ложь;
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ИмяКолонки = Сред(Поле.Имя, СтрДлина(Элемент.Имя) + 2);
		Значение = ТекДанные[ИмяКолонки];
		
		Если ТипЗнч(Значение) = мТипХЗ Тогда
			вПоказатьЗначениеХЗ(Значение);
		Иначе
			ПоказатьЗначение(, Значение);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ВременнаяТаблицаДанныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = ложь;
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ИмяКолонки = Сред(Поле.Имя, СтрДлина(Элемент.Имя) + 2);
		ПоказатьЗначение(, ТекДанные[ИмяКолонки]);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ПоместитьТаблицуВПараметрЗапроса(Команда)
	Если вСЗапросомРаботатьНельзя() Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = вПолучитьИмяТаблицыДляОбработки();
	Если ИмяРеквизита = "" Тогда
		Возврат;
	КонецЕсли;
	
	вПоместитьТаблицуВПараметрЗапроса(ИмяРеквизита);
	
	вСохранитьДанныеЗапроса("Параметры");
	вЗапросыИзменены(истина);
КонецПроцедуры

&НаКлиенте
Процедура _СохранитьТаблицуВФайл(Команда)
	ИмяРеквизита = вПолучитьИмяТаблицыДляОбработки();
	Если ИмяРеквизита = "" Тогда
		Возврат;
	КонецЕсли;
	
	Диалог = вПолучитьДиалогВыбораФайлаДанных(ложь);
	Диалог.Показать(новый ОписаниеОповещения("вСохранитьТаблицуВФайл", ЭтаФорма, ИмяРеквизита));
КонецПроцедуры

&НаКлиенте
Процедура вСохранитьТаблицуВФайл(ВыбранныеФайлы, ДопПараметры = Неопределено) Экспорт
	Если ВыбранныеФайлы <> Неопределено Тогда
		
		Попытка
			Струк = новый Структура;
			Струк.Вставить("Формат", мИмяОбработки);
			Струк.Вставить("Версия", 1);
			Струк.Вставить("Назначение", "ТаблицаЗначений");
			Струк.Вставить("Данные", вПреобразоватьРеквизитФормыВСтрокуВнутр(ДопПараметры));
			
			СтрокаДанных = вЗначениеВСтрокуВнутр(Струк);
			
			ТДок = новый ТекстовыйДокумент;
			ТДок.УстановитьТекст(СтрокаДанных);
			
			Если _СинхронныеВызовыЗапрещены Тогда
				ТДок.НачатьЗапись(, ВыбранныеФайлы[0]);
			Иначе
				ТДок.Записать(ВыбранныеФайлы[0]);
			КонецЕсли;
		Исключение
			вСообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ЗагрузитьТаблицуИзФайла(Команда)
	ИмяРеквизита = вПолучитьИмяТаблицыДляОбработки();
	Если ИмяРеквизита = "" Тогда
		Возврат;
	КонецЕсли;
	
	Диалог = вПолучитьДиалогВыбораФайлаДанных(истина);
	Диалог.Показать(новый ОписаниеОповещения("вЗагрузитьТаблицуИзФайла", ЭтаФорма, ИмяРеквизита));
КонецПроцедуры

&НаКлиенте
Процедура вЗагрузитьТаблицуИзФайла(ВыбранныеФайлы, ДопПараметры = Неопределено) Экспорт
	Если ВыбранныеФайлы <> Неопределено Тогда
		Попытка
			ТДок = новый ТекстовыйДокумент;
			
			СтрукДалее = новый Структура("ТДок", ТДок);
			
			Если _СинхронныеВызовыЗапрещены Тогда
				ТДок.НачатьЧтение(новый ОписаниеОповещения("вЗагрузитьТаблицуИзФайлаДалее", ЭтаФорма, ТДок), ВыбранныеФайлы[0]);
			Иначе
				ТДок.Прочитать(ВыбранныеФайлы[0]);
				вЗагрузитьТаблицуИзФайлаДалее(ТДок);
			КонецЕсли;
		Исключение
			вСообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вЗагрузитьТаблицуИзФайлаДалее(ТДок) Экспорт
	Попытка
		СтрокаДанных = ТДок.ПолучитьТекст();
		
		Попытка
			Струк = вЗначениеИзСтрокиВнутр(СтрокаДанных);
		Исключение
			вСообщитьОбОшибке("Неверный формат файла данных!");
			Возврат;
		КонецПопытки;
		
		Если не вПроверитьДанныеПередЗагрузкойТаблицы(Струк) Тогда
			Возврат;
		КонецЕсли;
		
		вЗагрузитьДанныеВТаблицуРезультатов(Струк.Данные);
	Исключение
		вСообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Функция вПроверитьДанныеПередЗагрузкойТаблицы(Струк)
	Текст = "Неверный формат файла данных!";
	СтрукЗаголовок = новый Структура("Формат, Версия, Назначение, Данные");
	
	Если ТипЗнч(Струк) <> Тип("Структура") Тогда
		Возврат вСообщитьОбОшибке(Текст);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрукЗаголовок, Струк);
	
	Если СтрукЗаголовок.Формат <> мИмяОбработки или СтрукЗаголовок.Данные = Неопределено Тогда
		Возврат вСообщитьОбОшибке(Текст);
	КонецЕсли;
	
	Если СтрукЗаголовок.Назначение <> "ТаблицаЗначений" Тогда
		Возврат вСообщитьОбОшибке("Файл не предназначен для загрузки таблицы!");
	КонецЕсли;
	
	Возврат истина;
КонецФункции

&НаСервере
Процедура вЗагрузитьДанныеВТаблицуРезультатов(Знач ДанныеСтрокой)
	Попытка
		ТабДанныеДляЗагрузки = ЗначениеИзСтрокиВнутр(ДанныеСтрокой);
	Исключение
		вСообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	Если ТипЗнч(ТабДанныеДляЗагрузки) <> Тип("ТаблицаЗначений") Тогда
		вСообщитьОбОшибке("Неверные данные для загрузки!");
		Возврат;
	КонецЕсли;
	
	РеквизитыКДобавлению = новый Массив;
	РеквизитыКУдалению = новый Массив;
	
	ТабРезультат = РеквизитФормыВЗначение("_ТабРезультатыЗапроса");
	ТабРезультат.Очистить();
	Для каждого Колонка из ТабРезультат.Колонки Цикл
		РеквизитыКУдалению.Добавить("_ТабРезультатыЗапроса." + Колонка.Имя);
		Элем = Элементы.Найти("_ТабРезультатыЗапроса_" + Колонка.Имя);
		Если Элем <> Неопределено Тогда
			Элементы.Удалить(Элем);
		КонецЕсли;
	КонецЦикла;
	
	ТабРезультат = ТабДанныеДляЗагрузки;
	
	_ОписаниеТаблицыРезультата.Очистить();
	
	Попытка
		Для каждого Колонка из ТабРезультат.Колонки Цикл
			_ОписаниеТаблицыРезультата.Вставить(Колонка.Имя, Колонка.ТипЗначения);
			РеквизитыКДобавлению.Добавить(новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, "_ТабРезультатыЗапроса", Колонка.Заголовок, ложь));
		КонецЦикла;
		
		ИзменитьРеквизиты(РеквизитыКДобавлению,РеквизитыКУдалению);
		ЗначениеВРеквизитФормы(ТабРезультат, "_ТабРезультатыЗапроса");
		
		Для каждого Колонка из ТабРезультат.Колонки Цикл
			Элем = ЭтаФорма.Элементы.Добавить("_ТабРезультатыЗапроса_" + Колонка.Имя,Тип("ПолеФормы"),ЭтаФорма.Элементы._ТабРезультатыЗапроса);
			Элем.ПутьКДанным="_ТабРезультатыЗапроса."+Колонка.Имя;
			Элем.Вид=ВидПоляФормы.ПолеВвода;
			Элем.ДоступныеТипы=Колонка.ТипЗначения;
		КонецЦикла;
	Исключение
		вСообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура вПоказатьВременныуюТаблицу(Знач ТекСтрока)
	РеквизитыКДобавлению = новый Массив;
	РеквизитыКУдалению = новый Массив;
	
	ТабРезультат = РеквизитФормыВЗначение("_ВременнаяТаблицаДанные");
	ТабРезультат.Очистить();
	Для каждого Колонка из ТабРезультат.Колонки Цикл
		РеквизитыКУдалению.Добавить("_ВременнаяТаблицаДанные." + Колонка.Имя);
		Элем = Элементы.Найти("_ВременнаяТаблицаДанные_" + Колонка.Имя);
		Если Элем <> Неопределено Тогда
			Элементы.Удалить(Элем);
		КонецЕсли;
	КонецЦикла;
	
	ТабРезультат = новый ТаблицаЗначений;
	
	ТекДанные = ?(ТекСтрока = Неопределено, Неопределено, _ТабВременныеТаблицы.НайтиПоИдентификатору(ТекСтрока));
	Если ТекДанные <> Неопределено Тогда
		Если не ПустаяСтрока(_АдресХранилищаВременныхТаблиц) Тогда
			Попытка
				СтрукВТ = ПолучитьИзВременногоХранилища(_АдресХранилищаВременныхТаблиц);
				Если СтрукВТ.Свойство(ТекДанные.Имя) Тогда
					ТабРезультат = СтрукВТ[ТекДанные.Имя];
				КонецЕсли;
			Исключение
				вСообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		ТипТТ = Тип("Тип");
		ТипМВ = Тип("МоментВремени");
		
		пТипЧисло = Тип("Число");
		
		_ОписаниеВременнойТаблицы.Очистить();
		
		Для каждого Колонка из ТабРезультат.Колонки Цикл
			_ОписаниеВременнойТаблицы.Вставить(Колонка.Имя, Колонка.ТипЗначения);
			
			Если Колонка.ТипЗначения.СодержитТип(ТипТТ) Тогда
				ТипЗначенияРеквизита = новый ОписаниеТипов;
			ИначеЕсли Колонка.ТипЗначения.СодержитТип(ТипМВ) Тогда
				ТипЗначенияРеквизита = новый ОписаниеТипов;
			Иначе
				ТипЗначенияРеквизита = Колонка.ТипЗначения;
			КонецЕсли;
			РеквизитыКДобавлению.Добавить(новый РеквизитФормы(Колонка.Имя, ТипЗначенияРеквизита, "_ВременнаяТаблицаДанные", Колонка.Заголовок, ложь));
		КонецЦикла;
		
		ИзменитьРеквизиты(РеквизитыКДобавлению,РеквизитыКУдалению);
		ЗначениеВРеквизитФормы(ТабРезультат, "_ВременнаяТаблицаДанные");
		
		Элементы._ВременнаяТаблицаДанные.Подвал = _ПоказыватьИтогиПоЧисловымКолонкамДляВТ;
		
		Для каждого Колонка из ТабРезультат.Колонки Цикл
			Элем = ЭтаФорма.Элементы.Добавить("_ВременнаяТаблицаДанные_" + Колонка.Имя,Тип("ПолеФормы"),ЭтаФорма.Элементы._ВременнаяТаблицаДанные);
			Элем.ПутьКДанным="_ВременнаяТаблицаДанные."+Колонка.Имя;
			Элем.Вид=ВидПоляФормы.ПолеВвода;
			Элем.ДоступныеТипы=Колонка.ТипЗначения;
			Если _ПоказыватьИтогиПоЧисловымКолонкамДляВТ и Колонка.ТипЗначения.СодержитТип(пТипЧисло) Тогда
				Элем.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Право;
				Элем.ЦветТекстаПодвала = ЦветаСтиля.ЦветФонаВыделенияПоля;
				Если _ИспользоватьЖирныйШрифтДляИтогов Тогда
					Элем.ШрифтПодвала = новый Шрифт(Элем.Шрифт,,,истина);
				КонецЕсли;
				Элем.ТекстПодвала = Строка(ТабРезультат.Итог(Колонка.Имя));
			КонецЕсли;
		КонецЦикла;
	Исключение
		вСообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

&НаСервереБезКонтекста
Функция вТипизироватьКолонкиТаблицыЗначений(пТаблицаЗначений, пОписаниеТаблицы)
	
	пПустоеОписаниеТипов = новый ОписаниеТипов;
	пТипNULL = Тип("NULL");
	
	Инд = пТаблицаЗначений.Колонки.Количество();
	
	Пока Инд > 0 Цикл
		Инд = Инд - 1;
		пКолонка = пТаблицаЗначений.Колонки[Инд];
		
		Если пКолонка.ТипЗначения = пПустоеОписаниеТипов Тогда
			пИмяКолонки = пКолонка.Имя;
			Если не пОписаниеТаблицы.Свойство(пИмяКолонки) Тогда
				// описание не соответствует таблице (такого не должно быть)
				пСоотв = новый Соответствие;
				
				Для каждого Стр из пТаблицаЗначений Цикл
					пТип = ТипЗнч(Стр[пИмяКолонки]);
					пСоотв[пТип] = 1;
				КонецЦикла;
				
				пМассивТипов = новый Массив;
				пМассивТипов.Добавить(пТипNULL);
				
				Для каждого Элем из пСоотв Цикл
					пМассивТипов.Добавить(Элем.Ключ);
				КонецЦикла;
				
				пОписаниеТаблицы.Вставить(пИмяКолонки, новый ОписаниеТипов(пМассивТипов));
			КонецЕсли;
			
			пМассив = пТаблицаЗначений.ВыгрузитьКолонку(пИмяКолонки);
			пТаблицаЗначений.Колонки.Удалить(пИмяКолонки);
			пТаблицаЗначений.Колонки.Добавить(пИмяКолонки, пОписаниеТаблицы[пИмяКолонки]);
			пТаблицаЗначений.ЗагрузитьКолонку(пМассив, пИмяКолонки);
		КонецЕсли;
	КонецЦикла;
	
	Возврат истина;
КонецФункции

&НаСервере
Процедура вПоместитьТаблицуВПараметрЗапроса(Знач ИмяРеквизита)
	ТабРезультат = РеквизитФормыВЗначение(ИмяРеквизита);
	
	пОписаниеТаблицы = вПолучитьОписаниеТаблицы(ИмяРеквизита);
	вТипизироватьКолонкиТаблицыЗначений(ТабРезультат, пОписаниеТаблицы);
	
	НС = _ПараметрыЗапроса.Добавить();
	НС.ЭтоСпецЗначение = истина;
	НС.Имя = "ТабДанные";
	НС.Значение = "ТаблицаЗначений";
	НС.ТипЗначения = "ТаблицаЗначений";
	НС.СпецЗначение = ЗначениеВСтрокуВнутр(ТабРезультат);
КонецПроцедуры

&НаКлиенте
Процедура _ДеревоРезультатыЗапросаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = ложь;
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ИмяКолонки = Сред(Поле.Имя, СтрДлина(Элемент.Имя) + 2);
		Значение = ТекДанные[ИмяКолонки];
		
		Если ТипЗнч(Значение) = мТипХЗ Тогда
			вПоказатьЗначениеХЗ(Значение);
		Иначе
			ПоказатьЗначение(, Значение);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область РаботаСАлгоритмами

&НаКлиенте
Функция вКореньДереваАлгоритмов()
	Возврат _ДеревоАлгоритмов.ПолучитьЭлементы()[0];
КонецФункции

&НаКлиенте
Функция вТекущийАлгоритмКорневой()
	Возврат (Элементы._ДеревоАлгоритмов.ТекущиеДанные = вКореньДереваАлгоритмов());
КонецФункции

&НаКлиенте
Функция вСАлгоритмомРаботатьНельзя(пПоказатьПредупреждение = истина)
	пРезультат = Элементы.Алгоритм.ТолькоПросмотр;
	
	Если пРезультат и пПоказатьПредупреждение Тогда
		пТекст = "Корень дерева алгоритмов редактировать нельзя!
		|Перейдите на другой узел в дереве или добавьте новый.
		|(используйте контекстное меню)";
		
		вПоказатьПредупреждение(пТекст);
	КонецЕсли;
	
	Возврат пРезультат;
КонецФункции


#Область ВыполнениеАлгоритмов

&НаСервереБезКонтекста
Функция вВыполнитьАлгоритмНаСервереХХХ(П, Алгоритм)
	Выполнить(Алгоритм);
	Возврат истина;
КонецФункции

&НаКлиенте
Функция вПреобразоватьАлгоритмСУчетомВызоваСервера(Алгоритм)
	Результат = новый Структура("Клиент, Сервер", "", "");
	
	СерверНач = "//--- Сервер:старт";
	СерверКон = "//--- Сервер:финиш";
	
	Если Найти(Алгоритм, СерверНач) = 0 или Найти(Алгоритм, СерверКон) = 0 Тогда
		Результат.Клиент = Алгоритм;
		Возврат Результат;
	КонецЕсли;
	
	ЭтоСервернаяЧасть = ложь;
	ТекстКлиент = "";
	ТекстСервер = "";
	
	Текст = новый ТекстовыйДокумент;
	Текст.УстановитьТекст(Алгоритм);
	
	Для Сч = 1 по Текст.КоличествоСтрок() Цикл
		Стр = Текст.ПолучитьСтроку(Сч);
		Если ЭтоСервернаяЧасть Тогда
			Если Найти(Стр, СерверКон) = 0 Тогда
				ТекстСервер = ТекстСервер + Символы.ПС + Стр;
			Иначе
				ЭтоСервернаяЧасть = ложь;
			КонецЕсли;
		Иначе
			Если Найти(Стр, СерверНач) = 0 Тогда
				ТекстКлиент = ТекстКлиент + Символы.ПС + Стр;
			Иначе
				Если не ПустаяСтрока(ТекстСервер) Тогда
					Сообщить("В тексте алгоритма допускается только одна серверная часть!");
					Возврат Неопределено;
				КонецЕсли;
				
				ЭтоСервернаяЧасть = истина;
				ТекстКлиент = ТекстКлиент + Символы.ПС + "вВыполнитьАлгоритмНаСервереХХХ(П, __АлгоритмНаСервере);";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Результат.Клиент = ТекстКлиент;
	Результат.Сервер = ТекстСервер;
	
	Возврат Результат;
КонецФункции

&НаСервере
Процедура вВыполнитьАлгоритмНаСервере(Знач Выражение, Знач ТолькоСинтаксическийКонтроль = ложь)
	ТабРезультат = _ТабРезультатыЗапроса;
	
	Если _ИспользоватьПопыткуДляАлгоритма Тогда
		Попытка
			Выполнить(Выражение);
			Если ТолькоСинтаксическийКонтроль Тогда
				Сообщить("Проверка пройдена");
			КонецЕсли;
		Исключение
			вСообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	Иначе
		Выполнить(Выражение);
		Если ТолькоСинтаксическийКонтроль Тогда
			Сообщить("Проверка пройдена");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вВыполнитьАлгоритмНаКлиенте(Знач Выражение, Знач ТолькоСинтаксическийКонтроль = ложь)
	Перем П;
	Перем __АлгоритмНаСервере;
	
	П = новый Структура("Результат", истина);
	__АлгоритмНаСервере = "";
	
	ТабРезультат = _ТабРезультатыЗапроса;
	
	СтрукАлгоритм = вПреобразоватьАлгоритмСУчетомВызоваСервера(Выражение);
	Если СтрукАлгоритм = Неопределено или ПустаяСтрока(СтрукАлгоритм.Клиент) Тогда
		Возврат;
	КонецЕсли;
	
	__АлгоритмНаСервере = СтрукАлгоритм.Сервер;
	
	Если _ИспользоватьПопыткуДляАлгоритма Тогда
		Попытка
			Выполнить(СтрукАлгоритм.Клиент);
			Если ТолькоСинтаксическийКонтроль Тогда
				Сообщить("Проверка пройдена");
			КонецЕсли;
		Исключение
			вСообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	Иначе
		Выполнить(СтрукАлгоритм.Клиент);
		Если ТолькоСинтаксическийКонтроль Тогда
			Сообщить("Проверка пройдена");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вВыполнитьАлгоритм(ТолькоСинтаксическийКонтроль = ложь)
	Выражение = Элементы.Алгоритм.ВыделенныйТекст;
	Если ПустаяСтрока(Выражение) Тогда
		ТекДанные = Элементы._ДеревоАлгоритмов.ТекущиеДанные;
		Выражение = ?(ТекДанные = Неопределено, "", СокрЛП(ТекДанные.Алгоритм));
	КонецЕсли;
	
	Если не ПустаяСтрока(Выражение) Тогда
		Если ТолькоСинтаксическийКонтроль Тогда
			Выражение = "Если ложь Тогда
			|" + Выражение + "
			|КонецЕсли;";
		КонецЕсли;
		
		Если _ВыполнятьАлгоритмНаСервере Тогда
			вВыполнитьАлгоритмНаСервере(Выражение, ТолькоСинтаксическийКонтроль);
		Иначе
			вВыполнитьАлгоритмНаКлиенте(Выражение, ТолькоСинтаксическийКонтроль);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ВыполнитьАлгоритм(Команда)
	Если вСАлгоритмомРаботатьНельзя() Тогда
		Возврат;
	КонецЕсли;
	
	вВыполнитьАлгоритм(ложь);
КонецПроцедуры

&НаКлиенте
Процедура _ПроверитьАлгоритм(Команда)
	Если вСАлгоритмомРаботатьНельзя() Тогда
		Возврат;
	КонецЕсли;
	
	вВыполнитьАлгоритм(истина);
КонецПроцедуры

&НаКлиенте
Процедура _ПараметрыАлгоритма(Команда)
	Если вСАлгоритмомРаботатьНельзя() Тогда
		Возврат;
	КонецЕсли;
	
	Струк = вСформироватьСтруктуруПараметровАлгоритма();
	
	СписокЗначений = новый СписокЗначений;
	СписокЗначений.Добавить("ТабРезультат");
	СписокЗначений.Добавить("");
	Для каждого Элем из Струк Цикл
		СписокЗначений.Добавить(Элем.Ключ);
	КонецЦикла;
	
	СписокЗначений.ПоказатьВыборЭлемента(новый ОписаниеОповещения("вОбработатьВыборПараметраАлгоритма", ЭтаФорма), "Параметр алгоритма");
КонецПроцедуры

&НаКлиенте
Процедура вОбработатьВыборПараметраАлгоритма(ВыбранныйЭлемент, ДопПараметры = Неопределено) Экспорт
	Если ВыбранныйЭлемент <> Неопределено Тогда
		Элементы.Алгоритм.ВыделенныйТекст = ВыбранныйЭлемент.Значение;
		вАлгоритмыИзменены(истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ПримерАлгоритмаКлиент(Команда)
	Если вСАлгоритмомРаботатьНельзя() Тогда
		Возврат;
	КонецЕсли;
	
	ТекстПримера =
	"
	|НомерСтроки = 0;
	|ВсегоСтрок = ТабРезультат.Количество();
	|
	|П = новый Структура(""Результат, Ссылка"", истина);
	|Для каждого Стр из ТабРезультат Цикл
	|	ОбработкаПрерыванияПользователя();
	|
	|	НомерСтроки = НомерСтроки + 1;
	|	
	|	Если НомерСтроки % 100 = 0 Тогда
	|		Состояние(""Обработано "" + НомерСтроки + "" из "" + ВсегоСтрок, 100 * НомерСтроки / ВсегоСтрок);
	|	КонецЕсли;
	|
	|	Если Стр.Обработано Тогда
	|		Продолжить;
	|	КонецЕсли;
	|
	|	ЗаполнитьЗначенияСвойств(П, Стр);
	|	П.Результат = истина;
	|
	|	//--- Сервер:старт
	|	Данные = П.Ссылка.ПолучитьОбъект();
	|	Данные.ОбменДанными.Загрузка = истина;
	|	//Данные.Номер = Данные.Номер;
	|
	|	Попытка
	|		//Данные.Записать();
	|		П.Результат = истина;
	|	Исключение
	|		Сообщить(ОписаниеОшибки());
	|		П.Результат = ложь;
	|	КонецПопытки;
	|	//--- Сервер:финиш
	|	
	|	Если П.Результат <> истина Тогда
	|		Прервать;
	|	КонецЕсли;
	|
	|	Стр.Обработано = истина;
	|КонецЦикла;
	|";
	
	Элементы.Алгоритм.ВыделенныйТекст = ТекстПримера;
	_ВыполнятьАлгоритмНаСервере = ложь;
	
	вАлгоритмыИзменены(истина);
КонецПроцедуры

&НаКлиенте
Процедура _ПримерАлгоритмаСервер(Команда)
	Если вСАлгоритмомРаботатьНельзя() Тогда
		Возврат;
	КонецЕсли;
	
	ТекстПримера =
	"
	|Для каждого Стр из ТабРезультат Цикл
	|	Данные = Стр.Ссылка.ПолучитьОбъект();
	|	Данные.ОбменДанными.Загрузка = истина;
	|	Данные.Наименование = СокрЛП(Данные.Наименование);
	|	Попытка
	|		Данные.Записать();
	|	Исключение
	|		Сообщить(ОписаниеОшибки());
	|		Прервать;
	|	КонецПопытки;
	|КонецЦикла;
	|";
	
	Элементы.Алгоритм.ВыделенныйТекст = ТекстПримера;
	_ВыполнятьАлгоритмНаСервере = истина;
	
	вАлгоритмыИзменены(истина);
КонецПроцедуры

&НаКлиенте
Процедура _ОткрытьКонструкторФорматнойСтроки(Команда)
	пТекст = Элементы.Алгоритм.ВыделенныйТекст;
	пКонструкторФорматнойСтроки = новый КонструкторФорматнойСтроки(пТекст);
	
	пОписаниеОповещения = новый ОписаниеОповещения("вОбработатьВыборФорматнойСтроки", ЭтаФорма);
	пКонструкторФорматнойСтроки.Показать(пОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура вОбработатьВыборФорматнойСтроки(пТекст, пДопПарам = Неопределено) Экспорт
	Если пТекст <> Неопределено Тогда
		Элементы.Алгоритм.ВыделенныйТекст = пТекст;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ВставитьУникальныйИдентификатор(Команда)
	Элементы.Алгоритм.ВыделенныйТекст = Строка(новый УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура _ПрописныеБуквы(Команда)
	Элементы.Алгоритм.ВыделенныйТекст = ВРег(Элементы.Алгоритм.ВыделенныйТекст);
КонецПроцедуры

&НаКлиенте
Процедура _СтрочныеБуквы(Команда)
	Элементы.Алгоритм.ВыделенныйТекст = НРег(Элементы.Алгоритм.ВыделенныйТекст);
КонецПроцедуры

#КонецОбласти


#Область СохранениеЗагрузка

&НаКлиенте
Функция вПроверитьДанныеПередЗагрузкойАлгоритмов(Струк)
	Текст = "Неверный формат файла алгоритмов!";
	СтрукЗаголовок = новый Структура("Формат, Версия, Назначение, Элементы");
	
	Если ТипЗнч(Струк) <> Тип("Структура") Тогда
		Возврат вСообщитьОбОшибке(Текст);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрукЗаголовок, Струк);
	
	Если СтрукЗаголовок.Формат <> мИмяОбработки или СтрукЗаголовок.Элементы = Неопределено Тогда
		Возврат вСообщитьОбОшибке(Текст);
	КонецЕсли;
	
	Если СтрукЗаголовок.Назначение <> "Алгоритмы" Тогда
		Возврат вСообщитьОбОшибке("Файл не предназначен для загрузки алгоритмов!");
	КонецЕсли;
	
	Возврат истина;
КонецФункции

&НаКлиенте
Процедура вПреобразоватьЦепочкуАлгоритмовВСтруктуру(ЭтоПервыйВызов = истина, Результат, Знач СтрокиДЗ, Массив = Неопределено)
	Если ЭтоПервыйВызов Тогда
		Результат = новый Структура;
		Результат.Вставить("Формат", мИмяОбработки);
		Результат.Вставить("Версия", 1);
		Результат.Вставить("Назначение", "Алгоритмы");
		Результат.Вставить("Элементы", новый Массив);
	КонецЕсли;
	
	Для каждого СтрДЗ из СтрокиДЗ Цикл
		Струк = новый Структура("Имя, Алгоритм, Параметры, Комментарий");
		ЗаполнитьЗначенияСвойств(Струк, СтрДЗ);
		Струк.Вставить("Дети", новый Массив);
		вПреобразоватьЦепочкуАлгоритмовВСтруктуру(ложь, Результат, СтрДЗ.ПолучитьЭлементы(), Струк.Дети);
		
		Если ЭтоПервыйВызов Тогда
			Результат.Элементы.Добавить(Струк);
		Иначе
			Массив.Добавить(Струк);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура вЗагрузитьЦепочкуАлгоритмовИзМассива(Знач УзелДЗ, Массив)
	Для каждого Струк из Массив Цикл
		СтрДЗ = УзелДЗ.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрДЗ, Струк);
		Если Струк.Дети.Количество() > 0 Тогда
			вЗагрузитьЦепочкуАлгоритмовИзМассива(СтрДЗ, Струк.Дети);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция вПолучитьДиалогВыбораФайлаАлгоритмов(Открытие = истина, ПутьКФайлу = "")
	пСтрук = вРазобратьПутьКФайлу(ПутьКФайлу);
	
	Диалог = Новый ДиалогВыбораФайла(?(Открытие, РежимДиалогаВыбораФайла.Открытие, РежимДиалогаВыбораФайла.Сохранение));
	Диалог.Каталог = пСтрук.Каталог;
	Диалог.ПолноеИмяФайла = пСтрук.Имя;
	Диалог.Заголовок  = "Файл алгоритмов";
	Диалог.Фильтр     = "Файлы алгоритмов (*.dat)|*.dat|Все файлы (*.*)|*.*";
	Диалог.Расширение = "dat";
	
	Возврат Диалог;
КонецФункции

&НаКлиенте
Процедура вСохранитьАлгоритмыВФайл(ВыбранныеФайлы, ДопПараметры = Неопределено) Экспорт
	Если ВыбранныеФайлы <> Неопределено Тогда
		
		Если ДопПараметры = Неопределено Тогда
			_ПутьКФайлуАлгоритмов = ВыбранныеФайлы[0];
			СтрокиДЗ = вКореньДереваАлгоритмов().ПолучитьЭлементы();
		Иначе
			СтрокиДЗ = вСоздатьМассив(ДопПараметры);
		КонецЕсли;
		
		вСохранитьПараметрыАлгоритма(Элементы._ДеревоАлгоритмов.ТекущиеДанные);
		
		Попытка
			Струк = новый Структура;
			вПреобразоватьЦепочкуАлгоритмовВСтруктуру(истина, Струк, СтрокиДЗ);
			СтрокаДанных = вЗначениеВСтрокуВнутр(Струк);
			
			ТДок = новый ТекстовыйДокумент;
			ТДок.УстановитьТекст(СтрокаДанных);
			
			Если _СинхронныеВызовыЗапрещены Тогда
				ТДок.НачатьЗапись(новый ОписаниеОповещения("вСохранитьАлгоритмыВФайлДалее", ЭтаФорма), ВыбранныеФайлы[0]);
				Возврат;
			Иначе
				ТДок.Записать(ВыбранныеФайлы[0]);
			КонецЕсли;
			
			вАлгоритмыИзменены(ложь);
		Исключение
			вСообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вСохранитьАлгоритмыВФайлДалее(Результат, ДопПараметры = Неопределено) Экспорт
	Если Результат = истина Тогда
		вАлгоритмыИзменены(ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вЗагрузитьАлгоритмыИзФайла(ВыбранныеФайлы, ДопПараметры = Неопределено) Экспорт
	Если ВыбранныеФайлы <> Неопределено Тогда
		СтрукДалее = новый Структура("ТДок, УзелДЗ, ПутьКФайлуАлгоритмов");
		
		Если ДопПараметры = Неопределено Тогда
			_ПутьКФайлуАлгоритмов = "";
			вОчиститьДеревоАлгоритмов();
			УзелДЗ = вКореньДереваАлгоритмов();
			СтрукДалее.ПутьКФайлуАлгоритмов = ВыбранныеФайлы[0];
		Иначе
			УзелДЗ = ДопПараметры;
		КонецЕсли;
		
		СтрукДалее.УзелДЗ = УзелДЗ;
		
		Попытка
			ТДок = новый ТекстовыйДокумент;
			
			СтрукДалее.ТДок = ТДок;
			
			Если _СинхронныеВызовыЗапрещены Тогда
				ТДок.НачатьЧтение(новый ОписаниеОповещения("вЗагрузитьАлгоритмыИзФайлаДалее", ЭтаФорма, СтрукДалее), ВыбранныеФайлы[0]);
			Иначе
				ТДок.Прочитать(ВыбранныеФайлы[0]);
				вЗагрузитьАлгоритмыИзФайлаДалее(СтрукДалее);
			КонецЕсли;
		Исключение
			вСообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вЗагрузитьАлгоритмыИзФайлаДалее(ДопПараметры) Экспорт
	ТДок = ДопПараметры.ТДок;
	УзелДЗ = ДопПараметры.УзелДЗ;
	
	Попытка
		СтрокаДанных = ТДок.ПолучитьТекст();
		
		Попытка
			Струк = вЗначениеИзСтрокиВнутр(СтрокаДанных);
		Исключение
			вСообщитьОбОшибке("Неверный формат файла алгоритмов!");
			Возврат;
		КонецПопытки;
		
		Если не вПроверитьДанныеПередЗагрузкойАлгоритмов(Струк) Тогда
			Возврат;
		КонецЕсли;
		
		вЗагрузитьЦепочкуАлгоритмовИзМассива(УзелДЗ, Струк.Элементы);
		Элементы._ДеревоАлгоритмов.Развернуть(УзелДЗ.ПолучитьИдентификатор(), ложь);
	Исключение
		вСообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Если ДопПараметры.ПутьКФайлуАлгоритмов <> Неопределено Тогда
		_ПутьКФайлуАлгоритмов = ДопПараметры.ПутьКФайлуАлгоритмов;
	Иначе
		вАлгоритмыИзменены(истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вОчиститьДеревоАлгоритмов()
	_ДеревоАлгоритмов.ПолучитьЭлементы().Очистить();
	
	НС = _ДеревоАлгоритмов.ПолучитьЭлементы().Добавить();
	НС.Имя = "Алгоритмы";
	НС.Алгоритм = "// КОРНЕВОЙ АЛГОРИТМ НЕ ИСПОЛЬЗУЕТСЯ //";
	НС.Параметры = новый Структура;
	
	вАлгоритмыИзменены(ложь);
КонецПроцедуры

&НаКлиенте
Процедура _ОчиститьДеревоАлгоритмов(Команда)
	Если вАлгоритмыИзменены() Тогда
		вПоказатьВопрос("вОчиститьДеревоАлгоритмовОтвет", "Дерево алгоритмов будет очищено! Продолжить?");
	Иначе
		вОчиститьДеревоАлгоритмовОтвет(КодВозвратаДиалога.Да);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вОчиститьДеревоАлгоритмовОтвет(пОтвет, пДопПарам = Неопределено) Экспорт
	Если пОтвет = КодВозвратаДиалога.Да Тогда
		_ПутьКФайлуАлгоритмов = "";
		вОчиститьДеревоАлгоритмов();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ЗагрузитьФайлАлгоритмов(Команда)
	Диалог = вПолучитьДиалогВыбораФайлаАлгоритмов(истина, _ПутьКФайлуАлгоритмов);
	Диалог.Показать(новый ОписаниеОповещения("вЗагрузитьАлгоритмыИзФайла", ЭтаФорма));
КонецПроцедуры

&НаКлиенте
Процедура _СохранитьФайлАлгоритмов(Команда)
	Если не ЗначениеЗаполнено(_ПутьКФайлуАлгоритмов) Тогда
		Диалог = вПолучитьДиалогВыбораФайлаАлгоритмов(ложь);
		Диалог.Показать(новый ОписаниеОповещения("вСохранитьАлгоритмыВФайл", ЭтаФорма));
	Иначе
		Массив = новый Массив;
		Массив.Добавить(_ПутьКФайлуАлгоритмов);
		вСохранитьАлгоритмыВФайл(Массив, Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _СохранитьФайлАлгоритмовКак(Команда)
		Диалог = вПолучитьДиалогВыбораФайлаАлгоритмов(ложь, _ПутьКФайлуАлгоритмов);
		Диалог.Показать(новый ОписаниеОповещения("вСохранитьАлгоритмыВФайл", ЭтаФорма));
КонецПроцедуры

&НаКлиенте
Процедура _СохранитьАлгоритмВФайл(Команда)
	ТекДанные = Элементы._ДеревоАлгоритмов.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Диалог = вПолучитьДиалогВыбораФайлаАлгоритмов(ложь);
		Диалог.Показать(новый ОписаниеОповещения("вСохранитьАлгоритмыВФайл", ЭтаФорма, ТекДанные));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ПодгрузитьАлгоритмИзФайла(Команда)
	ТекДанные = Элементы._ДеревоАлгоритмов.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Диалог = вПолучитьДиалогВыбораФайлаАлгоритмов(истина);
		Диалог.Показать(новый ОписаниеОповещения("вЗагрузитьАлгоритмыИзФайла", ЭтаФорма, ТекДанные));
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытий

&НаКлиенте
Процедура вУстановитьДоступностьРедактированияАлгоритма(ТолькоПросмотр)
	Элементы._ДеревоАлгоритмовИмя.ТолькоПросмотр = ТолькоПросмотр;
	Элементы.Алгоритм.ТолькоПросмотр = ТолькоПросмотр;
	Элементы.ОписаниеАлгоритма.ТолькоПросмотр = ТолькоПросмотр;
	Элементы.СтрПараметрыАлгоритма.ТолькоПросмотр = ТолькоПросмотр;
КонецПроцедуры

&НаКлиенте
Функция вСформироватьСтруктуруПараметровАлгоритма()
	Струк = новый Структура("мБизнесПроцесс, мДата, мДатаВремя, мДокумент, мЗадача, мПеречисление, мПланВидовРасчета, мПланВидовХарактеристик, мПланОбмена, мПланСчетов, мСписокЗначений, мСправочник, мЧисло");
	Возврат Струк;
КонецФункции

&НаКлиенте
Функция вСкопироватьСтруктуруПараметровАлгоритма(СтрукИсточник)
	Результат = новый Структура;
	
	Если СтрукИсточник <> Неопределено Тогда
		Для каждого Элем из СтрукИсточник Цикл
			Если Элем.Ключ = "мСписокЗначений" Тогда
				Результат.Вставить(Элем.Ключ, Элем.Значение.Скопировать());
			Иначе
				Результат.Вставить(Элем.Ключ, Элем.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура вСохранитьПараметрыАлгоритма(СтрДЗ)
	Если СтрДЗ <> Неопределено Тогда
		СтрДЗ.Параметры = новый Структура;
		Для каждого Элем из вСформироватьСтруктуруПараметровАлгоритма() Цикл
			Значение = ЭтаФорма[Элем.Ключ];
			Если ЗначениеЗаполнено(Значение) Тогда
				СтрДЗ.Параметры.Вставить(Элем.Ключ, Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вВосстановитьПараметрыАлгоритма(СтрДЗ)
	Если СтрДЗ <> Неопределено Тогда
		Если СтрДЗ.Параметры = Неопределено Тогда
			СтрДЗ.Параметры = новый Структура;
		КонецЕсли;
		
		пСтрукОсобые = новый Структура(вПереченьОсобыхРеквизитов());
		
		Струк = вСформироватьСтруктуруПараметровАлгоритма();
		ЗаполнитьЗначенияСвойств(Струк, СтрДЗ.Параметры);
		
		Для каждого Элем из Струк Цикл
			пЗначение = Элем.Значение;
			Если не пСтрукОсобые.Свойство(Элем.Ключ) Тогда
				ЭтаФорма[Элем.Ключ] = Элем.Значение;
			ИначеЕсли пЗначение <> Неопределено Тогда
				пМассив = новый Массив;
				пМассив.Добавить(ТипЗнч(пЗначение));
				
				пОписаниеТипов = новый ОписаниеТипов(пМассив);
				
				Элементы[Элем.Ключ].ОграничениеТипа = пОписаниеТипов;
				ЭтаФорма[Элем.Ключ] = пОписаниеТипов.ПривестиЗначение(пЗначение);
			ИНаче
				Элементы[Элем.Ключ].ОграничениеТипа =новый ОписаниеТипов;
				ЭтаФорма[Элем.Ключ] = Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вСкопироватьСтрокуДереваАлгоритмов(Приемник, Источник)
	ЗаполнитьЗначенияСвойств(Приемник, Источник,, "Параметры");
	Приемник.Параметры = вСкопироватьСтруктуруПараметровАлгоритма(Источник.Параметры);
	
	ДочерниеЭлементыИсточника = Источник.ПолучитьЭлементы();
	ДочерниеЭлементыПриемника = Приемник.ПолучитьЭлементы();
	Для каждого СтрДЗ из ДочерниеЭлементыИсточника Цикл;
		НС = ДочерниеЭлементыПриемника.Добавить();
		вСкопироватьСтрокуДереваАлгоритмов(НС, СтрДЗ);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура вПереподчинитьАлгоритм(СтрДЗ, НоваяСемья)
	вСкопироватьСтрокуДереваАлгоритмов(НоваяСемья.Добавить(), СтрДЗ);
КонецПроцедуры


&НаКлиенте
Процедура АлгоритмПриИзменении(Элемент)
	вАлгоритмыИзменены(истина);
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеАлгоритмаПриИзменении(Элемент)
	вАлгоритмыИзменены(истина);
КонецПроцедуры

&НаКлиенте
Процедура _ДеревоАлгоритмовПриИзменении(Элемент)
	вАлгоритмыИзменены(истина);
КонецПроцедуры

&НаКлиенте
Процедура _ДеревоАлгоритмовПередУдалением(Элемент, Отказ)
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено и ТекДанные.ПолучитьРодителя() = Неопределено Тогда
		вПоказатьПредупреждение("Нельзя удалить корневой элемент дерева!");
		Отказ = истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ДеревоАлгоритмовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда
		мИсточникКопирования = -1;
		ТекДанные = Элемент.ТекущиеДанные;
		Если ТекДанные <> Неопределено и ТекДанные.ПолучитьРодителя() = Неопределено Тогда
			вПоказатьПредупреждение("Нельзя скопировать корневой элемент дерева!");
			Отказ = истина;
		Иначе
			мИсточникКопирования = ТекДанные.ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ДеревоАлгоритмовПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("вПриАктивизацииСтрокиДереваАлгоритмо", 0.1, истина);
КонецПроцедуры

&НаКлиенте
Процедура вПриАктивизацииСтрокиДереваАлгоритмо() Экспорт
	Если мТекСтрокаДереваАлгоритмов <> -1 Тогда
		ТекДанные = _ДеревоАлгоритмов.НайтиПоИдентификатору(мТекСтрокаДереваАлгоритмов);
		Если ТекДанные <> Неопределено Тогда
			вСохранитьПараметрыАлгоритма(ТекДанные);
		КонецЕсли;
	КонецЕсли;
	
	мТекСтрокаДереваАлгоритмов = -1;
	
	ТекДанные = Элементы._ДеревоАлгоритмов.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		мТекСтрокаДереваАлгоритмов = ТекДанные.ПолучитьИдентификатор();
		вВосстановитьПараметрыАлгоритма(ТекДанные);
		вУстановитьДоступностьРедактированияАлгоритма(ТекДанные = вКореньДереваАлгоритмов());
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура _ДеревоАлгоритмовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Копирование Тогда
		ВсеОК = ложь;
		
		Если мИсточникКопирования <> -1 Тогда
			ДанныеИсточник = _ДеревоАлгоритмов.НайтиПоИдентификатору(мИсточникКопирования);
			Если ДанныеИсточник <> Неопределено Тогда
				вСкопироватьСтрокуДереваАлгоритмов(ТекДанные, ДанныеИсточник);
				вВосстановитьПараметрыАлгоритма(ТекДанные);
				ВсеОК = истина;
			КонецЕсли;
		КонецЕсли;
		
		Если не ВсеОК Тогда
			// сюда попадать не должны!!!
			ТекДанные.Параметры = вСкопироватьСтруктуруПараметровАлгоритма(ТекДанные.Параметры);
			вВосстановитьПараметрыАлгоритма(ТекДанные);
		КонецЕсли;
		
	ИначеЕсли НоваяСтрока Тогда
		ТекДанные.Параметры = новый Структура;
	Иначе
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ДеревоАлгоритмовНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	мИсточникПеретаскивания = "Алгоритмы";
	мСтрокаПеретаскивания = Элемент.ТекущиеДанные;
	ПараметрыПеретаскивания.Значение = "";
КонецПроцедуры

&НаКлиенте
Процедура _ДеревоАлгоритмовПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = ложь;
	Если мИсточникПеретаскивания <> "Алгоритмы" Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ДеревоАлгоритмовПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = ложь;
	
	Если мИсточникПеретаскивания = "Алгоритмы" и Строка <> Неопределено и мСтрокаПеретаскивания <> Неопределено Тогда
		НовыйРодитель = _ДеревоАлгоритмов.НайтиПоИдентификатору(Строка);
		Если НовыйРодитель = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Потомок = мСтрокаПеретаскивания;
		ПрежнийРодитель = Потомок.ПолучитьРодителя();
		Если ПрежнийРодитель <> Неопределено и Строка <> ПрежнийРодитель.ПолучитьИдентификатор() Тогда
			Если не вПотомокПроисходитОтПредка(Потомок, НовыйРодитель) Тогда
				вПереподчинитьАлгоритм(Потомок, НовыйРодитель.ПолучитьЭлементы());
				ПрежняяСемья = ПрежнийРодитель.ПолучитьЭлементы();
				ПрежняяСемья.Удалить(ПрежняяСемья.Индекс(Потомок));
				вАлгоритмыИзменены(истина);
			Иначе
				вПоказатьПредупреждение("Зацикливание подчиненности - переподчинение невозможно!");
			КонецЕсли;
		КонецЕсли;
		мСтрокаПеретаскивания = Неопределено;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область ОткрытиеОбъектовВСпецФорма

&НаКлиенте
Процедура _ОткрытьОбъект(Команда)
	Значение = Неопределено;
	
	ТекЭлемент = ЭтаФорма.ТекущийЭлемент;
	Если ТипЗнч(ТекЭлемент) = Тип("ТаблицаФормы") и (ТекЭлемент = Элементы._ТабРезультатыЗапроса или ТекЭлемент = Элементы._ВременнаяТаблицаДанные или ТекЭлемент = Элементы._ДеревоРезультатыЗапроса) Тогда
		ТекДанные = ТекЭлемент.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			ТекПоле = ТекЭлемент.ТекущийЭлемент;
			ИмяКолонки = Сред(ТекПоле.Имя, СтрДлина(ТекЭлемент.Имя) + 2);
			Значение = ТекДанные[ИмяКолонки];
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Значение) Тогда
		Если ТипЗнч(Значение) = мТипХЗ Тогда
			вПоказатьЗначениеХЗ(Значение);
		ИначеЕсли вЭтоОбъектМетаданных(ТипЗнч(Значение)) Тогда
			СтрукПарам = новый Структура("мОбъектСсылка, АдресаХранилищ", Значение, _АдресаХранилищ);
			ОткрытьФорму(_ПутьКФормам + "ФормаОбъекта", СтрукПарам, ,Значение);
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вПоказатьЗначениеХЗ(Значение)
	СтрукПарам = новый Структура;
	СтрукПарам.Вставить("ДанныеХЗ", Значение);
	ОткрытьФорму(_ПутьКФормам + "ФормаОтображенияХЗ", СтрукПарам, ,ТекущаяДата());
КонецПроцедуры

&НаСервереБезКонтекста
Функция вЭтоОбъектМетаданных(Знач Тип)
	ОбъектМД = Метаданные.НайтиПоТипу(Тип);
	Возврат ( ОбъектМД <> Неопределено и не Метаданные.Перечисления.Содержит(ОбъектМД) );
КонецФункции

#КонецОбласти


#Область НеИспользуются

&НаСервере
Процедура вСохранитьНастройки()
	Попытка
		СтрукНастройки = новый Структура;
		СтрукНастройки.Вставить("Версия", 3);
		СтрукНастройки.Вставить("_ПутьКФайлуЗапросов", _ПутьКФайлуЗапросов);
		СтрукНастройки.Вставить("_ПутьКФайлуАлгоритмов", _ПутьКФайлуАлгоритмов);
		СтрукНастройки.Вставить("_ЗадаватьВопросПриЗакрытии", _ЗадаватьВопросПриЗакрытии);
		СтрукНастройки.Вставить("_ИспользоватьВерхнийРегистрДляGUID", _ИспользоватьВерхнийРегистрДляGUID);
		
		ХранилищеОбщихНастроек.Сохранить(вПолучитьИмяОбработки(),,СтрукНастройки);
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура вЗагрузитьНастройки()
	СтрукНастройкиПоУмолчанию = новый Структура;
	СтрукНастройкиПоУмолчанию.Вставить("_ПутьКФайлуЗапросов", "");
	СтрукНастройкиПоУмолчанию.Вставить("_ПутьКФайлуАлгоритмов", "");
	СтрукНастройкиПоУмолчанию.Вставить("_ЗадаватьВопросПриЗакрытии", ложь);
	СтрукНастройкиПоУмолчанию.Вставить("_ИспользоватьВерхнийРегистрДляGUID", ложь);
	
	СтрукНастройки = ХранилищеОбщихНастроек.Загрузить(вПолучитьИмяОбработки());
	Если ТипЗнч(СтрукНастройки) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(СтрукНастройкиПоУмолчанию, СтрукНастройки);
		Попытка
			ЗаполнитьЗначенияСвойств(ЭтаФорма, СтрукНастройкиПоУмолчанию);
		Исключение
			Возврат;
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ВыгрузкаЗагрузкаXML

&НаКлиенте
Процедура _ВыгрузитьДанныеXML(Команда)
	Если не Элементы._ТабРезультатыЗапроса.Видимость или _ТабРезультатыЗапроса.Количество() = 0 Тогда
		вПоказатьПредупреждение("Нет данных для выгрузки (пустой результат запроса)!");
		Возврат;
	КонецЕсли;
	
	пСтрук = новый Структура("_ПутьКФормам", _ПутьКФормам);
	ОткрытьФорму(_ПутьКФормам + "ФормаВыгрузкаXML", пСтрук,,,,,новый ОписаниеОповещения("вОбработатьКомандуДанныеXML", ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура _ЗагрузитьДанныеXML(Команда)
	пСтрук = новый Структура("_ПутьКФормам", _ПутьКФормам);
	ОткрытьФорму(_ПутьКФормам + "ФормаЗагрузкаXML", пСтрук,,,,,новый ОписаниеОповещения("вОбработатьКомандуДанныеXML", ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура вОбработатьКомандуДанныеXML(РезультатЗакрытия = Неопределено, ДопПарам = Неопределено) Экспорт
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		пПутьКФайлуXML = РезультатЗакрытия.ПутьКФайлуXML;
		
		Если РезультатЗакрытия.Режим = "Выгрузка" Тогда
			СтрокаXML = вСформироватьВыгрузкуXML(РезультатЗакрытия);
			Если не ПустаяСтрока(СтрокаXML) Тогда
				ТДок = новый ТекстовыйДокумент;
				ТДок.УстановитьТекст(СтрокаXML);
				
				Если РезультатЗакрытия.ВыгружатьДанныеБезИспользованияФайла Тогда
					ТДок.Показать("ДанныеXML");
				Иначе
					ТДок.НачатьЗапись(новый ОписаниеОповещения("вПослеОкончанияЗаписиФайлаXML", ЭтаФорма), пПутьКФайлуXML, "UTF-8");
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли РезультатЗакрытия.Режим = "Загрузка" Тогда
			Если РезультатЗакрытия.ЗагружатьДанныеБезИспользованияФайла Тогда
				СтрокаXML = РезультатЗакрытия.ДанныеXML;
				Если не ПустаяСтрока(СтрокаXML) Тогда
					РезультатЗакрытия.ДанныеXML = "";
					вЗагрузитьДанныеXML(РезультатЗакрытия, СтрокаXML);
				КонецЕсли;
				
				Возврат;
			КонецЕсли;
			
			ТДок = новый ТекстовыйДокумент;
			
			пСтрук = новый Структура;
			пСтрук.Вставить("Параметры", РезультатЗакрытия);
			пСтрук.Вставить("ТДок", ТДок);
			
			ТДок.НачатьЧтение(новый ОписаниеОповещения("вПослеОкончанияЧтенияФайла", ЭтаФорма, пСтрук), пПутьКФайлуXML, "UTF-8");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вПослеОкончанияЗаписиФайлаXML(Результат, ДопПарам = Неопределено) Экспорт
	Если Результат = истина Тогда
		вПоказатьПредупреждение("Данные выгружены в файл");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вПослеОкончанияЧтенияФайла(пСтрукПарам) Экспорт
	СтрокаXML = пСтрукПарам.ТДок.ПолучитьТекст();
	
	Если не ПустаяСтрока(СтрокаXML) Тогда
		вЗагрузитьДанныеXML(пСтрукПарам.Параметры, СтрокаXML);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция вСформироватьВыгрузкуXML(Знач пСтрукПараметры)
	
	пИмяКолонки = "Ссылка";
	Если пСтрукПараметры.ВыгружатьТекущуюКолонку Тогда
		пИмяКолонки = Элементы._ТабРезультатыЗапроса.ТекущийЭлемент.ПутьКДанным;
		пИмяКолонки = Сред(пИмяКолонки, СтрНайти(пИмяКолонки, ".")+1);
	КонецЕсли;
	
	ЭФ = Элементы.Найти("_ТабРезультатыЗапроса_" + пИмяКолонки);
	Если ЭФ = Неопределено Тогда
		вСообщитьОбОшибке(СтрШаблон("Не найдена колонка ""%1"" в результате запроса!", пИмяКолонки));
		Возврат "";
	КонецЕсли;
	
	пКэшОбъектов = новый Соответствие;
	
	пВыгружатьДвиженияДокументов = пСтрукПараметры.ВыгружатьДвиженияДокументов;
	пВыгружатьТолькоВыделенныеСтроки = пСтрукПараметры.ВыгружатьТолькоВыделенныеСтроки;
	
	Если пВыгружатьТолькоВыделенныеСтроки Тогда
		пКоллекция = Элементы._ТабРезультатыЗапроса.ВыделенныеСтроки;
	Иначе
		пКоллекция = _ТабРезультатыЗапроса;
	КонецЕсли;
	
	
	ЗаписьXML = новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("_1CV8DtUD", "http://www.1c.ru/V8/1CV8DtUD/");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("V8Exch", "http://www.1c.ru/V8/1CV8DtUD/");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("core", "http://v8.1c.ru/data");
	
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("v8", "http://v8.1c.ru/8.1/data/enterprise/current-config");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xs", "http://www.w3.org/2001/XMLSchema");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("V8Exch:Data");
	
	пСчетчик = 0;
	Для каждого Стр из пКоллекция Цикл
		Если пВыгружатьТолькоВыделенныеСтроки Тогда
			пЗначение = _ТабРезультатыЗапроса.НайтиПоИдентификатору(Стр)[пИмяКолонки];
		Иначе
			пЗначение = Стр[пИмяКолонки];
		КонецЕсли;
		
		Если ЗначениеЗаполнено(пЗначение)  и пКэшОбъектов[пЗначение] = Неопределено Тогда
			пОбъектМД = Метаданные.НайтиПоТипу(ТипЗнч(пЗначение));
			Если пОбъектМД <> Неопределено Тогда
				пКэшОбъектов[пЗначение] = 1;
				
				пОбъект = пЗначение.ПолучитьОбъект();
				Если пОбъект <> Неопределено Тогда
					СериализаторXDTO.ЗаписатьXML(ЗаписьXML, пОбъект, НазначениеТипаXML.Явное);
					пСчетчик = пСчетчик + 1;
					
					Если пВыгружатьДвиженияДокументов и Метаданные.Документы.Содержит(пОбъектМД) Тогда
						Для каждого Движение из пОбъект.Движения Цикл
							Движение.Прочитать();
							СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Движение);
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); // V8Exc:Data
	ЗаписьXML.ЗаписатьКонецЭлемента(); // V8Exc:_1CV8DtUD
	
	СтрокаXML = ЗаписьXML.Закрыть();
	
	Сообщить("Количество выгруженных объектов: " + Формат(пСчетчик, "ЧН=0"));
	
	Возврат СтрокаXML;
КонецФункции

&НаСервереБезКонтекста
Процедура вВыполнитьПроцедуруВКонтекстеОбъекта(пОбъект, пПроцедураПередЗаписью)
	Попытка
		Выполнить(пПроцедураПередЗаписью);
	Исключение
		Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), СтатусСообщения.Важное);
		ВызватьИсключение "Ошибка при выполнение процедуры перед записью!";
	КонецПопытки;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура вЗагрузитьДанныеXML(Знач пСтрукПараметры, Знач СтрокаXML)
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	
	Сообщить("Загрузка данных стартована");
	
	пОшибкаФормата = ложь;
	пСтрокаНеверныйФормат = НСтр("ru = 'Неверный формат файла выгрузки'");
	
	Попытка
		// проверка формата
		Если пОшибкаФормата
			или не ЧтениеXML.Прочитать()
			или ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента
			или ЧтениеXML.ЛокальноеИмя <> "_1CV8DtUD"
			или ЧтениеXML.URIПространстваИмен <> "http://www.1c.ru/V8/1CV8DtUD/" Тогда
			
			пОшибкаФормата = истина;
		КонецЕсли;
		
		Если пОшибкаФормата
			или не ЧтениеXML.Прочитать()
			или ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента
			или ЧтениеXML.ЛокальноеИмя <> "Data" Тогда
			
			пОшибкаФормата = истина;
		КонецЕсли;
		
		Если пОшибкаФормата или не ЧтениеXML.Прочитать() Тогда
			
			пОшибкаФормата = истина;
		КонецЕсли;
		
	Исключение
		пОшибкаФормата = истина;
	КонецПопытки;
	
	Если пОшибкаФормата Тогда
		Сообщить(пСтрокаНеверныйФормат, СтатусСообщения.Важное);
		ЧтениеXML.Закрыть();
		Возврат;
	КонецЕсли;
	
	// параметры загрузки
	пЗагружатьВТранзакции = пСтрукПараметры.ЗагружатьВТранзакции;
	пЗагружатьВРежимеОбменДанными = пСтрукПараметры.ЗагружатьВРежимеОбменДанными;
	пПродолжатьЗагрузкуПриОшибке = пСтрукПараметры.ПродолжатьЗагрузкуПриОшибке;
	пИспользоватьДополнительныеСвойстваПриЗаписи = пСтрукПараметры.ИспользоватьДополнительныеСвойстваПриЗаписи;
	пИспользоватьПроцедуруПередЗаписью = пСтрукПараметры.ИспользоватьПроцедуруПередЗаписью;
	пДополнительныеСвойства = пСтрукПараметры.ДополнительныеСвойства;
	пПроцедураПередЗаписью = пСтрукПараметры.ПроцедураПередЗаписью;
	
	пПродолжатьЗагрузкуПриОшибке = пПродолжатьЗагрузкуПриОшибке и не пЗагружатьВТранзакции;
	пИспользоватьДополнительныеСвойстваПриЗаписи = пИспользоватьДополнительныеСвойстваПриЗаписи и пДополнительныеСвойства.Количество() <> 0;
	пИспользоватьПроцедуруПередЗаписью = пИспользоватьПроцедуруПередЗаписью и не ПустаяСтрока(пПроцедураПередЗаписью);
	
	
	// чтение данных
	Если пЗагружатьВТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	пСчетчик = 0;
	Пока СериализаторXDTO.ВозможностьЧтенияXML(ЧтениеXML) Цикл
		Попытка
			пОбъект = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
			пОбъект.ОбменДанными.Загрузка = пЗагружатьВРежимеОбменДанными;
			
			Если пИспользоватьДополнительныеСвойстваПриЗаписи Тогда
				Для каждого Элем из пДополнительныеСвойства Цикл
					пОбъект.ДополнительныеСвойства.Вставить(Элем.Ключ, Элем.Значение);
				КонецЦикла;
			КонецЕсли;
			
			Если пИспользоватьПроцедуруПередЗаписью Тогда
				вВыполнитьПроцедуруВКонтекстеОбъекта(пОбъект, пПроцедураПередЗаписью);
			КонецЕсли;
			
			пОбъект.Записать();
			пСчетчик = пСчетчик + 1;
		Исключение
			вСообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			Если не пПродолжатьЗагрузкуПриОшибке Тогда
				пОшибкаФормата = истина;
				Прервать;
			КонецЕсли;
		КонецПопытки;
	КонецЦикла;
	
	Если пОшибкаФормата Тогда
		Если пЗагружатьВТранзакции Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ЧтениеXML.Закрыть();
		Сообщить("Загрузка данных прервана", СтатусСообщения.Важное);
		Возврат;
	Иначе
		Если пЗагружатьВТранзакции Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
	КонецЕсли;
	
	
	// проверка формата
	Если пОшибкаФормата
		или ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента
		или ЧтениеXML.ЛокальноеИмя <> "Data" Тогда
		
		пОшибкаФормата = истина;
	КонецЕсли;
	
	Если пОшибкаФормата
		или не ЧтениеXML.Прочитать()
		или ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента
		или ЧтениеXML.ЛокальноеИмя <> "_1CV8DtUD"
		или ЧтениеXML.URIПространстваИмен <> "http://www.1c.ru/V8/1CV8DtUD/" Тогда
		
		пОшибкаФормата = истина;
	КонецЕсли;
	
	Если пОшибкаФормата Тогда
		Сообщить(пСтрокаНеверныйФормат, СтатусСообщения.Важное);
		ЧтениеXML.Закрыть();
		Сообщить("Загрузка данных завершена");
		Возврат;
	КонецЕсли;
	
	ЧтениеXML.Закрыть();
	Сообщить("Загрузка данных завершена");
КонецПроцедуры

#КонецОбласти


&НаКлиенте
Процедура _ОткрытьОбщийМодуль(Команда)
	пТекстовыйДокумент = новый ТекстовыйДокумент;
	
	пТекстовыйДокумент.УстановитьТекст(_ПроцедураСохраненияЗапроса);
	пТекстовыйДокумент.Показать(_ОписаниеРазработки.Наименование + " (общий модуль)");
КонецПроцедуры

&НаКлиенте
Процедура _ОткрытьСправочнуюИнформацию(Команда)
	пТекстовыйДокумент = новый ТекстовыйДокумент;
	
	пТекстовыйДокумент.УстановитьТекст(_СправочнаяИнформация);
	пТекстовыйДокумент.Показать(_ОписаниеРазработки.Наименование + " (краткая справка)");
КонецПроцедуры



// НЕСТАНДАРТНАЯ ФОРМА ВЫБОРА ТИПА
&НаКлиентеНаСервереБезКонтекста
Функция вПереченьОсобыхРеквизитов()
	Возврат "мПланОбмена, мСправочник, мДокумент, мПеречисление, мПланВидовХарактеристик, мПланВидовРасчета, мПланСчетов, мБизнесПроцесс, мЗадача";
КонецФункции

&НаСервере
Процедура вПодключитьНестандартнуюФормуВыбораТипа()
	пСтрук = новый Структура(вПереченьОсобыхРеквизитов());
	Для каждого Элем из пСтрук Цикл
		Элементы[Элем.Ключ].УстановитьДействие("Очистка", "вПараметрОчистка");
		Элементы[Элем.Ключ].УстановитьДействие("НачалоВыбора", "вПараметрНачалоВыбора");
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура вПараметрОчистка(Элемент, СтандартнаяОбработка)
	Элемент.ОграничениеТипа = новый ОписаниеТипов();
КонецПроцедуры

&НаКлиенте
Процедура вПараметрНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	пЗначение = ЭтаФорма[Элемент.Имя];
	Если пЗначение = Неопределено и Элемент.ОграничениеТипа.Типы().Количество() = 0 Тогда
		СтандартнаяОбработка = ложь;
		
		пРазделМД = вСформироватьИмяРазделаМД(Элемент.Имя);
		Если не ПустаяСтрока(пРазделМД) Тогда
			мЭлементДляОбработки = Элемент;
			
			пСтрук = новый Структура("ЗакрыватьПриЗакрытииВладельца", истина);
			пСтрук.Вставить("РазделМД", пРазделМД);
			
			ОткрытьФорму(_ПутьКФормам + "ФормаВыбораТипаОбъекта", пСтрук, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	ЭФ = мЭлементДляОбработки;
	пИмя = Сред(ЭФ.Имя, 2) + "Ссылка." + ВыбранноеЗначение;
	
	пОписаниеТипов = новый ОписаниеТипов(пИмя);
	ЭФ.ОграничениеТипа = пОписаниеТипов;
	ЭтаФорма[Эф.Имя] = пОписаниеТипов.ПривестиЗначение();
КонецПроцедуры

&НаКлиенте
Функция вСформироватьИмяРазделаМД(Знач пИмяЭФ)
	Если пИмяЭФ = "мПланОбмена" Тогда
		пРазделМД = "ПланыОбмена";
	ИначеЕсли пИмяЭФ = "мСправочник" Тогда
		пРазделМД = "Справочники";
	ИначеЕсли пИмяЭФ = "мДокумент" Тогда
		пРазделМД = "Документы";
	ИначеЕсли пИмяЭФ = "мПеречисление" Тогда
		пРазделМД = "Перечисления";
	ИначеЕсли пИмяЭФ = "мПланВидовРасчета" Тогда
		пРазделМД = "ПланыВидовРасчета";
	ИначеЕсли пИмяЭФ = "мПланВидовХарактеристик" Тогда
		пРазделМД = "ПланыВидовХарактеристик";
	ИначеЕсли пИмяЭФ = "мПланСчетов" Тогда
		пРазделМД = "ПланыСчетов";
	ИначеЕсли пИмяЭФ = "мБизнесПроцесс" Тогда
		пРазделМД = "БизнесПроцессы";
	ИначеЕсли пИмяЭФ = "мЗадача" Тогда
		пРазделМД = "Задачи";
	Иначе
		пРазделМД = "";
	КонецЕсли;
	
	Возврат пРазделМД;
КонецФункции


// МВТ

&НаСервереБезКонтекста
Функция вСформироватьМенеджерВТ(пСтрукВТМ)
	Запрос = новый Запрос;
	Запрос.МенеджерВременныхТаблиц = новый МенеджерВременныхТаблиц;
	
	пТекстЗапроса = "";
	пМассивЗапрсов = новый Массив;
	пРазделитель = "
	|;
	|
	|";
	
	Для каждого Элем из пСтрукВТМ Цикл
		пМассивЗапрсов.Добавить(вСформироватьТекстЗапросаДляВТМ(Элем.Ключ, Элем.Значение));
		Запрос.УстановитьПараметр(Элем.Ключ, Элем.Значение);
	КонецЦикла;
	
	Если пМассивЗапрсов.Количество() <> 0 Тогда
		Запрос.Текст = СтрСоединить(пМассивЗапрсов, пРазделитель);
		Запрос.Выполнить();
	КонецЕсли;
	
	Возврат Запрос.МенеджерВременныхТаблиц;
КонецФункции

&НаСервереБезКонтекста
Функция вСформироватьТекстЗапросаДляВТМ(Знач пИмяТаблицы, Знач пТаблица)
	пТипМВ = Тип("МоментВремени");
	пТипТип = Тип("Тип");
	
	пМассивПолей = новый Массив;
	
	Для каждого Элем из пТаблица.Колонки Цикл
		Если Элем.ТипЗначения.СодержитТип(пТипТип) или Элем.ТипЗначения.СодержитТип(пТипМВ) Тогда
			Возврат вСформироватьТекстЗапросаДляОсобойВТМ(пИмяТаблицы, пТаблица);
		КонецЕсли;
		
		пМассивПолей.Добавить("	т." + Элем.Имя);
	КонецЦикла;
	
	пТекст = "ВЫБРАТЬ
	|" + СтрСоединить(пМассивПолей, "," + Символы.ПС) + "
	|ПОМЕСТИТЬ " + пИмяТаблицы + "
	|ИЗ
	|	&" + пИмяТаблицы + " КАК т";
	
	Возврат пТекст;
КонецФункции

&НаСервереБезКонтекста
Функция вСформироватьТекстЗапросаДляОсобойВТМ(Знач пИмяТаблицы, Знач пТаблица)
	пСпецИмя = "__BT60N1KXXBDJLO9W__";
	
	пТипМВ = Тип("МоментВремени");
	пТипТип = Тип("Тип");
	пТипNULL = Тип("NULL");
	
	пОписаниеТиповNULL = новый ОписаниеТипов("NULL");
	
	пДобавляемыТипы = новый Массив;
	пДобавляемыТипы.Добавить(пТипNULL);
	
	пВычитаемыеТипы = новый Массив;
	пВычитаемыеТипы.Добавить(пТипТип);
	
	пВычитаемыеТипыМВ = новый Массив;
	пВычитаемыеТипыМВ.Добавить(пТипМВ);
	
	пСтрукКолонки = новый Структура;
	
	Инд = пТаблица.Колонки.Количество();
	
	Пока Инд > 0 Цикл
		Инд = Инд - 1;
		Элем = пТаблица.Колонки[Инд];
		
		Если Элем.ТипЗначения.СодержитТип(пТипТип) Тогда
			пОписаниеТипов = новый ОписаниеТипов(Элем.ТипЗначения, пДобавляемыТипы, пВычитаемыеТипы);
			пЭтоПростаяКолонка = (пОписаниеТипов = пОписаниеТиповNULL);
			
			пИмяКолонкиТип = Элем.Имя + пСпецИмя + "Т";
			
			пМассивТипов = новый Массив;
			пМассивТипов.Добавить(пТипNULL);
			
			пМассивЗначений = новый Массив;
			
			Если пЭтоПростаяКолонка Тогда
				Для каждого Стр из пТаблица Цикл
					пТип = Стр[Элем.Имя];
					пМассивТипов.Добавить(пТип);
					пЗначение = вОписаниеТипов(пТип).ПривестиЗначение();
					пМассивЗначений.Добавить(пЗначение);
				КонецЦикла;
				
				пСтрукКолонки.Вставить(Элем.Имя, 1);
				
			Иначе
				пИмяКолонкиХХХ = Элем.Имя + пСпецИмя + "Х";
				
				пТаблица.Колонки.Добавить(пИмяКолонкиХХХ, пОписаниеТипов);
				
				Для каждого Стр из пТаблица Цикл
					пТип = Стр[Элем.Имя];
					Если ТипЗнч(пТип) = пТипТип Тогда
						пМассивТипов.Добавить(пТип);
						пЗначение = вОписаниеТипов(пТип).ПривестиЗначение();
						пМассивЗначений.Добавить(пЗначение);
						Стр[пИмяКолонкиХХХ] = NULL;
					Иначе
						пМассивЗначений.Добавить(NULL);
						Стр[пИмяКолонкиХХХ] = пТип;
					КонецЕсли;
				КонецЦикла;
				
				пСтрукКолонки.Вставить(Элем.Имя, 2);
				
			КонецЕсли;
			
			пТаблица.Колонки.Добавить(пИмяКолонкиТип, новый ОписаниеТипов(пМассивТипов));
			пТаблица.Колонки.Удалить(Элем.Имя);
			пТаблица.ЗагрузитьКолонку(пМассивЗначений, пИмяКолонкиТип);
			
		ИначеЕсли Элем.ТипЗначения.СодержитТип(пТипМВ) Тогда
			пОписаниеТипов = новый ОписаниеТипов(Элем.ТипЗначения, пДобавляемыТипы, пВычитаемыеТипыМВ);
			пЭтоПростаяКолонка = (пОписаниеТипов = пОписаниеТиповNULL);
			
			пИмяКолонкиТип = Элем.Имя + пСпецИмя + "Т";
			
			пМассивТипов = новый Массив;
			пМассивТипов.Добавить(пТипNULL);
			
			пМассивЗначений = новый Массив;
			
			Если пЭтоПростаяКолонка Тогда
				Для каждого Стр из пТаблица Цикл
					пЗначение = Стр[Элем.Имя].Ссылка;
					пТип = ТипЗнч(пЗначение);
					пМассивТипов.Добавить(пТип);
					пМассивЗначений.Добавить(пЗначение);
				КонецЦикла;
				
				пСтрукКолонки.Вставить(Элем.Имя, 3);
				
			Иначе
				пИмяКолонкиХХХ = Элем.Имя + пСпецИмя + "Х";
				
				пТаблица.Колонки.Добавить(пИмяКолонкиХХХ, пОписаниеТипов);
				
				Для каждого Стр из пТаблица Цикл
					пЗначение = Стр[Элем.Имя];
					пТип = ТипЗнч(пЗначение);
					Если пТип = пТипМВ Тогда
						пЗначение = пЗначение.Ссылка;
						пМассивТипов.Добавить(ТипЗнч(пЗначение));
						пМассивЗначений.Добавить(пЗначение);
						Стр[пИмяКолонкиХХХ] = NULL;
					Иначе
						пМассивЗначений.Добавить(NULL);
						Стр[пИмяКолонкиХХХ] = пЗначение;
					КонецЕсли;
				КонецЦикла;
				
				пСтрукКолонки.Вставить(Элем.Имя, 4);
				
			КонецЕсли;
			
			пТаблица.Колонки.Добавить(пИмяКолонкиТип, новый ОписаниеТипов(пМассивТипов));
			пТаблица.Колонки.Удалить(Элем.Имя);
			пТаблица.ЗагрузитьКолонку(пМассивЗначений, пИмяКолонкиТип);
			
		Иначе
			пСтрукКолонки.Вставить(Элем.Имя, 0);
		КонецЕсли;
	КонецЦикла;
	
	
	пМассивПолей = новый Массив;
	
	Для каждого Элем из пТаблица.Колонки Цикл
		пМассивПолей.Добавить("	т." + Элем.Имя);
	КонецЦикла;
	
	пТекст = "ВЫБРАТЬ
	|" + СтрСоединить(пМассивПолей, "," + Символы.ПС) + "
	|ПОМЕСТИТЬ " + пИмяТаблицы + пСпецИмя + "
	|ИЗ
	|	&" + пИмяТаблицы + " КАК т
	|;
	|";
	
	
	пМассивПолей = новый Массив;
	
	Для каждого Элем из пСтрукКолонки Цикл
		Если Элем.Значение = 0 Тогда
			пМассивПолей.Добавить("	т." + Элем.Ключ);
		ИначеЕсли Элем.Значение = 1 Тогда
			пИмяКолонкиТип = Элем.Ключ + пСпецИмя + "Т";
			пМассивПолей.Добавить("	ТИПЗНАЧЕНИЯ(т." + пИмяКолонкиТип + ") КАК " + Элем.Ключ);
		ИначеЕсли Элем.Значение = 2 Тогда
			пИмяКолонкиТип = Элем.Ключ + пСпецИмя + "Т";
			пИмяКолонкиХХХ = Элем.Ключ + пСпецИмя + "Х";
			пМассивПолей.Добавить("	ЕСТЬNULL(т." + пИмяКолонкиХХХ + ", ТИПЗНАЧЕНИЯ(т." + пИмяКолонкиТип + ")) КАК " + Элем.Ключ);
		ИначеЕсли Элем.Значение = 3 Тогда
			пИмяКолонкиТип = Элем.Ключ + пСпецИмя + "Т";
			пМассивПолей.Добавить("	т." + пИмяКолонкиТип + ".МоментВремени КАК " + Элем.Ключ);
		ИначеЕсли Элем.Значение = 4 Тогда
			пИмяКолонкиТип = Элем.Ключ + пСпецИмя + "Т";
			пИмяКолонкиХХХ = Элем.Ключ + пСпецИмя + "Х";
			пМассивПолей.Добавить("	ЕСТЬNULL(т." + пИмяКолонкиХХХ + ", т." + пИмяКолонкиТип + ".МоментВремени) КАК " + Элем.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	пТекст = пТекст + "ВЫБРАТЬ
	|" + СтрСоединить(пМассивПолей, "," + Символы.ПС) + "
	|ПОМЕСТИТЬ " + пИмяТаблицы + "
	|ИЗ
	|	" + пИмяТаблицы + пСпецИмя + " КАК т
	|;
	|
	|УНИЧТОЖИТЬ " + пИмяТаблицы + пСпецИмя + "
	|";
	
	Возврат пТекст;
КонецФункции

&НаСервереБезКонтекста
Функция вОписаниеТипов(пТип)
	пМассив = новый Массив;
	пМассив.Добавить(пТип);
	
	Возврат новый ОписаниеТипов(пМассив);
КонецФункции


&НаКлиенте
Процедура _ПоместитьТаблицуВДанныеМВТ(Команда)
	Если вСЗапросомРаботатьНельзя() Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = вПолучитьИмяТаблицыДляОбработки();
	Если ИмяРеквизита = "" Тогда
		Возврат;
	КонецЕсли;
	
	вПоместитьТаблицуВДанныеМВТ(ИмяРеквизита);
	
	вСохранитьДанныеЗапроса("МВТ");
	вЗапросыИзменены(истина);
КонецПроцедуры

&НаСервере
Функция вПолучитьОписаниеТаблицы(Знач ИмяРеквизита)
	пОписаниеТаблицы = ?(ИмяРеквизита = "_ВременнаяТаблицаДанные", _ОписаниеВременнойТаблицы, _ОписаниеТаблицыРезультата);
	Возврат пОписаниеТаблицы;
КонецФункции

&НаСервере
Процедура вПоместитьТаблицуВДанныеМВТ(Знач ИмяРеквизита)
	ТабРезультат = РеквизитФормыВЗначение(ИмяРеквизита);
	
	пОписаниеТаблицы = вПолучитьОписаниеТаблицы(ИмяРеквизита);
	вТипизироватьКолонкиТаблицыЗначений(ТабРезультат, пОписаниеТаблицы);
	
	НС = _МВТ.Добавить();
	НС.Имя = "втДанные";
	НС.СпецЗначение = ЗначениеВСтрокуВнутр(ТабРезультат);
	//НС.Описание = ЗначениеВСтрокуВнутр(пОписаниеТаблицы);
КонецПроцедуры

&НаКлиенте
Процедура _МВТПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если вСЗапросомРаботатьНельзя() Тогда
		Отказ = истина;
		Возврат;
	КонецЕсли;
	
	Если не Копирование Тогда
		Отказ = истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _МВТПриИзменении(Элемент)
	Если вСЗапросомРаботатьНельзя() Тогда
		Возврат;
	КонецЕсли;
	
	вСохранитьДанныеЗапроса("МВТ");
	вЗапросыИзменены(истина);
КонецПроцедуры

&НаКлиенте
Процедура _РедактироватьТаблицуМВТ(Команда)
	ТекДанные = Элементы._МВТ.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		пСтрук = новый Структура("ЗначениеВнутр, Заголовок", ТекДанные.СпецЗначение, "Временная таблица: " + ТекДанные.Имя);
		ОткрытьФорму(_ПутьКФормам + "ФормаТаблицыЗначений", пСтрук, ЭтаФорма,,,,новый ОписаниеОповещения("вПослеЗакрытияФормыРедактированияВременнойТаблицы", ЭтаФорма),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вПослеЗакрытияФормыРедактированияВременнойТаблицы(РезультатЗакрытия, ДопПараметры) Экспорт
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		ТекДанные = Элементы._МВТ.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			ТекДанные.СпецЗначение = РезультатЗакрытия.СтрокаВнутр;
			ТекДанные.ЧислоСтрок = РезультатЗакрытия.ЧислоСтрок;
			
			вСохранитьДанныеЗапроса("МВТ");
			вЗапросыИзменены(истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _РассчитатьРазмерыТаблицМВТ(Команда)
	Для каждого Стр из Элементы._МВТ.ВыделенныеСтроки Цикл
		ТекДанные = _МВТ.НайтиПоИдентификатору(Стр);
		Если ТекДанные <> Неопределено Тогда
			ТекДанные.ЧислоСтрок = вРассчитатьРазмерТаблицы(ТекДанные.СпецЗначение);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура _СохранитьТаблицыМВТ(Команда)
	_БуферПараметровЗапроса.Очистить();
	
	Для каждого Стр из Элементы._МВТ.ВыделенныеСтроки Цикл
		ТекДанные = _МВТ.НайтиПоИдентификатору(Стр);
		Если ТекДанные <> Неопределено Тогда
			НС = _БуферПараметровЗапроса.Добавить();
			ЗаполнитьЗначенияСвойств(НС, ТекДанные);
			НС.ЭтоСпецЗначение = истина;
			НС.Значение = "ТаблицаЗначений";
			НС.ТипЗначения = "ТаблицаЗначений";
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура _ВосстановитьТаблицыМВТ(Команда)
	Если вСЗапросомРаботатьНельзя() Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Стр из _БуферПараметровЗапроса Цикл
		Если Стр.ТипЗначения = "ТаблицаЗначений" Тогда
			НС = _МВТ.Добавить();
			ЗаполнитьЗначенияСвойств(НС, Стр);
		КонецЕсли;
	КонецЦикла;
	вСохранитьДанныеЗапроса("МВТ");
	вЗапросыИзменены(истина);
КонецПроцедуры

&НаСервереБезКонтекста
Функция вРассчитатьРазмерТаблицы(Знач пСтрокаВнутр)
	пЗначение = ЗначениеИзСтрокиВнутр(пСтрокаВнутр);
	
	Возврат ?(ТипЗнч(пЗначение) = Тип("ТаблицаЗначений"), пЗначение.Количество(), 0);
КонецФункции

&НаКлиенте
Процедура _СформироватьТекстЗапросаИзТаблицы(Команда)
	ТекДанные = Элементы._МВТ.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		пТекст = вСформироватьТекстЗапросаИзТаблицы(ТекДанные.Имя, ТекДанные.СпецЗначение);
		
		Если не ПустаяСтрока(пТекст) Тогда
			пТекстовыйДокумент = новый ТекстовыйДокумент;
			пТекстовыйДокумент.УстановитьТекст(пТекст);
			пТекстовыйДокумент.Показать("Запрос по временной таблице");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция вСформироватьТекстЗапросаИзТаблицы(Знач пИмя, Знач пСтрокаВнутр)
	Попытка
		пТабРезультат = ЗначениеИзСтрокиВнутр(пСтрокаВнутр);
		Если пТабРезультат.Колонки.Количество() = 0 Тогда
			Возврат "";
		КонецЕсли;
	Исключение
		Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат "";
	КонецПопытки;
	
	пМассивПолей = новый Массив;
	
	Для каждого Элем из пТабРезультат.Колонки Цикл
		пМассивПолей.Добавить("	т." + Элем.Имя + " КАК " + Элем.Имя);
	КонецЦикла;
	
	пТекст = "ВЫБРАТЬ
	|" + СтрСоединить(пМассивПолей, "," + Символы.ПС) + "
	|ИЗ
	|	" + пИмя + " КАК т
	|";
	
	Возврат пТекст;
КонецФункции


// ПЕРЕХВАТ ЗАПРОСОВ В ОТЛАДЧИКЕ

&НаКлиенте
Процедура _СформироватьКодДляПерехватаЗапроса(Команда)
	Если не Объект._ЭтоВстроеннаяОбработка Тогда
		
		пАдрес = СтрЗаменить(Объект._ИмяФайлаОбработки, "\", "/");
		
		Если ПустаяСтрока(пАдрес) Тогда
			вПоказатьПредупреждение("Операция не доступна для обработки!");
			Возврат;
		КонецЕсли;
		
		Если ЭтоАдресВременногоХранилища(пАдрес) Тогда
			
			пТекст = "ВнешниеОбработки.Создать(""%1"", ложь).вСохранитьЗапрос(%2, Запрос)";
			_КодДляПерехватаЗапросаВОтладчике = СтрШаблон(пТекст, вПолучитьИмяОбработки(), Формат(Объект._КлючСеанса, "ЧГ=0"));
			
		Иначе
			
			#Если ВебКлиент Тогда
				вПоказатьПредупреждение("Операция не доступна для web клиента!");
				Возврат;
			#КонецЕсли
			
			Попытка
				пДвоичныеДанные = новый ДвоичныеДанные(Объект._ИмяФайлаОбработки);
			Исключение
				вПоказатьПредупреждение("Не найден файл внешней обработки: " + Объект._ИмяФайлаОбработки);
				Возврат;
			КонецПопытки;
			
			пСтрук = вПоместитьОбработкуНаСервер(пДвоичныеДанные, _ОписаниеРазработки);
			
			Если не пСтрук.Отказ Тогда
				пТекст = "ВнешниеОбработки.Создать(""%1"", ложь).вСохранитьЗапрос(%2, Запрос)";
				_КодДляПерехватаЗапросаВОтладчике = СтрШаблон(пТекст, пСтрук.ИмяФайла, Формат(Объект._КлючСеанса, "ЧГ=0"));
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		пТекст = "Обработки.%1.Создать().вСохранитьЗапрос(%2, Запрос)";
		_КодДляПерехватаЗапросаВОтладчике = СтрШаблон(пТекст, Объект._ИмяФайлаОбработки, Формат(Объект._КлючСеанса, "ЧГ=0"));
	КонецЕсли;
	
	Если не ПустаяСтрока(_КодДляПерехватаЗапросаВОтладчике) Тогда
		пТекст = _КодДляПерехватаЗапросаВОтладчике + "
		|" + вСтрПовтор("-", СтрДлина(_КодДляПерехватаЗапросаВОтладчике)) + "
		|
		|" + _СправкаПоПерехватуЗапросов;
		
		ТДок = новый ТекстовыйДокумент;
		ТДок.УстановитьТекст(пТекст);
		ТДок.Показать(_ОписаниеРазработки.Наименование + " (перехват запросов)");
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция вСтрПовтор(пСтрока, Знач пЧислоПовторений)
	пЗначение = "";
	Пока пЧислоПовторений > 0 Цикл
		пЧислоПовторений = пЧислоПовторений - 1;
		пЗначение = пЗначение + пСтрока;
	КонецЦикла;
	
	Возврат пЗначение;
КонецФункции

&НаСервереБезКонтекста
Функция вПоместитьОбработкуНаСервер(Знач пДвоичныеДанные, Знач пОписаниеОбработки)
	пИмяФайла = КаталогВременныхФайлов() + "СДРКонсольЗапросвХ-" + пОписаниеОбработки.НомерВерсии + ".epf";
	
	пСтрук = новый Структура("Отказ, ИмяФайла", ложь, пИмяФайла);
	
	Попытка
		пДвоичныеДанные.Записать(пИмяФайла);
	Исключение
		пСтрук.Отказ = истина;
		Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат пСтрук;
КонецФункции

&НаКлиенте
Процедура _ПодгрузитьПерехваченныеЗапросы(Команда)
	ТекДанные = Элементы._ДеревоЗапросов.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		пМассивФайлов = вПолучитьИменаФайловЗапросовНаСервере("*." + Объект._РасширениеФайлаЗапроса);
		пЧислоФайлов = пМассивФайлов.Количество();
		
		Если пЧислоФайлов = 0 Тогда
			вПоказатьПредупреждение("Файлы перехваченных запросов не обнаружены!");
			Возврат;
		КонецЕсли;
		
		пМассивДанных = вПолучитьСодержимоеФайловЗапросовНаСервере(пМассивФайлов);
		
		Для каждого Элем из пМассивДанных Цикл
			Если не вПроверитьДанныеПередЗагрузкойЗапросов(Элем) Тогда
				Продолжить;
			КонецЕсли;
			
			Попытка
				вЗагрузитьЦепочкуЗапросовИзМассива(ТекДанные, Элем.Элементы);
			Исключение
				Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
			вЗапросыИзменены(истина);
		КонецЦикла;
		
		вУдалитьФайлыПерехваченныхЗапросовНаСервере(пМассивФайлов);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _УдалитьФайлыПерехваченныхЗапросов(Команда)
	пМассивФайлов = вПолучитьИменаФайловЗапросовНаСервере("*." + Объект._РасширениеФайлаЗапроса);
	пЧислоФайлов = пМассивФайлов.Количество();
	
	Если пЧислоФайлов = 0 Тогда
		вПоказатьПредупреждение("Файлы перехваченных запросов не обнаружены!");
	Иначе
		пТекст = СтрШаблон("Файлы перехваченных запросов (%1 шт) будут удалены! Продолжить?", пЧислоФайлов);
		вПоказатьВопрос("вУдалитьФайлыПерехваченныхЗапросов_Ответ", пТекст, пМассивФайлов);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вУдалитьФайлыПерехваченныхЗапросов_Ответ(Ответ, пМассивФайлов) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если вУдалитьФайлыПерехваченныхЗапросовНаСервере(пМассивФайлов) Тогда
			вПоказатьПредупреждение("Файлы перехваченных запросов удалены!");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция вУдалитьФайлыПерехваченныхЗапросовНаСервере(Знач пМассивФайлов)
	пЕстьОшибки = ложь;
	
	Для каждого Элем из пМассивФайлов Цикл
		Попытка
			УдалитьФайлы(Элем);
		Исключение
			пЕстьОшибки = истина;
			Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	
	Возврат не пЕстьОшибки;
КонецФункции

&НаСервереБезКонтекста
Функция вПолучитьСодержимоеФайловЗапросовНаСервере(Знач пМассивФайлов)
	пМассивДанных = новый Массив;
	
	Для каждого Элем из пМассивФайлов Цикл
		Попытка
			ТДок = новый ТекстовыйДокумент;
			ТДок.Прочитать(Элем);
			
			пДанные = ЗначениеИзСтрокиВнутр(ТДок.ПолучитьТекст());
			пМассивДанных.Добавить(пДанные);
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Возврат пМассивДанных;
КонецФункции

&НаСервереБезКонтекста
Функция вПолучитьИменаФайловЗапросовНаСервере(Знач пМаскаФайлов)
	пМассивИмен = новый Массив;
	
	пФайлы = НайтиФайлы(КаталогВременныхФайлов(), пМаскаФайлов);
	
	Для каждого Элем из пФайлы Цикл
		пМассивИмен.Добавить(Элем.ПолноеИмя);
	КонецЦикла;
	
	Возврат пМассивИмен;
КонецФункции

&НаКлиенте
Процедура _ИзменитьКлючСеанса(Команда)
	вИзменитьКлючСеанса();
КонецПроцедуры

&НаСервере
Процедура вИзменитьКлючСеанса()
	_КодДляПерехватаЗапросаВОтладчике = "";
	
	пОбработка = РеквизитФормыВЗначение("Объект");
	пОбработка.вПодготовитьОбработку(1);
	ЗначениеВРеквизитФормы(пОбработка, "Объект");
КонецПроцедуры


// ИТОГИ ПО ЧИСЛОВЫМ КОЛОНКАМ РЕЗУЛЬТАТА ЗАПРОСОВ

&НаКлиенте
Процедура _ПересчитатьИтогиПоКолонкам(Команда)
	Если вСЗапросомРаботатьНельзя() Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = вПолучитьИмяТаблицыДляОбработки();
	Если ИмяРеквизита = "" Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяРеквизита = "_ТабРезультатыЗапроса" Тогда
		Если не _ПоказыватьИтогиПоЧисловымКолонкам Тогда
			Возврат;
		КонецЕсли;
	ИначеЕсли ИмяРеквизита = "_ВременнаяТаблицаДанные" Тогда
		Если не _ПоказыватьИтогиПоЧисловымКолонкамДляВТ Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если не Элементы[ИмяРеквизита].Подвал Тогда
		Возврат;
	КонецЕсли;
	
	вПересчитатьИтогиПоКолонкам(ИмяРеквизита);
КонецПроцедуры

&НаСервере
Процедура вПересчитатьИтогиПоКолонкам(Знач пИмяРеквизита)
	пТипЧисло = Тип("Число");
	пТабРезультат = РеквизитФормыВЗначение(пИмяРеквизита);
	
	Если пТабРезультат = Неопределено Тогда
		пТабРезультат = новый ТаблицаЗначений;
	КонецЕсли;
	
	Для каждого пКолонка из пТабРезультат.Колонки Цикл
		Если пКолонка.ТипЗначения.СодержитТип(пТипЧисло) Тогда
			ЭФ = Элементы.Найти(пИмяРеквизита + "_" + пКолонка.Имя);
			Если ЭФ <> Неопределено Тогда
				ЭФ.ТекстПодвала = Строка(пТабРезультат.Итог(пКолонка.Имя));
				ЭФ.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Право;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура _РассчитатьИтогиДляВыделенныхСтрок(Команда)
	Если вСЗапросомРаботатьНельзя() Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = вПолучитьИмяТаблицыДляОбработки();
	Если ИмяРеквизита = "" Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяРеквизита = "_ТабРезультатыЗапроса" Тогда
		Если не _ПоказыватьИтогиПоЧисловымКолонкам Тогда
			Возврат;
		КонецЕсли;
	ИначеЕсли ИмяРеквизита = "_ВременнаяТаблицаДанные" Тогда
		Если не _ПоказыватьИтогиПоЧисловымКолонкамДляВТ Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если не Элементы[ИмяРеквизита].Подвал Тогда
		Возврат;
	КонецЕсли;
	
	вРассчитатьИтогиДляВыделенныхСтрок(ИмяРеквизита);
КонецПроцедуры

&НаСервере
Процедура вРассчитатьИтогиДляВыделенныхСтрок(Знач пИмяРеквизита)
	пТипЧисло = Тип("Число");
	
	пДанныеФормы = ЭтаФорма[пИмяРеквизита];
	пВыделенныеСтроки = Элементы[пИмяРеквизита].ВыделенныеСтроки;
	
	Если пИмяРеквизита = "_ТабРезультатыЗапроса" Тогда
		пОписаниеТаблицы = _ОписаниеТаблицыРезультата;
	Иначе
		пОписаниеТаблицы = _ОписаниеВременнойТаблицы;
	КонецЕсли;
	
	пСтрукИтоги = новый Структура;
	
	Для каждого Элем из пОписаниеТаблицы Цикл
		Если Элем.Значение.СодержитТип(пТипЧисло) Тогда
			пСтрукИтоги.Вставить(Элем.Ключ, 0);
		КонецЕсли;
	КонецЦикла;
	
	Если пСтрукИтоги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// внешний цикл по строкам
	
	//Для каждого пИдентификатор из пВыделенныеСтроки Цикл
	//	ТекДанные = пДанныеФормы.НайтиПоИдентификатору(пИдентификатор);
	//	Если ТекДанные <> Неопределено Тогда
	//		Для каждого Элем из пСтрукИтоги Цикл
	//			пЗначение = ТекДанные[Элем.Ключ];
	//			Если ТипЗнч(пЗначение) = пТипЧисло Тогда
	//				пСтрукИтоги[Элем.Ключ] = пСтрукИтоги[Элем.Ключ] + пЗначение;
	//			КонецЕсли;
	//		КонецЦикла;
	//	КонецЕсли;
	//КонецЦикла;
	
	
	// внешний цикл по колонкам
	
	Для каждого Элем из пСтрукИтоги Цикл
		Для каждого пИдентификатор из пВыделенныеСтроки Цикл
			ТекДанные = пДанныеФормы.НайтиПоИдентификатору(пИдентификатор);
			Если ТекДанные <> Неопределено Тогда
				пЗначение = ТекДанные[Элем.Ключ];
				Если ТипЗнч(пЗначение) = пТипЧисло Тогда
					пСтрукИтоги[Элем.Ключ] = пСтрукИтоги[Элем.Ключ] + пЗначение;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для каждого Элем из пСтрукИтоги Цикл
		ЭФ = Элементы.Найти(пИмяРеквизита + "_" + Элем.Ключ);
		Если ЭФ <> Неопределено Тогда
			ЭФ.ТекстПодвала = Строка(Элем.Значение);
			ЭФ.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Право;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
