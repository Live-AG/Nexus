

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьТаблицуКластеров();		

КонецПроцедуры

&НаКлиенте
Процедура ДеревоЭлементовКластераПриАктивизацииЯчейки(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ТаблицаИнформационныхБаз, 
													"Сервер1С", 
													Элемент.ТекущиеДанные.ЭлементКластера);
	
	//Если Элемент.ТекущиеДанные <> Неопределено Тогда
	//	
	//	Если Элемент.ТекущиеДанные.КэшОписанияЭлемента = Неопределено Тогда
	//		ПолеОписанияЭлемента = ЗаполнитьОписаниеЭлемента(Элемент.ТекущиеДанные);
	//		Элемент.ТекущиеДанные.КэшОписанияЭлемента = ПолеОписанияЭлемента;
	//	Иначе
	//		ПолеОписанияЭлемента = Элемент.ТекущиеДанные.КэшОписанияЭлемента;
	//	КонецЕсли;
	//КонецЕсли;		

КонецПроцедуры

&НаКлиенте
Функция ЗаполнитьОписаниеЭлемента(ТекущиеДанные)
	
	Кластер = ТекущиеДанные.ЭлементКластера;
	СостояниеКластера = ТекущиеДанные.Состояние;
	
	Если СостояниеКластера <> ПредопределенноеЗначение("Перечисление.СостоянияЭлементовКластера.Активен") Тогда
		Возврат ПолучитьМакетНеактивногоЭлемента();
	КонецЕсли;
	
	Если ТипЗнч(Кластер) = Тип("СправочникСсылка.КластерСервераПриложений") Тогда
		Возврат ЗаполнитьОписаниеКластераНаСервере(Кластер);
	ИначеЕсли ТипЗнч(Кластер) = Тип("СправочникСсылка.ИнформационныеБазы") Тогда	
		
	КонецЕсли;
	
КонецФункции 

&НаСервереБезКонтекста
Функция ПолучитьМакетНеактивногоЭлемента()

	Возврат Обработки.МониторИнформационныхБаз.ПолучитьМакет("МакетНеактивногоЭлемента");	

КонецФункции // ПолучитьМакетНеактивногоЭлемента()

&НаСервере
Функция ЗаполнитьОписаниеКластераНаСервере(Кластер)
	
	Возврат Справочники.КластерСервераПриложений.ПолучитьМакетОписанияКластера(Кластер);		
	
КонецФункции

&НаКлиенте
Процедура ПолеОписанияЭлементаОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОбработки = Неопределено;
	Если Расшифровка.Свойство("ПараметрыБазы", ПараметрыОбработки) Тогда
		//ОбработатьРегистрациюИнформационнойБазы(ПараметрыОбработки);
		
		ДополнительныеПараметры = Новый Структура; 
		ДополнительныеПараметры.Вставить("ПараметрыБазы", ПараметрыОбработки);
		ДополнительныеПараметры.Вставить("Кластер", Элементы.ДеревоЭлементовКластера.ТекущиеДанные.ЭлементКластера);
		
		ИнформационнаяБаза = ПолучитьНезарегестрированнуюБазу(ДополнительныеПараметры.Кластер, ПараметрыОбработки["name"]);
		
		ОткрытьФорму("Справочник.ИнформационныеБазы.ФормаОбъекта", Новый Структура("Ключ, ДополнительныеПараметры", ИнформационнаяБаза, ДополнительныеПараметры), ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры    


&НаСервереБезКонтекста
Функция ПолучитьНезарегестрированнуюБазу(Кластер, ИмяНаСервере1С)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИнформационныеБазы.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ИнформационныеБазы КАК ИнформационныеБазы
	               |ГДЕ
	               |	ИнформационныеБазы.Сервер1С = &Сервер1С
	               |	И ИнформационныеБазы.ИмяНаСервере1С = &ИмяНаСервере1С";
	
	Запрос.УстановитьПараметр("Сервер1С", Кластер);
	Запрос.УстановитьПараметр("ИмяНаСервере1С", ИмяНаСервере1С);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.ИнформационныеБазы.ПустаяСсылка();
	КонецЕсли;

КонецФункции // ПолучитьНезарегестрированнуюБазу()


&НаСервере                                                                                                            
Процедура ЗаполнитьТаблицуКластеров()
	
	ТаблицаКластеров = РеквизитФормыВЗначение("ТаблицаЭлементовКластера");
	
	ТаблицаКластеров.Очистить();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	КластерСервераПриложений.Ссылка КАК Кластер,
	               |	КластерСервераПриложений.ИдентификаторКластера КАК ИдентификаторКластера,
	               |	КластерСервераПриложений.ПортКластера КАК ПортКластера,
	               |	КластерСервераПриложений.ВерсияПлатформы КАК ВерсияПлатформы
	               |ИЗ
	               |	Справочник.КластерСервераПриложений КАК КластерСервераПриложений
	               |ГДЕ
	               |	НЕ КластерСервераПриложений.ПометкаУдаления
	               |	И КластерСервераПриложений.Активен";
					
	Результат = Запрос.Выполнить();
	ВыборкаКластер = Результат.Выбрать();
	
	Пока ВыборкаКластер.Следующий() Цикл          
		
		СтрокаТаблицыКластеров = ТаблицаКластеров.Добавить();
		СтрокаТаблицыКластеров.ЭлементКластера = ВыборкаКластер.Кластер;
		СтрокаТаблицыКластеров.ИдентификаторКластера = ВыборкаКластер.ИдентификаторКластера;
		СтрокаТаблицыКластеров.КраткоеОписание = "Платформа: " + ВыборкаКластер.ВерсияПлатформы;
		//СтрокаТаблицыКластеров.Состояние = Справочники.КластерСервераПриложений.ПолучитьСостояниеКластера(ВыборкаКластер.Кластер);
		
		//Если СтрокаТаблицыКластеров.Состояние = Перечисления.СостоянияЭлементовКластера.Активен Тогда
		//	СтрокаТаблицыКластеров.ИндексСостояния = 1;		
		//ИначеЕсли СтрокаТаблицыКластеров.Состояние = Перечисления.СостоянияЭлементовКластера.НеАктивен Тогда
		//	СтрокаТаблицыКластеров.ИндексСостояния = 2;	 					
		//Иначе
		//	СтрокаТаблицыКластеров.ИндексСостояния = 0;
		//КонецЕсли;
		
		СтрокаТаблицыКластеров.ИндексСостояния = 0;
		
		СтрокаТаблицыКластеров.ИдентификаторКластера = ВыборкаКластер.ИдентификаторКластера;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТаблицаКластеров, "ТаблицаЭлементовКластера");
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоКластеров(Команда)
	
	ТекущаяСтрока = Элементы.ДеревоЭлементовКластера.ТекущаяСтрока;
	ЗаполнитьТаблицуКластеров();
	ОбновитьСостоянияКластеров();
	Элементы.ДеревоЭлементовКластера.ТекущаяСтрока = ТекущаяСтрока;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "РегистрацияБазы" Тогда
		ТекущаяСтрока = Элементы.ДеревоЭлементовКластера.ТекущаяСтрока;
		ЗаполнитьТаблицуКластеров();
		ОбновитьСостоянияКластеров();
		Элементы.ДеревоЭлементовКластера.ТекущаяСтрока = ТекущаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостоянияКластеров()
	
	Для Каждого СтрокаТаблицы Из ТаблицаЭлементовКластера Цикл
		
		//СтрокаТаблицы.
		
			
		                                                            
	КонецЦикла;	

КонецПроцедуры // ОбновитьСостоянияКластеров() 


// //1) Функция, которая будет исполняться в фоне, располагается в модуле менеджера объекта или в серверном общем модуле: 
// 
//  //Справочники.КластерСервераПриложений.ПолучитьСостояниеКластера(ВыборкаКластер.Кластер)
//    Функция РассчитатьЗначение(Знач МойПараметр1, Знач МойПараметр2) Экспорт
//     ...
//     Возврат Результат;
//    КонецФункции

//   //2) Запуск операции на сервере и подключение обработчика ожидания:
//    &НаКлиенте
//    Процедура РассчитатьЗначение()
//     ДлительнаяОперация = НачатьВыполнениеНаСервере();
//     ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьРезультат", ЭтотОбъект);
//     ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
//     ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
//    КонецПроцедуры

//    &НаСервере
//    Функция НачатьВыполнениеНаСервере()
//     ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
//     Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, "Обработка.МояОбработка.РассчитатьЗначение", 
//      МойПараметр1, МойПараметр2);
//    КонецФункции
//    
//   //3) Обработка результата длительной операции:
//    &НаКлиенте
//    Процедура ОбработатьРезультат(Результат, ДополнительныеПараметры) Экспорт
//     Если Результат = Неопределено Тогда
//      Возврат;
//     КонецЕсли;
//     ВывестиРезультат(Результат.АдресРезультата);
//    КонецПроцедуры 


&НаКлиенте
Процедура ДеревоЭлементовКластераВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	АктивнаяСтрокаДерева = ТаблицаЭлементовКластера.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если АктивнаяСтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементКластера = АктивнаяСтрокаДерева.ЭлементКластера;
		
	Если ТипЗнч(ЭлементКластера) = Тип("СправочникСсылка.КластерСервераПриложений") Тогда
		
		ОткрытьФорму("Справочник.КластерСервераПриложений.ФормаОбъекта", Новый Структура("Ключ", ЭлементКластера));
		
	ИначеЕсли ТипЗнч(ЭлементКластера) = Тип("СправочникСсылка.ИнформационныеБазы") Тогда
		
		ОткрытьФорму("Справочник.ИнформационныеБазы.ФормаОбъекта", Новый Структура("Ключ", ЭлементКластера));
		
	КонецЕсли;
	
	
КонецПроцедуры





