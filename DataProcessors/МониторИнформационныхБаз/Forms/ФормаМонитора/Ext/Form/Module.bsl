				
				
//#REF Создать области модуля				
				
&НаКлиенте	 
Перем ТекущийВидОтбора;	

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВидОтбора = "Кластеры";
	ТекущийВидОтбора = ВидОтбора; 
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаЭлементовКластера, "ТекущийПользователь", ТекущийПользователь, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаПроектов, "ТекущийПользователь", ТекущийПользователь,  Истина);

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЭлементовКластераПриАктивизацииЯчейки(Элемент)
	
	УстановитьОтборПоТаблицеБаз();       
	
	ИндексСортировки = Элементы.ТаблицаЭлементовКластера.ТекущиеДанные.ПолеУпорядочивания;
	
	УстановитьСвойстваМенюЗакрепить(Элементы.ТаблицаЭлементовКластераКонтекстноеМенюЗакрепитьТекущийЭлемент, 
								Элементы.ТаблицаЭлементовКластера.ТекущиеДанные.ИндексКартинкиЗакрепить, 
								ИндексСортировки);
	Элементы.ТаблицаЭлементовКластераКонтекстноеМенюПереместитьЗакрепленноеВверх.Доступность	= ИндексСортировки < 100;
	Элементы.ТаблицаЭлементовКластераКонтекстноеМенюПереместитьЗакрепленноеВниз.Доступность	= ИндексСортировки < 100; 
	
КонецПроцедуры 

&НаКлиенте
Процедура УстановитьОтборПоТаблицеБаз()

	Если ТекущийВидОтбора <> ВидОтбора Тогда
		
		Для Каждого ЭлементОтбор Из ТаблицаИнформационныхБаз.Отбор.Элементы Цикл
			
			Если ЭлементОтбор.Представление = ТекущийВидОтбора Тогда
				ЭлементОтбор.Использование = Ложь;						
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТекущийВидОтбора = ВидОтбора;
	
	Если ВидОтбора = "Кластеры" И Элементы.ТаблицаЭлементовКластера.ТекущиеДанные <> Неопределено Тогда      
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ТаблицаИнформационныхБаз, 
																	"Владелец", 
																	Элементы.ТаблицаЭлементовКластера.ТекущиеДанные.ЭлементКластера,
																	,
																	ВидОтбора, 
																	Истина);  
		
																	
		Если Элементы.ТаблицаЭлементовКластера.ТекущиеДанные.ИндексСостояния = 0 Тогда
			Элементы.СтраницыИнформацииКластера.ТекущаяСтраница = Элементы.СтраницаОперацияОжидания;
		Иначе 
			Элементы.СтраницыИнформацииКластера.ТекущаяСтраница = Элементы.СтраницаИнформационныеБазы;
		КонецЕсли; 
		
	ИначеЕсли ВидОтбора = "Проекты" И Элементы.ТаблицаПроектов.ТекущиеДанные <> Неопределено Тогда
		
		Элементы.СтраницыИнформацииКластера.ТекущаяСтраница = Элементы.СтраницаИнформационныеБазы;
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ТаблицаИнформационныхБаз, 
																	"Проект", 
																	Элементы.ТаблицаПроектов.ТекущиеДанные.Проект,
																	,
																	ВидОтбора, 
																	Истина);
	КонецЕсли;

КонецПроцедуры // УстановитьОтборПоТаблицеБаз()

&НаКлиенте
Процедура УстановитьСвойстваМенюЗакрепить(ЭлементМеню, Значение, ИндексСортировки)
	
	ИндексПредопределенного = 101;
	
	Если Значение = 1 Тогда
		ЭлементМеню.Заголовок	= "Закрепить элемент";
		ЭлементМеню.Картинка	= БиблиотекаКартинок.Закрепить;
	Иначе
		ЭлементМеню.Заголовок	= "Открепить элемент";
		ЭлементМеню.Картинка	= БиблиотекаКартинок.Открепить;
	КонецЕсли;                                     
	
	ЭлементМеню.Доступность = ИндексСортировки <> ИндексПредопределенного;

КонецПроцедуры // УстановитьСвойстваМенюЗакрепить()


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОтобразитьТекущийОтбор();
	
	//#REF Избавиться от вызова сервера
	ЕстьАктивныеЗадания = ЕстьАктивныеЗаданияДляКластеров();
	//Если ЕстьАктивныеЗадания Тогда
	//	ПодключитьОбработчикОжидания("ПроверитьТекущиеЗаданияКластеров", 3, Ложь);	
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЗаполнитьОписаниеЭлемента(ТекущиеДанные)
	
	Кластер = ТекущиеДанные.ЭлементКластера;
	СостояниеКластера = ТекущиеДанные.Состояние;
	
	Если СостояниеКластера <> ПредопределенноеЗначение("Перечисление.СостоянияЭлементовКластера.Активен") Тогда
		Возврат ПолучитьМакетНеактивногоЭлемента();
	КонецЕсли;
	
	Если ТипЗнч(Кластер) = Тип("СправочникСсылка.Кластеры1С") Тогда
		Возврат ЗаполнитьОписаниеКластераНаСервере(Кластер);
	ИначеЕсли ТипЗнч(Кластер) = Тип("СправочникСсылка.ИнформационныеБазы") Тогда	
		
	КонецЕсли;
	
КонецФункции 

&НаСервереБезКонтекста
Функция ПолучитьМакетНеактивногоЭлемента()

	Возврат Обработки.МониторИнформационныхБаз.ПолучитьМакет("МакетНеактивногоЭлемента");	

КонецФункции // ПолучитьМакетНеактивногоЭлемента()

&НаСервере
Функция ЗаполнитьОписаниеКластераНаСервере(Кластер)
	
	Возврат Справочники.Кластеры1С.ПолучитьМакетОписанияКластера(Кластер);		
	
КонецФункции

&НаКлиенте
Процедура ПолеОписанияЭлементаОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОбработки = Неопределено;
	Если Расшифровка.Свойство("ПараметрыБазы", ПараметрыОбработки) Тогда
		//ОбработатьРегистрациюИнформационнойБазы(ПараметрыОбработки);
		
		ДополнительныеПараметры = Новый Структура; 
		ДополнительныеПараметры.Вставить("ПараметрыБазы", ПараметрыОбработки);
		ДополнительныеПараметры.Вставить("Кластер", Элементы.ТаблицаЭлементовКластера.ТекущиеДанные.ЭлементКластера);
		
		ИнформационнаяБаза = ПолучитьНезарегестрированнуюБазу(ДополнительныеПараметры.Кластер, ПараметрыОбработки["name"]);
		
		ОткрытьФорму("Справочник.ИнформационныеБазы.ФормаОбъекта", Новый Структура("Ключ, ДополнительныеПараметры", ИнформационнаяБаза, ДополнительныеПараметры), ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры    

&НаСервереБезКонтекста
Функция ПолучитьНезарегестрированнуюБазу(Кластер, ИмяНаСервере1С)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИнформационныеБазы.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ИнформационныеБазы КАК ИнформационныеБазы
	               |ГДЕ
	               |	ИнформационныеБазы.Владелец = &Владелец
	               |	И ИнформационныеБазы.ИмяНаСервере1С = &ИмяНаСервере1С";
	
	Запрос.УстановитьПараметр("Владелец", Кластер);
	Запрос.УстановитьПараметр("ИмяНаСервере1С", ИмяНаСервере1С);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.ИнформационныеБазы.ПустаяСсылка();
	КонецЕсли;

КонецФункции // ПолучитьНезарегестрированнуюБазу()


&НаКлиенте
Процедура ОбновитьДеревоКластеров(Команда)
	
	Если ВидОтбора = "Кластеры" Тогда
		Элементы.ТаблицаЭлементовКластера.Обновить();
	ИначеЕсли ВидОтбора = "Проекты" Тогда
		Элементы.ТаблицаПроектов.Обновить();
	ИначеЕсли ВидОтбора = "Пользователи" Тогда
		//#REF Обновить таблицу пользователей
	ИначеЕсли ВидОтбора = "Избранное" Тогда
		//#REF Обновить таблицу избранное
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "РегистрацияБазы" Тогда
		//#REF Обновить таблицу баз
	ИначеЕсли ИмяСобытия = "РегистрацияИнформационныхБаз" Тогда  
		Элементы.ТаблицаЭлементовКластера.Обновить();
		ОбработатьДлительныеЗадания(Параметр);
	КонецЕсли;
	
КонецПроцедуры   

&НаКлиенте
Процедура ОбработатьДлительныеЗадания(Результат)

	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("НаименованиеФоновогоЗадания", "ОбработкаЗаданияКластера");
	
	Если Результат.Статус <> "Выполняется" Тогда 
		ПослеЗавершенияДлительногоЗадания(Результат, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ПослеЗавершенияДлительногоЗадания", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, Обработчик, ПараметрыОжидания);

КонецПроцедуры // ОбработатьДлительныеЗадания()

&НаКлиенте
Процедура ПослеЗавершенияДлительногоЗадания(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Статус = "Выполнено" Тогда
		Элементы.ТаблицаЭлементовКластера.Обновить();
		Если Элементы.ТаблицаЭлементовКластера.ТекущиеДанные <> Неопределено
			И Элементы.ТаблицаЭлементовКластера.ТекущиеДанные.ИндексСостояния = 0 Тогда 
			Элементы.СтраницыИнформацииКластера.ТекущаяСтраница = Элементы.СтраницаОперацияОжидания;
		Иначе 
			Элементы.СтраницыИнформацииКластера.ТекущаяСтраница = Элементы.СтраницаИнформационныеБазы;
		КонецЕсли;                                
		
		Элементы.ТаблицаИнформационныхБаз.Обновить();
	КонецЕсли;				
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТекущиеЗаданияКластеров()

	//#REF Уменьшить передачу данных между клиентом и сервером
	//#REF Запретить повторный запуск обработчикаожидания
	Элементы.ТаблицаЭлементовКластера.Обновить();
	Если Не ЕстьАктивныеЗаданияДляКластеров() Тогда
		ОтключитьОбработчикОжидания("ПроверитьТекущиеЗаданияКластеров"); 
		
		Элементы.ТаблицаИнформационныхБаз.Обновить();
		Если Элементы.ТаблицаЭлементовКластера.ТекущиеДанные.ИндексСостояния = 0 Тогда 
			Элементы.СтраницыИнформацииКластера.ТекущаяСтраница = Элементы.СтраницаОперацияОжидания;
		Иначе 
			Элементы.СтраницыИнформацииКластера.ТекущаяСтраница = Элементы.СтраницаИнформационныеБазы;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры      

&НаСервереБезКонтекста
Функция ЕстьАктивныеЗаданияДляКластеров()

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТекущиеЗаданияОбъектов.ИдентификаторЗадания КАК ИдентификаторЗадания,
	               |	ТекущиеЗаданияОбъектов.ИсточникЗадания КАК ИсточникЗадания
	               |ИЗ
	               |	РегистрСведений.ТекущиеЗаданияОбъектов КАК ТекущиеЗаданияОбъектов
	               |ГДЕ
	               |	ТИПЗНАЧЕНИЯ(ТекущиеЗаданияОбъектов.ИсточникЗадания) = ТИП(Справочник.Кластеры1С)";
	
	Результат = Запрос.Выполнить(); 
	Возврат Не Результат.Пустой();

КонецФункции // ЕстьАктивныеЗаданияДляКластеров()

&НаКлиенте
Процедура ТаблицаИнформационныхБазВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнформационнаяБаза = Элементы.ТаблицаИнформационныхБаз.ТекущаяСтрока;
	Если Поле.Имя = "ТаблицаИнформационныхБазПолеНастройка" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ОткрытьФорму("Справочник.ИнформационныеБазы.Форма.ФормаЗапускаПриложения", Новый Структура("ИнформационнаяБаза", ИнформационнаяБаза));
		
		//СписокВыбора = Новый СписокЗначений;	
		//СписокВыбора.Добавить("Запустить", "Запустить", , БиблиотекаКартинок.ВыполнитьЗапуск);
		//СписокВыбора.Добавить("Редактировать", "Редактировать", , БиблиотекаКартинок.Редактировать);
		//СписокВыбора.Добавить("Обслуживание", "Обслуживание", , БиблиотекаКартинок.ВыполнитьСкрипт);

		//Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзМеню", ЭтотОбъект, ИнформационнаяБаза);
		//ПоказатьВыборИзМеню(Оповещение, СписокВыбора, Элемент);				 
				 
	Иначе 
	    	ОткрытьФорму("Справочник.ИнформационныеБазы.ФормаОбъекта", 
						Новый Структура("Ключ", ИнформационнаяБаза), 
						Элемент, 
						ЭтаФорма);	
		
	КонецЕсли;
	
КонецПроцедуры   

&НаКлиенте
Процедура ПослеВыбораИзМеню(ВыбранныйЭлемент, Параметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйЭлемент.Значение = "Запустить" Тогда
		ОткрытьФорму("Справочник.ИнформационныеБазы.Форма.ФормаЗапускаПриложения", Новый Структура("ИнформационнаяБаза", Параметры));
	КонецЕсли;
	

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПроектовПриАктивизацииЯчейки(Элемент)
	
	УстановитьОтборПоТаблицеБаз();
	ИндексСортировки = Элементы.ТаблицаПроектов.ТекущиеДанные.ПолеУпорядочивания;
	УстановитьСвойстваМенюЗакрепить(Элементы.ТаблицаПроектовКонтекстноеМенюЗакрепитьТекущийЭлемент, 
								Элементы.ТаблицаПроектов.ТекущиеДанные.ИндексКартинкиЗакрепить,
								ИндексСортировки);
								
	Элементы.ТаблицаПроектовКонтекстноеМенюПереместитьЗакрепленноеВверх.Доступность	= ИндексСортировки < 100;
	Элементы.ТаблицаПроектовКонтекстноеМенюПереместитьЗакрепленноеВниз.Доступность	= ИндексСортировки < 100;							
								
КонецПроцедуры

&НаКлиенте
Процедура ВидОтбораПриИзменении(Элемент)
	
	ОтобразитьТекущийОтбор();	
	
КонецПроцедуры   

&НаКлиенте
Процедура КомандаКластеры(Команда)
	
	ВидОтбора = "Кластеры";
	ОтобразитьТекущийОтбор();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПроекты(Команда)
	
	ВидОтбора = "Проекты";
	ОтобразитьТекущийОтбор();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИзбранное(Команда)
	
	ВидОтбора = "Избранное";
	ОтобразитьТекущийОтбор();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьТекущийОтбор()

	Если ВидОтбора = "Кластеры" Тогда
		Элементы.ГруппаСтраницыОтборов.ТекущаяСтраница = Элементы.ГруппаКластеры;
	ИначеЕсли ВидОтбора = "Проекты" Тогда
		Элементы.ГруппаСтраницыОтборов.ТекущаяСтраница = Элементы.ГруппаПроекты;
	ИначеЕсли ВидОтбора = "Избранное" Тогда
		Элементы.ГруппаСтраницыОтборов.ТекущаяСтраница = Элементы.ГруппаИзбранное;
	КонецЕсли;
	
	Элементы.КомандаКластеры.Доступность	= Не ВидОтбора = "Кластеры";
	Элементы.КомандаПроекты.Доступность		= Не ВидОтбора = "Проекты";
	Элементы.КомандаИзбранное.Доступность	= Не ВидОтбора = "Избранное";
	
	УстановитьОтборПоТаблицеБаз();

КонецПроцедуры // ОтобразитьТекущийОтбор()



&НаКлиенте
Процедура ДобавитьКластер(Команда)
	
	ОткрытьФорму("Справочник.Кластеры1С.ФормаОбъекта", , ЭтаФорма, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьБазу(Команда)
	
	СтруктураПараметров = Новый Структура; 
	
	Если Элементы.ГруппаСтраницыОтборов.ТекущаяСтраница = Элементы.ГруппаКластеры 
	    И Элементы.ТаблицаЭлементовКластера.ТекущиеДанные <> Неопределено Тогда
		СтруктураПараметров.Вставить("Владелец", Элементы.ТаблицаЭлементовКластера.ТекущаяСтрока);
	ИначеЕсли Элементы.ГруппаСтраницыОтборов.ТекущаяСтраница = Элементы.ГруппаПроекты
		     И Элементы.ТаблицаПроектов.ТекущиеДанные <> Неопределено Тогда	
		СтруктураПараметров.Вставить("Проект", Элементы.ТаблицаПроектов.ТекущаяСтрока);
	КонецЕсли;
	
 	ОткрытьФорму("Справочник.ИнформационныеБазы.Форма.ФормаНовойБазы", Новый Структура("ЗначенияЗаполнения", СтруктураПараметров), ЭтаФорма, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗакрепитьКластер(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПроект(Команда)
	
	ОткрытьФорму("Справочник.Проекты.ФормаОбъекта", , ЭтаФорма, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрепитьТекущийЭлемент(Команда)
	
	Если ВидОтбора = "Кластеры" И Элементы.ТаблицаЭлементовКластера.ТекущиеДанные <> Неопределено Тогда
		ЗакрепитьЭлементНаСервере("Кластеры1С", 
								Элементы.ТаблицаЭлементовКластера.ТекущиеДанные.ЭлементКластера);    
		Элементы.ТаблицаЭлементовКластера.Обновить();
		//#REF Вызывает ошибку - возможно ошибка платформы
		УстановитьСвойстваМенюЗакрепить(Элементы.ТаблицаЭлементовКластераКонтекстноеМенюЗакрепитьТекущийЭлемент, 
								Элементы.ТаблицаЭлементовКластера.ТекущиеДанные.ИндексКартинкиЗакрепить,
								0);
	ИначеЕсли ВидОтбора = "Проекты" И Элементы.ТаблицаПроектов.ТекущиеДанные <> Неопределено Тогда
		ЗакрепитьЭлементНаСервере("Проекты", 
								Элементы.ТаблицаПроектов.ТекущиеДанные.Проект);	 
		Элементы.ТаблицаПроектов.Обновить();
		УстановитьСвойстваМенюЗакрепить(Элементы.ТаблицаПроектовКонтекстноеМенюЗакрепитьТекущийЭлемент, 
								Элементы.ТаблицаПроектов.ТекущиеДанные.ИндексКартинкиЗакрепить,
								0);
	Иначе
		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура ЗакрепитьЭлементНаСервере(ИмяСправочник, Элемент)
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
					|	ЗакрепленныеЭлементы.НомерВГруппе КАК НомерВГруппе,
					|	ВЫБОР
					|		КОГДА ЗакрепленныеЭлементы.ЭлементЗакрепления = &ВыбранныйЭлемент
					|			ТОГДА ИСТИНА
					|		ИНАЧЕ ЛОЖЬ
					|	КОНЕЦ КАК ЭлементЗакреплен,
					|	ЗакрепленныеЭлементы.ЭлементЗакрепления КАК ЭлементЗакрепления
					|ИЗ
					|	РегистрСведений.ЗакрепленныеЭлементы КАК ЗакрепленныеЭлементы
					|ГДЕ
					|	ЗакрепленныеЭлементы.Пользователь = &ТекущийПользователь
					|	И ЗакрепленныеЭлементы.ЭлементЗакрепления ССЫЛКА Справочник." + ИмяСправочник + "
					|
					|УПОРЯДОЧИТЬ ПО
					|	НомерВГруппе
					|ИТОГИ
					|	МАКСИМУМ(НомерВГруппе),
					|	МАКСИМУМ(ЭлементЗакреплен),
					|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЭлементЗакрепления)
					|ПО
					|	ОБЩИЕ";
	
	Запрос.УстановитьПараметр("ТекущийПользователь",	ТекущийПользователь);
	Запрос.УстановитьПараметр("ВыбранныйЭлемент",	Элемент);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	НомерВГруппе = 1;
	
	Если Выборка.Следующий() Тогда
	
		Если Выборка.ЭлементЗакреплен Тогда
			ВыборкаДетальная = Выборка.Выбрать();
			
			Пока ВыборкаДетальная.Следующий() Цикл
				Если ВыборкаДетальная.ЭлементЗакрепления <> Элемент Тогда
					ЗаписьРегистра = РегистрыСведений.ЗакрепленныеЭлементы.СоздатьМенеджерЗаписи();
					ЗаписьРегистра.Пользователь			= ТекущийПользователь;
					ЗаписьРегистра.ЭлементЗакрепления	= ВыборкаДетальная.ЭлементЗакрепления;
					ЗаписьРегистра.НомерВГруппе			= НомерВГруппе;
					ЗаписьРегистра.Записать();  
					
					НомерВГруппе = НомерВГруппе + 1;
				Иначе
					ЗаписьРегистра = РегистрыСведений.ЗакрепленныеЭлементы.СоздатьМенеджерЗаписи();
					ЗаписьРегистра.Пользователь			= ТекущийПользователь;
					ЗаписьРегистра.ЭлементЗакрепления	= Элемент;
					ЗаписьРегистра.Удалить();
				КонецЕсли;
			КонецЦикла;
			
			Возврат;      
			
		Иначе
			НомерВГруппе = Выборка.НомерВГруппе + 1	
		КонецЕсли;
	КонецЕсли;  
	
	ЗаписьРегистра = РегистрыСведений.ЗакрепленныеЭлементы.СоздатьМенеджерЗаписи();
	ЗаписьРегистра.Пользователь			= ТекущийПользователь;
	ЗаписьРегистра.ЭлементЗакрепления	= Элемент;
	ЗаписьРегистра.НомерВГруппе			= НомерВГруппе;
	ЗаписьРегистра.Записать();

КонецПроцедуры // ЗакрепитьЭлементНаСервере()


#Область Отладка

&НаКлиенте
Процедура Тест_ПересоздатьКластер(Команда)
	
	Отладка_УдалитьКластер(Элементы.ТаблицаЭлементовКластера.ТекущаяСтрока);
	ОткрытьФорму("Справочник.Кластеры1С.ФормаОбъекта");
	
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура Отладка_УдалитьКластер(Кластер)

	Кластер.ПолучитьОбъект().Удалить();	

КонецПроцедуры // Отладка_УдалитьКластер()

&НаКлиенте
Процедура Тест_ОбновитьРегистрациюБаз(Команда)
	
	РезультатОперации = НачатьРегистрациюБазКластера(Элементы.ТаблицаЭлементовКластера.ТекущаяСтрока);					
	Элементы.ТаблицаЭлементовКластера.Обновить(); 
	УстановитьОтборПоТаблицеБаз();
	ОбработатьДлительныеЗадания(РезультатОперации);
	
КонецПроцедуры 


&НаСервере
Функция НачатьРегистрациюБазКластера(Кластер)
	
	Результат = Справочники.Кластеры1С.НачатьРегистрациюБазКластера(Кластер);
	
	Возврат Результат;
	
КонецФункции // НачатьРегистрациюБазКластера()


#КонецОбласти



&НаКлиенте
Процедура ЗакрепитьИнформационнуюБазу(Команда)
	

	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьЗакрепленноеВверх(Команда)
	
	Если ВидОтбора = "Кластеры" И Элементы.ТаблицаЭлементовКластера.ТекущиеДанные <> Неопределено Тогда
		ПереместитьЭлементНаСервере("Кластеры1С", 
								Элементы.ТаблицаЭлементовКластера.ТекущиеДанные.ПолеУпорядочивания, 
								"Вверх");
		Элементы.ТаблицаЭлементовКластера.Обновить();
	ИначеЕсли ВидОтбора = "Проекты" И Элементы.ТаблицаПроектов.ТекущиеДанные <> Неопределено Тогда
		ПереместитьЭлементНаСервере("Проекты", 
								Элементы.ТаблицаПроектов.ТекущиеДанные.ПолеУпорядочивания, 
								"Вверх");								
		Элементы.ТаблицаПроектов.Обновить();
	Иначе
		
	КонецЕсли;
	
	
КонецПроцедуры 

&НаКлиенте
Процедура ПереместитьЗакрепленноеВниз(Команда)
	
	Если ВидОтбора = "Кластеры" И Элементы.ТаблицаЭлементовКластера.ТекущиеДанные <> Неопределено Тогда
		ПереместитьЭлементНаСервере("Кластеры1С", 
								Элементы.ТаблицаЭлементовКластера.ТекущиеДанные.ПолеУпорядочивания, 
								"Вниз");
		Элементы.ТаблицаЭлементовКластера.Обновить();
	ИначеЕсли ВидОтбора = "Проекты" И Элементы.ТаблицаПроектов.ТекущиеДанные <> Неопределено Тогда
		ПереместитьЭлементНаСервере("Проекты", 
								Элементы.ТаблицаПроектов.ТекущиеДанные.ПолеУпорядочивания, 
								"Вниз");								
		Элементы.ТаблицаПроектов.Обновить();
	Иначе
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПереместитьЭлементНаСервере(ИмяСправочник, НомерВГруппе, Направление)
	
	Если НомерВГруппе > 99 Или НомерВГруппе < 1 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Если Направление = "Вверх" Тогда
		НомерВерхнейСтроки	= НомерВГруппе - 1;
		НомерНижнейСтроки		= НомерВГруппе;
	ИначеЕсли Направление = "Вниз" Тогда          
		НомерВерхнейСтроки	= НомерВГруппе;
		НомерНижнейСтроки		= НомерВГруппе + 1;
	Иначе
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрШаблон("ВЫБРАТЬ ПЕРВЫЕ 2
							|	ЗакрепленныеЭлементы.Пользователь КАК Пользователь,
							|	ЗакрепленныеЭлементы.ЭлементЗакрепления КАК ЭлементЗакрепления,
							|	ЗакрепленныеЭлементы.НомерВГруппе КАК НомерВГруппе
							|ИЗ
							|	РегистрСведений.ЗакрепленныеЭлементы КАК ЗакрепленныеЭлементы
							|ГДЕ
							|	ЗакрепленныеЭлементы.Пользователь = &ТекущийПользователь
							|	И ЗакрепленныеЭлементы.ЭлементЗакрепления ССЫЛКА Справочник.%1 
							|	И ЗакрепленныеЭлементы.НомерВГруппе МЕЖДУ %2 И %3
							|УПОРЯДОЧИТЬ ПО
							|	ЗакрепленныеЭлементы.НомерВГруппе УБЫВ", 
							ИмяСправочник, 
							НомерВерхнейСтроки,
							НомерНижнейСтроки);
				
	Запрос.УстановитьПараметр("ТекущийПользователь",	ТекущийПользователь);
	Результат	= Запрос.Выполнить();
	Выборка	= Результат.Выбрать();
	
	Если Выборка.Количество() < 2 Тогда
		Возврат;
	КонецЕсли;
	
	Выборка.Следующий(); 
	ЗаписьРегистра = РегистрыСведений.ЗакрепленныеЭлементы.СоздатьМенеджерЗаписи();
	ЗаписьРегистра.Пользователь			= Выборка.Пользователь;
	ЗаписьРегистра.ЭлементЗакрепления	= Выборка.ЭлементЗакрепления;
	ЗаписьРегистра.НомерВГруппе			= НомерВерхнейСтроки;
	ЗаписьРегистра.Записать();		                        
	
	Выборка.Следующий(); 
	ЗаписьРегистра = РегистрыСведений.ЗакрепленныеЭлементы.СоздатьМенеджерЗаписи();
	ЗаписьРегистра.Пользователь			= Выборка.Пользователь;
	ЗаписьРегистра.ЭлементЗакрепления	= Выборка.ЭлементЗакрепления;
	ЗаписьРегистра.НомерВГруппе			= НомерНижнейСтроки;
	ЗаписьРегистра.Записать();

КонецПроцедуры // ПереместитьЭлементНаСервере()











