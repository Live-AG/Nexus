

Функция ПолучитьАгентаАдминистрированияКластера(ПараметрыПодключения, Отказ = Ложь) Экспорт
	
	АгентАдминистрирования = Новый АдминистрированиеСервера(ПараметрыПодключения.АдресСервераАдминистрирования, 
														ПараметрыПодключения.ПортСервераАдминистрирования);
	Попытка													
		АгентАдминистрирования.ВыполнитьАутентификацию(ПараметрыПодключения.ПользовательЦентральногоСервер, 
													ПараметрыПодключения.ПарольЦентральногоСервера);
		Отказ = Ложь;													
	Исключение
		Отказ = Истина;
	КонецПопытки;    
	
	Возврат АгентАдминистрирования;     
	
КонецФункции        

Функция ПолучитьПараметрыКластера(Кластер) Экспорт
	
	АгентАдминистрирования = ПолучитьАгентаАдминистрированияКластера(Кластер);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВерсияПлатформы", АгентАдминистрирования.ПолучитьВерсию()); 
	
	МассивКласеторов = АгентАдминистрирования.ПолучитьКластеры();
	Если МассивКласеторов.Количество() = 1 Тогда
		ЭлементМассиваКластеров = МассивКласеторов[0];
		
		ЭлементМассиваКластеров.ВыполнитьАутентификацию(Кластер.ИмяАдминистратораКластера, Кластер.ПарольАдминистратораКластера);
		
		СтруктураПараметров.Вставить("ИмяКомпьютера", ЭлементМассиваКластеров.ИмяКомпьютера);
		СтруктураПараметров.Вставить("Имя", ЭлементМассиваКластеров.Имя);
		СтруктураПараметров.Вставить("ИдентификаторКластера", ЭлементМассиваКластеров.ИдентификаторКластера); 
		СтруктураПараметров.Вставить("Порт", ЭлементМассиваКластеров.Порт);
		СтруктураПараметров.Вставить("ИнформационныеБазы", ЭлементМассиваКластеров.ПолучитьИнформационныеБазы());
	Иначе
		СтруктураПараметров.Вставить("МассивКласеторов", МассивКласеторов);			
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция ПолучитьАдиминистрированиеКластера(Кластер, Отказ = Ложь) Экспорт
	
	АгентАдминистрирования = ПолучитьАгентаАдминистрированияКластера(Кластер);	
	МассивКласеторов = АгентАдминистрирования.ПолучитьКластеры();
	Для Каждого ЭлементМассиваКластеров Из МассивКласеторов Цикл
		Если ЭлементМассиваКластеров.ИдентификаторКластера = Кластер.ИдентификаторКластера Тогда
			Попытка
				ЭлементМассиваКластеров.ВыполнитьАутентификацию(Кластер.ИмяАдминистратораКластера, 
															Кластер.ПарольАдминистратораКластера);
				Отказ = Ложь;															
			Исключение
				Отказ = Истина;
			КонецПопытки;
			
			Возврат ЭлементМассиваКластеров;
		КонецЕсли;
	КонецЦикла;		
		
КонецФункции

Функция ПолучитьБазыКластера(Кластер) Экспорт
	
	ЭлементАдминистрированияКластера = ПолучитьАдиминистрированиеКластера(Кластер);	
	Возврат ЭлементАдминистрированияКластера.ПолучитьИнформационныеБазы();
	
КонецФункции 

Функция ПолучитьРабочиеСерверыКластера(Кластер) Экспорт
	
	ЭлементАдминистрированияКластера = ПолучитьАдиминистрированиеКластера(Кластер);	
	Возврат ЭлементАдминистрированияКластера.ПолучитьРабочиеСерверы();
	
КонецФункции

Функция ПолучитьТаблицуАктивныхСеансовКластера(Кластер) Экспорт
	
	ТаблицаСеансов = Новый ТаблицаЗначений;
	ТаблицаСеансов.Колонки.Добавить("ИдентификаторИнформационнойБазы",	Новый ОписаниеТипов("УникальныйИдентификатор"));
	ТаблицаСеансов.Колонки.Добавить("ИмяПользователя",					ОбщегоНазначения.ОписаниеТипаСтрока(150));
	ТаблицаСеансов.Колонки.Добавить("ВремяНачала",						ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаСеансов.Колонки.Добавить("СпящийСеанс",						Новый ОписаниеТипов("Булево"));
	
	ЭлементАдминистрированиеКластера = ПолучитьАдиминистрированиеКластера(Кластер);		
	АктивныеСеансы = ЭлементАдминистрированиеКластера.ПолучитьСеансы();
	
	Для Каждого ОписаниеСеанса Из АктивныеСеансы Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаСеансов.Добавить(), ОписаниеСеанса);
	КонецЦикла;
	
	Возврат ТаблицаСеансов;
	
КонецФункции         