

//// Возвращает путь к консольному клиенту сервера администрирования.
////
//// Возвращаемое значение:
////   Строка
////
//Функция ПутьККлиентуСервераАдминистрирования() Экспорт
//	
//	КаталогЗапуска = КаталогИсполняемыхФайловПлатформы();
//	Клиент = КаталогЗапуска + "ibcmd";
//	
//	Возврат Клиент;
//	
//КонецФункции

//#КонецОбласти

//#Область СлужебныеПроцедурыИФункции

//Функция КаталогИсполняемыхФайловПлатформы()
//	
//	Результат = КаталогПрограммы();
//	СимволРазделителя = ПолучитьРазделительПути();
//	
//	Если Прав(Результат, 1) <> СимволРазделителя Тогда
//		Результат = Результат + СимволРазделителя;
//	КонецЕсли;
//	
//	Возврат Результат;
//	
//КонецФункции


//Функция СоздатьИнформационнуюБазу(Знач ПараметрыАдминистрированияКластера, Знач ПараметрыАдминистрированияИБ, Знач Словарь) Экспорт //Nexus +Экспорт
//	
//	//ibcmd infobase create --dbms=mssqlserver --db-server=dbServerName --db-user=dbUser --db-pwd=dbUserPassword --db-name=my-db --name=docsIB --create-database --load="D:\Cfgs\MyApp\1Cv8.cf" --apply
//	Команда = "infobase info --infobase=%1 --infobase-user=%2 --infobase-pwd=%3";
//	ПодставитьПараметрыВКоманду(Команда, 
//		ИдентификаторИнформационнойБазы, 
//		ПараметрыАдминистрированияИБ.ИмяАдминистратораИнформационнойБазы, 
//		ПараметрыАдминистрированияИБ.ПарольАдминистратораИнформационнойБазы);
//		
//	Результат = ЗапуститьКоманду(Команда + " " + ПараметрыКластера, ПараметрыАдминистрированияКластера, Словарь, , ТипыСвойствИнформационнойБазы());
//	
//	Возврат Результат[0];
//	
//КонецФункции  

//#КонецОбласти   

Функция ПолучитьСтруктуруПараметровИнформационнойБазы()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("АдресСервераАдминистрирования"); 
	СтруктураПараметров.Вставить("ПортСервераАдминистрирования"); 
	СтруктураПараметров.Вставить("ПользовательЦентральногоСервер"); 
	СтруктураПараметров.Вставить("ПарольЦентральногоСервера"); 
	СтруктураПараметров.Вставить("СерверБД"); 
	СтруктураПараметров.Вставить("БазаДанных"); 
	СтруктураПараметров.Вставить("ИмяАдминистратораСУБД"); 
	СтруктураПараметров.Вставить("ПарольАдминистратораСУБД"); 
	СтруктураПараметров.Вставить("АдресКластера"); 
	СтруктураПараметров.Вставить("ПортКластера"); 
	СтруктураПараметров.Вставить("ИмяИБ"); 
	СтруктураПараметров.Вставить("ИмяПользователяИБ"); 
	СтруктураПараметров.Вставить("ПарольПользователяИБ"); 
	
	Возврат СтруктураПараметров;

КонецФункции // ПолучитьСтруктуруПараметровИнформационнойБазы()

Функция ПолучитьПараметрыИнформационнойБазы(ИнформационнаяБаза) Экспорт
	
	//#TODO Получение структуры параметров для скрипта
	СтруктураПараметров = ПолучитьСтруктуруПараметровИнформационнойБазы();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				|	ИнформационныеБазы.Владелец.АдресСервераАдминистрирования КАК АдресСервераАдминистрирования,
				|	ИнформационныеБазы.Владелец.ПортСервераАдминистрирования КАК ПортСервераАдминистрирования,
				|	ИнформационныеБазы.Владелец.ПользовательЦентральногоСервер КАК ПользовательЦентральногоСервер,
				|	ИнформационныеБазы.Владелец.ПарольЦентральногоСервера КАК ПарольЦентральногоСервера,
				|	ИнформационныеБазы.Владелец.АдресКластера КАК АдресКластера,
				|	ИнформационныеБазы.Владелец.ПортКластера КАК ПортКластера,
				|	ИнформационныеБазы.Владелец.ИмяАдминистратораКластера КАК ИмяАдминистратораКластера,
				|	ИнформационныеБазы.Владелец.ПарольАдминистратораКластера КАК ПарольАдминистратораКластера,
				|	ИнформационныеБазы.Владелец.РабочиеСерверыКластера.(
				|		Имя КАК РабочиеСерверыИмя,
				|		Порт КАК РабочиеСерверыПорт
				|	) КАК РабочиеСерверы,
				|	ИнформационныеБазы.ИмяИБ КАК ИмяИБ,
				|	ИнформационныеБазы.СерверБД.ИмяСервера КАК СерверБД,
				|	ИнформационныеБазы.СерверБД.ИмяАдминистратораСУБД КАК ИмяАдминистратораСУБД,
				|	ИнформационныеБазы.СерверБД.ПарольАдминистратораСУБД КАК ПарольАдминистратораСУБД,
				|	ИнформационныеБазы.БазаДанных КАК БазаДанных,
				|	ИнформационныеБазы.ИмяПользователяИБ КАК ИмяПользователяИБ,
				|	ИнформационныеБазы.ПарольПользователяИБ КАК ПарольПользователяИБ
				|ИЗ
				|	Справочник.ИнформационныеБазы КАК ИнформационныеБазы
				|ГДЕ
				|	ИнформационныеБазы.Ссылка = &ИнформационнаяБаза";
	
	Запрос.УстановитьПараметр("ИнформационнаяБаза", ИнформационнаяБаза);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, Выборка); 
		Для Каждого Сервер Из Выборка.РабочиеСерверы Цикл

							
			
		КонецЦикла;
		
	КонецЕсли;   
	
	Возврат СтруктураПараметров;
	
КонецФункции // ПолучитьПараметрыИнформационнойБазы()

Функция ПолучитьАдминистрированиеИнформационнойБазы(ИнформационнаяБаза, Отказ = Ложь) Экспорт
	
	ИдентификаторИнформационнойБазы = ИнформационнаяБаза.ИдентификаторБазы;
	МассивИнформационныхБаз = АдминистрированиеСерверов.ПолучитьБазыКластера(ИнформационнаяБаза.Владелец);
	Для Каждого АдминистрированиеИнформационнойБазы Из МассивИнформационныхБаз Цикл
		
		Если АдминистрированиеИнформационнойБазы.ИдентификаторИнформационнойБазы = ИдентификаторИнформационнойБазы Тогда
			Попытка
				АдминистрированиеИнформационнойБазы.ВыполнитьАутентификацию(ИнформационнаяБаза.ИмяПользователяИБ, ИнформационнаяБаза.ПарольПользователяИБ);
			Исключение
				Отказ = Истина;
			КонецПопытки;
			
			Возврат АдминистрированиеИнформационнойБазы;	
		КонецЕсли;
	КонецЦикла;  
	
	Возврат Неопределено;

КонецФункции // ПолучитьАдминистрированиеИнформационнойБазы()

Функция ПолучитьКаталогВременныхФайловБазы(ИнформационнаяБаза) Экспорт
	
	ПутьКВременнымДаннымБазы = КаталогВременныхФайлов() 
							+ Строка(ИнформационнаяБаза.ИдентификаторБазы) 
							+ ПолучитьРазделительПути(); 
	
	КаталогНаДиске = Новый Файл(ПутьКВременнымДаннымБазы);
	Если Не КаталогНаДиске.Существует() Тогда
		СоздатьКаталог(ПутьКВременнымДаннымБазы);
	КонецЕсли;		
	
	Возврат ПутьКВременнымДаннымБазы;
	
КонецФункции

Функция ПолучитьСвойстваИнформационнойБазы(ИнформационнаяБаза) Экспорт
	
	СтркутураСвойствБазы = Новый Структура;
	
	Отказ = Ложь;
	Адимнистрирование_ИнформационнаяБаза = ПолучитьАдминистрированиеИнформационнойБазы(ИнформационнаяБаза, Отказ);
	
	СтркутураСвойствБазы.Вставить("АвторизацияПройдена", Не Отказ);
	
	Если Отказ Тогда 
		Возврат СтркутураСвойствБазы;
	КонецЕсли;
	
	СтркутураСвойствБазы.Вставить("БлокировкаРегламентныхЗаданий", Адимнистрирование_ИнформационнаяБаза.БлокировкаРегламентныхЗаданий);
	
	БлокировкаНачалаСеансов = Адимнистрирование_ИнформационнаяБаза.ВключенаБлокировкаНачалаСеансов 
							И Адимнистрирование_ИнформационнаяБаза.ВремяОкончанияБлокировки > ТекущаяДатаСеанса();
	
	СтркутураСвойствБазы.Вставить("БлокировкаНачалаСеансов", БлокировкаНачалаСеансов);
	
	СеансыИнформационнойБазы = Адимнистрирование_ИнформационнаяБаза.ПолучитьСеансы();
	СчетчикСеансов = 0;
	
	Для Каждого СеансИнформационнойБазы Из СеансыИнформационнойБазы Цикл
		Если ПроверитьИмяМассива(СеансИнформационнойБазы.ИмяПриложения) Тогда
			СчетчикСеансов = СчетчикСеансов + 1;
		КонецЕсли;
	КонецЦикла;
	
	СтркутураСвойствБазы.Вставить("КоличествоАктивныхСеансов", СчетчикСеансов);
	СтркутураСвойствБазы.Вставить("ИмяБазыДанных",		Адимнистрирование_ИнформационнаяБаза.ИмяБазыДанных);
	СтркутураСвойствБазы.Вставить("СерверБазДанных",	Справочники.СерверыБД.НайтиПоРеквизиту("ИмяСервера", Адимнистрирование_ИнформационнаяБаза.СерверБазДанных));
	
	Возврат СтркутураСвойствБазы;
	
КонецФункции


Функция ПроверитьИмяМассива(ИмяПриложения)

	Возврат ИмяПриложения = "1CV8"
			Или ИмяПриложения = "1CV8C"
			Или ИмяПриложения = "Designer";

КонецФункции // ПроверитьИмяМассива()

Процедура УстановитьБлокировкуРегламентныхЗаданий(ИнформационнаяБаза, Заблокировать) Экспорт

	Администрирование_ИнформационнойБазы = ПолучитьАдминистрированиеИнформационнойБазы(ИнформационнаяБаза);
	Администрирование_ИнформационнойБазы.БлокировкаРегламентныхЗаданий = Заблокировать;
	Администрирование_ИнформационнойБазы.КодЯзыка = "ru_RU";
	Администрирование_ИнформационнойБазы.Записать();

КонецПроцедуры

Процедура ЗавершитьСеансыИнформационнойБазы(ИнформационнаяБаза, Сеансы = Неопределено, ЗавершатьТолькоСпящие = Ложь) Экспорт
	
	Отказ = Ложь;
	Адимнистрирование_ИнформационнаяБаза = ПолучитьАдминистрированиеИнформационнойБазы(ИнформационнаяБаза, Отказ);
	
	СеансыИнформационнойБазы = Адимнистрирование_ИнформационнаяБаза.ПолучитьСеансы();
	
	ЗавершитьВсеСеансы = (Сеансы = Неопределено);
	
	Для Каждого СеансИнформационнойБазы Из СеансыИнформационнойБазы Цикл
		
		Если ЗавершитьВсеСеансы
		 Или Сеансы.Найти(СеансИнформационнойБазы.ИдентификаторСеанса) <> Неопределено Тогда
		 
			Если ЗавершатьТолькоСпящие И Не СеансИнформационнойБазы.СпящийСеанс Тогда
				Продолжить;
			КонецЕсли;
			
			СеансИнформационнойБазы.ЗавершитьСеанс();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
